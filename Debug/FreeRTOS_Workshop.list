
FreeRTOS_Workshop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a65c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a800  0800a800  0000b800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd4  0800acd4  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800acd4  0800acd4  0000bcd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acdc  0800acdc  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acdc  0800acdc  0000bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ace0  0800ace0  0000bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ace4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c1e0  200001e0  0800aec4  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c3c0  0800aec4  0000c3c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157eb  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358a  00000000  00000000  000219fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00024f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  00026458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a011  00000000  00000000  00027440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018012  00000000  00000000  00041451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d389  00000000  00000000  00059463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f67ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f0  00000000  00000000  000f6830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ed  00000000  00000000  000fce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7e4 	.word	0x0800a7e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a7e4 	.word	0x0800a7e4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20007ca0 	.word	0x20007ca0
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fb15 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f82b 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 f893 	bl	8001104 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the CYCCNT counter
    DWT_CTRL |= (1<<0);//used for systemview timestamp
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <main+0x54>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <main+0x54>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6013      	str	r3, [r2, #0]

    //Initialize UART
    SEGGER_UART_init(200000);
 8000fea:	480e      	ldr	r0, [pc, #56]	@ (8001024 <main+0x58>)
 8000fec:	f004 fbe6 	bl	80057bc <SEGGER_UART_init>
    NVIC_SetPriorityGrouping(0);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff ffc7 	bl	8000f84 <__NVIC_SetPriorityGrouping>
    //Start events recording
    SEGGER_SYSVIEW_Conf();
 8000ff6:	f004 fa0b 	bl	8005410 <SEGGER_SYSVIEW_Conf>
    //SEGGER_SYSVIEW_Start(); //already called in segger_uart.c
    HAL_Delay(5000); //This delay is to give time to click on play in systemview, to capture tasks creations
 8000ffa:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ffe:	f000 fb41 	bl	8001684 <HAL_Delay>

    /************* YOUR CODE INITIALIZATIONS STARTS HERE *****************************/

    xTaskCreate(Led1_task, "LED 1 Task", 200, NULL, 2, NULL);
 8001002:	2300      	movs	r3, #0
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	2302      	movs	r3, #2
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2300      	movs	r3, #0
 800100c:	22c8      	movs	r2, #200	@ 0xc8
 800100e:	4906      	ldr	r1, [pc, #24]	@ (8001028 <main+0x5c>)
 8001010:	4806      	ldr	r0, [pc, #24]	@ (800102c <main+0x60>)
 8001012:	f002 fb5d 	bl	80036d0 <xTaskCreate>

    /************* YOUR CODE INITIALIZATIONS ENDS HERE *******************************/

  vTaskStartScheduler(); // Start the FreeRTOS scheduler
 8001016:	f002 fcf9 	bl	8003a0c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101a:	bf00      	nop
 800101c:	e7fd      	b.n	800101a <main+0x4e>
 800101e:	bf00      	nop
 8001020:	e0001000 	.word	0xe0001000
 8001024:	00030d40 	.word	0x00030d40
 8001028:	0800a800 	.word	0x0800a800
 800102c:	08001231 	.word	0x08001231

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	@ 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	@ 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fcbd 	bl	80089be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <SystemClock_Config+0xd0>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001094:	2310      	movs	r3, #16
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a0:	2310      	movs	r3, #16
 80010a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ae:	2304      	movs	r3, #4
 80010b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fdc6 	bl	8001c48 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010c2:	f000 f8db 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f828 	bl	8002138 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ee:	f000 f8c5 	bl	800127c <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	@ 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a40      	ldr	r2, [pc, #256]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b3e      	ldr	r3, [pc, #248]	@ (8001224 <MX_GPIO_Init+0x120>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <MX_GPIO_Init+0x120>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a39      	ldr	r2, [pc, #228]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a32      	ldr	r2, [pc, #200]	@ (8001224 <MX_GPIO_Init+0x120>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a2b      	ldr	r2, [pc, #172]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <MX_GPIO_Init+0x120>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001190:	4825      	ldr	r0, [pc, #148]	@ (8001228 <MX_GPIO_Init+0x124>)
 8001192:	f000 fd01 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001196:	230c      	movs	r3, #12
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	481d      	ldr	r0, [pc, #116]	@ (8001228 <MX_GPIO_Init+0x124>)
 80011b2:	f000 fb6d 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80011b6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4816      	ldr	r0, [pc, #88]	@ (8001228 <MX_GPIO_Init+0x124>)
 80011d0:	f000 fb5e 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80011d4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4810      	ldr	r0, [pc, #64]	@ (800122c <MX_GPIO_Init+0x128>)
 80011ea:	f000 fb51 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON4_Pin;
 80011ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <MX_GPIO_Init+0x128>)
 8001206:	f000 fb43 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	2028      	movs	r0, #40	@ 0x28
 8001210:	f000 fb14 	bl	800183c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	f000 fb2d 	bl	8001874 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <Led1_task>:

/* USER CODE BEGIN 4 */
void Led1_task(void *pvParameters)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    for (;;)
    {
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001238:	2120      	movs	r1, #32
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <Led1_task+0x20>)
 800123c:	f000 fcc5 	bl	8001bca <HAL_GPIO_TogglePin>
    	SEGGER_SYSVIEW_PrintfTarget("TASK 1");
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <Led1_task+0x24>)
 8001242:	f006 fd67 	bl	8007d14 <SEGGER_SYSVIEW_PrintfTarget>
    	vTaskDelay(100);
 8001246:	2064      	movs	r0, #100	@ 0x64
 8001248:	f002 fba6 	bl	8003998 <vTaskDelay>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800124c:	bf00      	nop
 800124e:	e7f3      	b.n	8001238 <Led1_task+0x8>
 8001250:	40020000 	.word	0x40020000
 8001254:	0800a80c 	.word	0x0800a80c

08001258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800126a:	f000 f9eb 	bl	8001644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40000800 	.word	0x40000800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	@ 0x38
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <HAL_InitTick+0xe4>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <HAL_InitTick+0xe4>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <HAL_InitTick+0xe4>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001304:	f107 0210 	add.w	r2, r7, #16
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f91e 	bl	8002550 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800131e:	f001 f903 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8001322:	6378      	str	r0, [r7, #52]	@ 0x34
 8001324:	e004      	b.n	8001330 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001326:	f001 f8ff 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 800132a:	4603      	mov	r3, r0
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001332:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <HAL_InitTick+0xe8>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	0c9b      	lsrs	r3, r3, #18
 800133a:	3b01      	subs	r3, #1
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <HAL_InitTick+0xec>)
 8001340:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <HAL_InitTick+0xf0>)
 8001342:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <HAL_InitTick+0xec>)
 8001346:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800134a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800134c:	4a1d      	ldr	r2, [pc, #116]	@ (80013c4 <HAL_InitTick+0xec>)
 800134e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001350:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_InitTick+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <HAL_InitTick+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_InitTick+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001364:	4817      	ldr	r0, [pc, #92]	@ (80013c4 <HAL_InitTick+0xec>)
 8001366:	f001 f925 	bl	80025b4 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001370:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001374:	2b00      	cmp	r3, #0
 8001376:	d11b      	bne.n	80013b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001378:	4812      	ldr	r0, [pc, #72]	@ (80013c4 <HAL_InitTick+0xec>)
 800137a:	f001 f975 	bl	8002668 <HAL_TIM_Base_Start_IT>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001384:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001388:	2b00      	cmp	r3, #0
 800138a:	d111      	bne.n	80013b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800138c:	201e      	movs	r0, #30
 800138e:	f000 fa71 	bl	8001874 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d808      	bhi.n	80013aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	201e      	movs	r0, #30
 800139e:	f000 fa4d 	bl	800183c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <HAL_InitTick+0xf4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e002      	b.n	80013b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3738      	adds	r7, #56	@ 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	431bde83 	.word	0x431bde83
 80013c4:	200001fc 	.word	0x200001fc
 80013c8:	40000800 	.word	0x40000800
 80013cc:	20000004 	.word	0x20000004

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <NMI_Handler+0x4>

080013d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <MemManage_Handler+0x4>

080013e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <TIM4_IRQHandler+0x10>)
 800140e:	f001 f98d 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001fc 	.word	0x200001fc

0800141c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8001420:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001424:	f000 fbec 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8001428:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800142c:	f000 fbe8 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_kill>:

int _kill(int pid, int sig)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144e:	f007 faf7 	bl	8008a40 <__errno>
 8001452:	4603      	mov	r3, r0
 8001454:	2216      	movs	r2, #22
 8001456:	601a      	str	r2, [r3, #0]
  return -1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_exit>:

void _exit (int status)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffe7 	bl	8001444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001476:	bf00      	nop
 8001478:	e7fd      	b.n	8001476 <_exit+0x12>

0800147a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e00a      	b.n	80014a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148c:	f3af 8000 	nop.w
 8001490:	4601      	mov	r1, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	60ba      	str	r2, [r7, #8]
 8001498:	b2ca      	uxtb	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbf0      	blt.n	800148c <_read+0x12>
  }

  return len;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014dc:	605a      	str	r2, [r3, #4]
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_isatty>:

int _isatty(int file)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f007 fa78 	bl	8008a40 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20020000 	.word	0x20020000
 800157c:	00000400 	.word	0x00000400
 8001580:	20000244 	.word	0x20000244
 8001584:	2000c3c0 	.word	0x2000c3c0

08001588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015b0:	f7ff ffea 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	@ (80015ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	@ (80015f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f007 fa37 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff fcf5 	bl	8000fcc <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80015f0:	0800ace4 	.word	0x0800ace4
  ldr r2, =_sbss
 80015f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80015f8:	2000c3c0 	.word	0x2000c3c0

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	@ (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f8fc 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff fe52 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fe28 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008
 8001668:	20000248 	.word	0x20000248

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000248 	.word	0x20000248

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008

080016cc <__NVIC_SetPriorityGrouping>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	@ (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff4c 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184e:	f7ff ff61 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7ff ffb1 	bl	80017c0 <NVIC_EncodePriority>
 800185e:	4602      	mov	r2, r0
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff80 	bl	800176c <__NVIC_SetPriority>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff54 	bl	8001730 <__NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e159      	b.n	8001b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8148 	bne.w	8001b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d130      	bne.n	8001944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a2 	beq.w	8001b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a56      	ldr	r2, [pc, #344]	@ (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a52      	ldr	r2, [pc, #328]	@ (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a49      	ldr	r2, [pc, #292]	@ (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x202>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a48      	ldr	r2, [pc, #288]	@ (8001b84 <HAL_GPIO_Init+0x2f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x1fe>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a47      	ldr	r2, [pc, #284]	@ (8001b88 <HAL_GPIO_Init+0x2f8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x1fa>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a46      	ldr	r2, [pc, #280]	@ (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x1f6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a45      	ldr	r2, [pc, #276]	@ (8001b90 <HAL_GPIO_Init+0x300>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x1f2>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a24      	ldr	r2, [pc, #144]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f aea2 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bdc:	887a      	ldrh	r2, [r7, #2]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	400b      	ands	r3, r1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f806 	bl	8001c30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e267      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c66:	4b88      	ldr	r3, [pc, #544]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b85      	ldr	r3, [pc, #532]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b82      	ldr	r3, [pc, #520]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e242      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b76      	ldr	r3, [pc, #472]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b70      	ldr	r3, [pc, #448]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6f      	ldr	r2, [pc, #444]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b69      	ldr	r3, [pc, #420]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b66      	ldr	r3, [pc, #408]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fcb4 	bl	800166c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fcb0 	bl	800166c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	@ 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e207      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fca0 	bl	800166c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fc9c 	bl	800166c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	@ 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1f3      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b51      	ldr	r3, [pc, #324]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1c7      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4937      	ldr	r1, [pc, #220]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b34      	ldr	r3, [pc, #208]	@ (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fc55 	bl	800166c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fc51 	bl	800166c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1a8      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4925      	ldr	r1, [pc, #148]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fc34 	bl	800166c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc30 	bl	800166c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e187      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d036      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fc14 	bl	800166c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fc10 	bl	800166c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e167      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fbfd 	bl	800166c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fbf9 	bl	800166c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e150      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b88      	ldr	r3, [pc, #544]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8097 	beq.w	8001fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b81      	ldr	r3, [pc, #516]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b7a      	ldr	r3, [pc, #488]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b77      	ldr	r3, [pc, #476]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b74      	ldr	r3, [pc, #464]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a73      	ldr	r2, [pc, #460]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fbb9 	bl	800166c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fbb5 	bl	800166c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e10c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b6a      	ldr	r3, [pc, #424]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2ea>
 8001f24:	4b64      	ldr	r3, [pc, #400]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x30c>
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f46:	4b5c      	ldr	r3, [pc, #368]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f54:	4b58      	ldr	r3, [pc, #352]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f58:	4a57      	ldr	r2, [pc, #348]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f60:	4b55      	ldr	r3, [pc, #340]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	4a54      	ldr	r2, [pc, #336]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff fb7a 	bl	800166c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fb76 	bl	800166c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0cb      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	4b49      	ldr	r3, [pc, #292]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ee      	beq.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fb64 	bl	800166c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fb60 	bl	800166c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0b5      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a38      	ldr	r2, [pc, #224]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a1 	beq.w	8002128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe6:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d05c      	beq.n	80020ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d141      	bne.n	800207e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fb34 	bl	800166c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff fb30 	bl	800166c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e087      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	491b      	ldr	r1, [pc, #108]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7ff fb09 	bl	800166c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff fb05 	bl	800166c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e05c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x416>
 800207c:	e054      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff faf2 	bl	800166c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff faee 	bl	800166c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e045      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
 80020aa:	e03d      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e038      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x4ec>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d121      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fa20 	bl	800166c <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7ff fa1c 	bl	800166c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fffa 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	0800a904 	.word	0x0800a904
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b094      	sub	sp, #80	@ 0x50
 800230a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231c:	4b79      	ldr	r3, [pc, #484]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 8002328:	2b08      	cmp	r3, #8
 800232a:	f200 80e1 	bhi.w	80024f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002336:	e0db      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b73      	ldr	r3, [pc, #460]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x204>)
 800233a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800233c:	e0db      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_GetSysClockFreq+0x208>)
 8002340:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002342:	e0d8      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800234c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234e:	4b6d      	ldr	r3, [pc, #436]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002364:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236c:	633b      	str	r3, [r7, #48]	@ 0x30
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
 8002372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4621      	mov	r1, r4
 8002390:	1a51      	subs	r1, r2, r1
 8002392:	6139      	str	r1, [r7, #16]
 8002394:	4629      	mov	r1, r5
 8002396:	eb63 0301 	sbc.w	r3, r3, r1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023a8:	4659      	mov	r1, fp
 80023aa:	018b      	lsls	r3, r1, #6
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b2:	4651      	mov	r1, sl
 80023b4:	018a      	lsls	r2, r1, #6
 80023b6:	4651      	mov	r1, sl
 80023b8:	ebb2 0801 	subs.w	r8, r2, r1
 80023bc:	4659      	mov	r1, fp
 80023be:	eb63 0901 	sbc.w	r9, r3, r1
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d6:	4690      	mov	r8, r2
 80023d8:	4699      	mov	r9, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	eb18 0303 	adds.w	r3, r8, r3
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	462b      	mov	r3, r5
 80023e4:	eb49 0303 	adc.w	r3, r9, r3
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023f6:	4629      	mov	r1, r5
 80023f8:	024b      	lsls	r3, r1, #9
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002400:	4621      	mov	r1, r4
 8002402:	024a      	lsls	r2, r1, #9
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240a:	2200      	movs	r2, #0
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800240e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002414:	f7fe fc20 	bl	8000c58 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002420:	e058      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b38      	ldr	r3, [pc, #224]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	4618      	mov	r0, r3
 800242c:	4611      	mov	r1, r2
 800242e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
 8002438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	0159      	lsls	r1, r3, #5
 800244a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244e:	0150      	lsls	r0, r2, #5
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4641      	mov	r1, r8
 8002456:	ebb2 0a01 	subs.w	sl, r2, r1
 800245a:	4649      	mov	r1, r9
 800245c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800246c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002474:	ebb2 040a 	subs.w	r4, r2, sl
 8002478:	eb63 050b 	sbc.w	r5, r3, fp
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	00eb      	lsls	r3, r5, #3
 8002486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248a:	00e2      	lsls	r2, r4, #3
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
 8002490:	4643      	mov	r3, r8
 8002492:	18e3      	adds	r3, r4, r3
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	464b      	mov	r3, r9
 8002498:	eb45 0303 	adc.w	r3, r5, r3
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024aa:	4629      	mov	r1, r5
 80024ac:	028b      	lsls	r3, r1, #10
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b4:	4621      	mov	r1, r4
 80024b6:	028a      	lsls	r2, r1, #10
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	61fa      	str	r2, [r7, #28]
 80024c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c8:	f7fe fbc6 	bl	8000c58 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3750      	adds	r7, #80	@ 0x50
 80024fc:	46bd      	mov	sp, r7
 80024fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	00f42400 	.word	0x00f42400
 800250c:	007a1200 	.word	0x007a1200

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	0800a914 	.word	0x0800a914

08002550 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	220f      	movs	r2, #15
 800255e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800256c:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <HAL_RCC_GetClockConfig+0x5c>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_RCC_GetClockConfig+0x5c>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002592:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <HAL_RCC_GetClockConfig+0x60>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0207 	and.w	r2, r3, #7
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e041      	b.n	800264a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f839 	bl	8002652 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 f9b2 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d001      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e044      	b.n	800270a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1e      	ldr	r2, [pc, #120]	@ (8002718 <HAL_TIM_Base_Start_IT+0xb0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d018      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x6c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026aa:	d013      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x6c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_TIM_Base_Start_IT+0xb4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00e      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x6c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_TIM_Base_Start_IT+0xb8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x6c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <HAL_TIM_Base_Start_IT+0xbc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x6c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <HAL_TIM_Base_Start_IT+0xc0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d010      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	e007      	b.n	8002708 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800
 8002724:	40000c00 	.word	0x40000c00
 8002728:	40014000 	.word	0x40014000

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d020      	beq.n	8002790 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0202 	mvn.w	r2, #2
 8002760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8d2 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8c4 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8d5 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d020      	beq.n	80027dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0204 	mvn.w	r2, #4
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8ac 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f89e 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f8af 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d020      	beq.n	8002828 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01b      	beq.n	8002828 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0208 	mvn.w	r2, #8
 80027f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2204      	movs	r2, #4
 80027fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f886 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f878 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f889 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d020      	beq.n	8002874 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01b      	beq.n	8002874 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0210 	mvn.w	r2, #16
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2208      	movs	r2, #8
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f860 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f852 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f863 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0201 	mvn.w	r2, #1
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fce0 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f8e0 	bl	8002a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f834 	bl	8002948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0220 	mvn.w	r2, #32
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8b2 	bl	8002a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a37      	ldr	r2, [pc, #220]	@ (8002a4c <TIM_Base_SetConfig+0xf0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a34      	ldr	r2, [pc, #208]	@ (8002a50 <TIM_Base_SetConfig+0xf4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <TIM_Base_SetConfig+0xf8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a32      	ldr	r2, [pc, #200]	@ (8002a58 <TIM_Base_SetConfig+0xfc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a28      	ldr	r2, [pc, #160]	@ (8002a4c <TIM_Base_SetConfig+0xf0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01b      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b4:	d017      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a25      	ldr	r2, [pc, #148]	@ (8002a50 <TIM_Base_SetConfig+0xf4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a24      	ldr	r2, [pc, #144]	@ (8002a54 <TIM_Base_SetConfig+0xf8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <TIM_Base_SetConfig+0xfc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <TIM_Base_SetConfig+0x100>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a21      	ldr	r2, [pc, #132]	@ (8002a60 <TIM_Base_SetConfig+0x104>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a20      	ldr	r2, [pc, #128]	@ (8002a64 <TIM_Base_SetConfig+0x108>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <TIM_Base_SetConfig+0xf0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d103      	bne.n	8002a26 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800

08002a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f103 0208 	add.w	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f103 0208 	add.w	r2, r3, #8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f103 0208 	add.w	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d103      	bne.n	8002b52 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e00c      	b.n	8002b6c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3308      	adds	r3, #8
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e002      	b.n	8002b60 <vListInsert+0x2e>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d2f6      	bcs.n	8002b5a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6892      	ldr	r2, [r2, #8]
 8002bba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6852      	ldr	r2, [r2, #4]
 8002bc4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d103      	bne.n	8002bd8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	1e5a      	subs	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002c24:	f002 f8b2 	bl	8004d8c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	441a      	add	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	3b01      	subs	r3, #1
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	441a      	add	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	22ff      	movs	r2, #255	@ 0xff
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	22ff      	movs	r2, #255	@ 0xff
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d114      	bne.n	8002ca4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01a      	beq.n	8002cb8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3310      	adds	r3, #16
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f972 	bl	8003f70 <xTaskRemoveFromEventList>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <xQueueGenericReset+0xd0>)
 8002c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	e009      	b.n	8002cb8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3310      	adds	r3, #16
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fef1 	bl	8002a90 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3324      	adds	r3, #36	@ 0x24
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff feec 	bl	8002a90 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002cb8:	f002 f89a 	bl	8004df0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	@ 0x30
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	61bb      	str	r3, [r7, #24]
    }
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <xQueueGenericCreate+0x4a>
 8002d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d101      	bne.n	8002d1a <xQueueGenericCreate+0x4e>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <xQueueGenericCreate+0x50>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	617b      	str	r3, [r7, #20]
    }
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002d3e:	d90b      	bls.n	8002d58 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	613b      	str	r3, [r7, #16]
    }
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	3350      	adds	r3, #80	@ 0x50
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 f947 	bl	8004ff0 <pvPortMalloc>
 8002d62:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3350      	adds	r3, #80	@ 0x50
 8002d72:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f805 	bl	8002d90 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
    }
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3728      	adds	r7, #40	@ 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e002      	b.n	8002db2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	69b8      	ldr	r0, [r7, #24]
 8002dc2:	f7ff ff19 	bl	8002bf8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	2073      	movs	r0, #115	@ 0x73
 8002dd6:	f004 f919 	bl	800700c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b090      	sub	sp, #64	@ 0x40
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <xQueueGenericSend+0x34>
        __asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSend+0x42>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <xQueueGenericSend+0x46>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueGenericSend+0x48>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <xQueueGenericSend+0x64>
        __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x72>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <xQueueGenericSend+0x76>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueGenericSend+0x78>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <xQueueGenericSend+0x94>
        __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	623b      	str	r3, [r7, #32]
    }
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e78:	f001 fa1e 	bl	80042b8 <xTaskGetSchedulerState>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <xQueueGenericSend+0xa4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <xQueueGenericSend+0xa8>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <xQueueGenericSend+0xaa>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <xQueueGenericSend+0xc6>
        __asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	61fb      	str	r3, [r7, #28]
    }
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	e7fd      	b.n	8002ea6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002eaa:	f001 ff6f 	bl	8004d8c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <xQueueGenericSend+0xdc>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d136      	bne.n	8002f2e <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fe30 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	205a      	movs	r0, #90	@ 0x5a
 8002ed6:	f004 f90f 	bl	80070f8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ee0:	f000 fa80 	bl	80033e4 <prvCopyDataToQueue>
 8002ee4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	3324      	adds	r3, #36	@ 0x24
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 f83c 	bl	8003f70 <xTaskRemoveFromEventList>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d013      	beq.n	8002f26 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002efe:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <xQueueGenericSend+0x250>)
 8002f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	e00a      	b.n	8002f26 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002f16:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <xQueueGenericSend+0x250>)
 8002f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002f26:	f001 ff63 	bl	8004df0 <vPortExitCritical>
                return pdPASS;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07d      	b.n	800302a <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d110      	bne.n	8002f56 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f34:	f001 ff5c 	bl	8004df0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 fdf4 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	205a      	movs	r0, #90	@ 0x5a
 8002f4e:	f004 f8d3 	bl	80070f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e069      	b.n	800302a <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 f86d 	bl	8004040 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f6a:	f001 ff41 	bl	8004df0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f6e:	f000 fdaf 	bl	8003ad0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f72:	f001 ff0b 	bl	8004d8c <vPortEnterCritical>
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d103      	bne.n	8002f8c <xQueueGenericSend+0x1a8>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSend+0x1be>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa2:	f001 ff25 	bl	8004df0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fa6:	1d3a      	adds	r2, r7, #4
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 f85c 	bl	800406c <xTaskCheckForTimeOut>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d124      	bne.n	8003004 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fbc:	f000 fb0a 	bl	80035d4 <prvIsQueueFull>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d018      	beq.n	8002ff8 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	3310      	adds	r3, #16
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 ff78 	bl	8003ec4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fd6:	f000 fa95 	bl	8003504 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002fda:	f000 fd87 	bl	8003aec <xTaskResumeAll>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f47f af62 	bne.w	8002eaa <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002fe6:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <xQueueGenericSend+0x250>)
 8002fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	e758      	b.n	8002eaa <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ffa:	f000 fa83 	bl	8003504 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ffe:	f000 fd75 	bl	8003aec <xTaskResumeAll>
 8003002:	e752      	b.n	8002eaa <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003006:	f000 fa7d 	bl	8003504 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800300a:	f000 fd6f 	bl	8003aec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	4618      	mov	r0, r3
 8003012:	f004 fd89 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	460b      	mov	r3, r1
 8003020:	4601      	mov	r1, r0
 8003022:	205a      	movs	r0, #90	@ 0x5a
 8003024:	f004 f868 	bl	80070f8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003028:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800302a:	4618      	mov	r0, r3
 800302c:	3738      	adds	r7, #56	@ 0x38
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b090      	sub	sp, #64	@ 0x40
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <xQueueGenericSendFromISR+0x3e>
 800306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueGenericSendFromISR+0x42>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueGenericSendFromISR+0x44>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d103      	bne.n	80030a6 <xQueueGenericSendFromISR+0x6e>
 800309e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <xQueueGenericSendFromISR+0x72>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueGenericSendFromISR+0x74>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	623b      	str	r3, [r7, #32]
    }
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030c8:	f001 ff50 	bl	8004f6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80030cc:	f3ef 8211 	mrs	r2, BASEPRI
 80030d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	61fa      	str	r2, [r7, #28]
 80030e2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80030e4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <xQueueGenericSendFromISR+0xc2>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d149      	bne.n	800318e <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003100:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310c:	4618      	mov	r0, r3
 800310e:	f004 fd0b 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8003112:	4601      	mov	r1, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	2060      	movs	r0, #96	@ 0x60
 800311a:	f003 ff1d 	bl	8006f58 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003124:	f000 f95e 	bl	80033e4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003128:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d112      	bne.n	8003158 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d026      	beq.n	8003188 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	3324      	adds	r3, #36	@ 0x24
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ff16 	bl	8003f70 <xTaskRemoveFromEventList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01e      	beq.n	8003188 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e017      	b.n	8003188 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003158:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800315c:	2b7f      	cmp	r3, #127	@ 0x7f
 800315e:	d10b      	bne.n	8003178 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	617b      	str	r3, [r7, #20]
    }
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800317c:	3301      	adds	r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	b25a      	sxtb	r2, r3
 8003182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003188:	2301      	movs	r3, #1
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800318c:	e00b      	b.n	80031a6 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fcc9 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8003196:	4601      	mov	r1, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	2060      	movs	r0, #96	@ 0x60
 800319e:	f003 fedb 	bl	8006f58 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80031b0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3740      	adds	r7, #64	@ 0x40
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b08f      	sub	sp, #60	@ 0x3c
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <xQueueReceive+0x32>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	623b      	str	r3, [r7, #32]
    }
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <xQueueReceive+0x40>
 80031f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <xQueueReceive+0x44>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <xQueueReceive+0x46>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <xQueueReceive+0x62>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	61fb      	str	r3, [r7, #28]
    }
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321e:	f001 f84b 	bl	80042b8 <xTaskGetSchedulerState>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <xQueueReceive+0x72>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <xQueueReceive+0x76>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <xQueueReceive+0x78>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <xQueueReceive+0x94>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	61bb      	str	r3, [r7, #24]
    }
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003250:	f001 fd9c 	bl	8004d8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02f      	beq.n	80032c0 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003264:	f000 f928 	bl	80034b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	4618      	mov	r0, r3
 800326c:	f004 fc5c 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8003270:	4604      	mov	r4, r0
 8003272:	2000      	movs	r0, #0
 8003274:	f004 fc58 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2101      	movs	r1, #1
 800327e:	9100      	str	r1, [sp, #0]
 8003280:	4621      	mov	r1, r4
 8003282:	205c      	movs	r0, #92	@ 0x5c
 8003284:	f003 ff38 	bl	80070f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00f      	beq.n	80032b8 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	3310      	adds	r3, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fe67 	bl	8003f70 <xTaskRemoveFromEventList>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032a8:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <xQueueReceive+0x224>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032b8:	f001 fd9a 	bl	8004df0 <vPortExitCritical>
                return pdPASS;
 80032bc:	2301      	movs	r3, #1
 80032be:	e08a      	b.n	80033d6 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032c6:	f001 fd93 	bl	8004df0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fc2b 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 80032d2:	4604      	mov	r4, r0
 80032d4:	2000      	movs	r0, #0
 80032d6:	f004 fc27 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 80032da:	4602      	mov	r2, r0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2101      	movs	r1, #1
 80032e0:	9100      	str	r1, [sp, #0]
 80032e2:	4621      	mov	r1, r4
 80032e4:	205c      	movs	r0, #92	@ 0x5c
 80032e6:	f003 ff07 	bl	80070f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e073      	b.n	80033d6 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fea1 	bl	8004040 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032fe:	2301      	movs	r3, #1
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003302:	f001 fd75 	bl	8004df0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003306:	f000 fbe3 	bl	8003ad0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800330a:	f001 fd3f 	bl	8004d8c <vPortEnterCritical>
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003314:	b25b      	sxtb	r3, r3
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d103      	bne.n	8003324 <xQueueReceive+0x168>
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800332a:	b25b      	sxtb	r3, r3
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d103      	bne.n	800333a <xQueueReceive+0x17e>
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800333a:	f001 fd59 	bl	8004df0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800333e:	1d3a      	adds	r2, r7, #4
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fe90 	bl	800406c <xTaskCheckForTimeOut>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d124      	bne.n	800339c <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003354:	f000 f928 	bl	80035a8 <prvIsQueueEmpty>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d018      	beq.n	8003390 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	3324      	adds	r3, #36	@ 0x24
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fdac 	bl	8003ec4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800336c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800336e:	f000 f8c9 	bl	8003504 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003372:	f000 fbbb 	bl	8003aec <xTaskResumeAll>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	f47f af69 	bne.w	8003250 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800337e:	4b18      	ldr	r3, [pc, #96]	@ (80033e0 <xQueueReceive+0x224>)
 8003380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	e75f      	b.n	8003250 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003392:	f000 f8b7 	bl	8003504 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003396:	f000 fba9 	bl	8003aec <xTaskResumeAll>
 800339a:	e759      	b.n	8003250 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800339c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800339e:	f000 f8b1 	bl	8003504 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033a2:	f000 fba3 	bl	8003aec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a8:	f000 f8fe 	bl	80035a8 <prvIsQueueEmpty>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f43f af4e 	beq.w	8003250 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 fbb6 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 80033bc:	4604      	mov	r4, r0
 80033be:	2000      	movs	r0, #0
 80033c0:	f004 fbb2 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2101      	movs	r1, #1
 80033ca:	9100      	str	r1, [sp, #0]
 80033cc:	4621      	mov	r1, r4
 80033ce:	205c      	movs	r0, #92	@ 0x5c
 80033d0:	f003 fe92 	bl	80070f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80033d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3734      	adds	r7, #52	@ 0x34
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	e000ed04 	.word	0xe000ed04

080033e4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d14d      	bne.n	80034a6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ff70 	bl	80042f4 <xTaskPriorityDisinherit>
 8003414:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	e043      	b.n	80034a6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d119      	bne.n	8003458 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6858      	ldr	r0, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	461a      	mov	r2, r3
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	f005 fb33 	bl	8008a9a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	441a      	add	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	d32b      	bcc.n	80034a6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	e026      	b.n	80034a6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68d8      	ldr	r0, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	461a      	mov	r2, r3
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	f005 fb19 	bl	8008a9a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	425b      	negs	r3, r3
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d207      	bcs.n	8003494 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	425b      	negs	r3, r3
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d105      	bne.n	80034a6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80034ae:	697b      	ldr	r3, [r7, #20]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d303      	bcc.n	80034ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	461a      	mov	r2, r3
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f005 facf 	bl	8008a9a <memcpy>
    }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800350c:	f001 fc3e 	bl	8004d8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003516:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003518:	e011      	b.n	800353e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3324      	adds	r3, #36	@ 0x24
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fd22 	bl	8003f70 <xTaskRemoveFromEventList>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003532:	f000 fe03 	bl	800413c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3b01      	subs	r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	dce9      	bgt.n	800351a <prvUnlockQueue+0x16>
 8003546:	e000      	b.n	800354a <prvUnlockQueue+0x46>
                        break;
 8003548:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	22ff      	movs	r2, #255	@ 0xff
 800354e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003552:	f001 fc4d 	bl	8004df0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003556:	f001 fc19 	bl	8004d8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003560:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003562:	e011      	b.n	8003588 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3310      	adds	r3, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fcfd 	bl	8003f70 <xTaskRemoveFromEventList>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800357c:	f000 fdde 	bl	800413c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003580:	7bbb      	ldrb	r3, [r7, #14]
 8003582:	3b01      	subs	r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800358c:	2b00      	cmp	r3, #0
 800358e:	dce9      	bgt.n	8003564 <prvUnlockQueue+0x60>
 8003590:	e000      	b.n	8003594 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003592:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	22ff      	movs	r2, #255	@ 0xff
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800359c:	f001 fc28 	bl	8004df0 <vPortExitCritical>
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035b0:	f001 fbec 	bl	8004d8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e001      	b.n	80035c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035c6:	f001 fc13 	bl	8004df0 <vPortExitCritical>

    return xReturn;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035dc:	f001 fbd6 	bl	8004d8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d102      	bne.n	80035f2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e001      	b.n	80035f6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035f6:	f001 fbfb 	bl	8004df0 <vPortExitCritical>

    return xReturn;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e01e      	b.n	8003652 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003614:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <vQueueAddToRegistry+0x60>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d115      	bne.n	800364c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003620:	4910      	ldr	r1, [pc, #64]	@ (8003664 <vQueueAddToRegistry+0x60>)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800362a:	4a0e      	ldr	r2, [pc, #56]	@ (8003664 <vQueueAddToRegistry+0x60>)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	f004 fa75 	bl	8007b28 <SEGGER_SYSVIEW_ShrinkId>
 800363e:	4601      	mov	r1, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	2071      	movs	r0, #113	@ 0x71
 8003646:	f003 fc87 	bl	8006f58 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800364a:	e006      	b.n	800365a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3301      	adds	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b07      	cmp	r3, #7
 8003656:	d9dd      	bls.n	8003614 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2000024c 	.word	0x2000024c

08003668 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003678:	f001 fb88 	bl	8004d8c <vPortEnterCritical>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003682:	b25b      	sxtb	r3, r3
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d103      	bne.n	8003692 <vQueueWaitForMessageRestricted+0x2a>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003698:	b25b      	sxtb	r3, r3
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d103      	bne.n	80036a8 <vQueueWaitForMessageRestricted+0x40>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a8:	f001 fba2 	bl	8004df0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3324      	adds	r3, #36	@ 0x24
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fc27 	bl	8003f10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff1e 	bl	8003504 <prvUnlockQueue>
    }
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	@ 0x30
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fc83 	bl	8004ff0 <pvPortMalloc>
 80036ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00e      	beq.n	8003710 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036f2:	2060      	movs	r0, #96	@ 0x60
 80036f4:	f001 fc7c 	bl	8004ff0 <pvPortMalloc>
 80036f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30
 8003706:	e005      	b.n	8003714 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f001 fd53 	bl	80051b4 <vPortFree>
 800370e:	e001      	b.n	8003714 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d013      	beq.n	8003742 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	2300      	movs	r3, #0
 800371e:	9303      	str	r3, [sp, #12]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	9302      	str	r3, [sp, #8]
 8003724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f80e 	bl	8003752 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003736:	69f8      	ldr	r0, [r7, #28]
 8003738:	f000 f8a2 	bl	8003880 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e002      	b.n	8003748 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003748:	69bb      	ldr	r3, [r7, #24]
    }
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	461a      	mov	r2, r3
 800376a:	21a5      	movs	r1, #165	@ 0xa5
 800376c:	f005 f927 	bl	80089be <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800377a:	3b01      	subs	r3, #1
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f023 0307 	bic.w	r3, r3, #7
 8003788:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	617b      	str	r3, [r7, #20]
    }
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01f      	beq.n	80037f2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e012      	b.n	80037de <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	4413      	add	r3, r2
 80037be:	7819      	ldrb	r1, [r3, #0]
 80037c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	3334      	adds	r3, #52	@ 0x34
 80037c8:	460a      	mov	r2, r1
 80037ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3301      	adds	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b0e      	cmp	r3, #14
 80037e2:	d9e9      	bls.n	80037b8 <prvInitialiseNewTask+0x66>
 80037e4:	e000      	b.n	80037e8 <prvInitialiseNewTask+0x96>
            {
                break;
 80037e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f0:	e003      	b.n	80037fa <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d901      	bls.n	8003804 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003800:	2304      	movs	r3, #4
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800380e:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	2200      	movs	r2, #0
 8003814:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f958 	bl	8002ad0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	3318      	adds	r3, #24
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f953 	bl	8002ad0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	f1c3 0205 	rsb	r2, r3, #5
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003842:	3354      	adds	r3, #84	@ 0x54
 8003844:	2208      	movs	r2, #8
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f005 f8b8 	bl	80089be <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	335c      	adds	r3, #92	@ 0x5c
 8003852:	2202      	movs	r2, #2
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f005 f8b1 	bl	80089be <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	69b8      	ldr	r0, [r7, #24]
 8003862:	f001 f95f 	bl	8004b24 <pxPortInitialiseStack>
 8003866:	4602      	mov	r2, r0
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003876:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003878:	bf00      	nop
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003880:	b5b0      	push	{r4, r5, r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003888:	f001 fa80 	bl	8004d8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800388c:	4b3b      	ldr	r3, [pc, #236]	@ (800397c <prvAddNewTaskToReadyList+0xfc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a3a      	ldr	r2, [pc, #232]	@ (800397c <prvAddNewTaskToReadyList+0xfc>)
 8003894:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003896:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <prvAddNewTaskToReadyList+0x100>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800389e:	4a38      	ldr	r2, [pc, #224]	@ (8003980 <prvAddNewTaskToReadyList+0x100>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <prvAddNewTaskToReadyList+0xfc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d110      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80038ac:	f000 fc6a 	bl	8004184 <prvInitialiseTaskLists>
 80038b0:	e00d      	b.n	80038ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80038b2:	4b34      	ldr	r3, [pc, #208]	@ (8003984 <prvAddNewTaskToReadyList+0x104>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ba:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <prvAddNewTaskToReadyList+0x100>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d802      	bhi.n	80038ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80038c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003980 <prvAddNewTaskToReadyList+0x100>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80038ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <prvAddNewTaskToReadyList+0x108>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003988 <prvAddNewTaskToReadyList+0x108>)
 80038d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <prvAddNewTaskToReadyList+0x108>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <prvAddNewTaskToReadyList+0x94>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 fff7 	bl	80078dc <SEGGER_SYSVIEW_OnTaskCreate>
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	461d      	mov	r5, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461c      	mov	r4, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	1ae3      	subs	r3, r4, r3
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	462b      	mov	r3, r5
 8003910:	f001 fe20 	bl	8005554 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 f864 	bl	80079e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <prvAddNewTaskToReadyList+0x10c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	4a18      	ldr	r2, [pc, #96]	@ (800398c <prvAddNewTaskToReadyList+0x10c>)
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <prvAddNewTaskToReadyList+0x110>)
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7ff f8d0 	bl	8002aea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800394a:	f001 fa51 	bl	8004df0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800394e:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <prvAddNewTaskToReadyList+0x104>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003956:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <prvAddNewTaskToReadyList+0x100>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <prvAddNewTaskToReadyList+0x114>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bdb0      	pop	{r4, r5, r7, pc}
 800397c:	20000364 	.word	0x20000364
 8003980:	2000028c 	.word	0x2000028c
 8003984:	20000370 	.word	0x20000370
 8003988:	20000380 	.word	0x20000380
 800398c:	2000036c 	.word	0x2000036c
 8003990:	20000290 	.word	0x20000290
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01c      	beq.n	80039e4 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80039aa:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <vTaskDelay+0x6c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <vTaskDelay+0x32>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60bb      	str	r3, [r7, #8]
    }
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80039ca:	f000 f881 	bl	8003ad0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	2023      	movs	r0, #35	@ 0x23
 80039d2:	f003 fa85 	bl	8006ee0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039d6:	2100      	movs	r1, #0
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fd0d 	bl	80043f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80039de:	f000 f885 	bl	8003aec <xTaskResumeAll>
 80039e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 80039ea:	4b07      	ldr	r3, [pc, #28]	@ (8003a08 <vTaskDelay+0x70>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000038c 	.word	0x2000038c
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003a12:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <vTaskStartScheduler+0xa4>)
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2282      	movs	r2, #130	@ 0x82
 8003a1e:	4925      	ldr	r1, [pc, #148]	@ (8003ab4 <vTaskStartScheduler+0xa8>)
 8003a20:	4825      	ldr	r0, [pc, #148]	@ (8003ab8 <vTaskStartScheduler+0xac>)
 8003a22:	f7ff fe55 	bl	80036d0 <xTaskCreate>
 8003a26:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003a2e:	f000 fd5b 	bl	80044e8 <xTimerCreateTimerTask>
 8003a32:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d124      	bne.n	8003a84 <vTaskStartScheduler+0x78>
        __asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60bb      	str	r3, [r7, #8]
    }
 8003a4c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <vTaskStartScheduler+0xb0>)
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <vTaskStartScheduler+0xb4>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <vTaskStartScheduler+0xb8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003a62:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <vTaskStartScheduler+0xbc>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <vTaskStartScheduler+0xa4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d102      	bne.n	8003a74 <vTaskStartScheduler+0x68>
 8003a6e:	f003 ff19 	bl	80078a4 <SEGGER_SYSVIEW_OnIdle>
 8003a72:	e004      	b.n	8003a7e <vTaskStartScheduler+0x72>
 8003a74:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <vTaskStartScheduler+0xbc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 ff71 	bl	8007960 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003a7e:	f001 f8e1 	bl	8004c44 <xPortStartScheduler>
 8003a82:	e00f      	b.n	8003aa4 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d10b      	bne.n	8003aa4 <vTaskStartScheduler+0x98>
        __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	607b      	str	r3, [r7, #4]
    }
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <vTaskStartScheduler+0xc0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000388 	.word	0x20000388
 8003ab4:	0800a814 	.word	0x0800a814
 8003ab8:	08004155 	.word	0x08004155
 8003abc:	20000384 	.word	0x20000384
 8003ac0:	20000370 	.word	0x20000370
 8003ac4:	20000368 	.word	0x20000368
 8003ac8:	2000028c 	.word	0x2000028c
 8003acc:	0800a91c 	.word	0x0800a91c

08003ad0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ad4:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <vTaskSuspendAll+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a03      	ldr	r2, [pc, #12]	@ (8003ae8 <vTaskSuspendAll+0x18>)
 8003adc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	2000038c 	.word	0x2000038c

08003aec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <xTaskResumeAll+0x120>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <xTaskResumeAll+0x2e>
        __asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	603b      	str	r3, [r7, #0]
    }
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003b1a:	f001 f937 	bl	8004d8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <xTaskResumeAll+0x120>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	4a39      	ldr	r2, [pc, #228]	@ (8003c0c <xTaskResumeAll+0x120>)
 8003b26:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b28:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <xTaskResumeAll+0x120>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d165      	bne.n	8003bfc <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b30:	4b37      	ldr	r3, [pc, #220]	@ (8003c10 <xTaskResumeAll+0x124>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d061      	beq.n	8003bfc <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b38:	e032      	b.n	8003ba0 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3a:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <xTaskResumeAll+0x128>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3318      	adds	r3, #24
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f82c 	bl	8002ba4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff f827 	bl	8002ba4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 ff43 	bl	80079e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	2201      	movs	r2, #1
 8003b64:	409a      	lsls	r2, r3
 8003b66:	4b2c      	ldr	r3, [pc, #176]	@ (8003c18 <xTaskResumeAll+0x12c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c18 <xTaskResumeAll+0x12c>)
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4a27      	ldr	r2, [pc, #156]	@ (8003c1c <xTaskResumeAll+0x130>)
 8003b7e:	441a      	add	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f7fe ffaf 	bl	8002aea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b90:	4b23      	ldr	r3, [pc, #140]	@ (8003c20 <xTaskResumeAll+0x134>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003b9a:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <xTaskResumeAll+0x138>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <xTaskResumeAll+0x128>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1c8      	bne.n	8003b3a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003bae:	f000 fb67 	bl	8004280 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <xTaskResumeAll+0x13c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003bbe:	f000 f859 	bl	8003c74 <xTaskIncrementTick>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003bc8:	4b16      	ldr	r3, [pc, #88]	@ (8003c24 <xTaskResumeAll+0x138>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f1      	bne.n	8003bbe <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003bda:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <xTaskResumeAll+0x13c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003be0:	4b10      	ldr	r3, [pc, #64]	@ (8003c24 <xTaskResumeAll+0x138>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003be8:	2301      	movs	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <xTaskResumeAll+0x140>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003bfc:	f001 f8f8 	bl	8004df0 <vPortExitCritical>

    return xAlreadyYielded;
 8003c00:	68bb      	ldr	r3, [r7, #8]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	2000038c 	.word	0x2000038c
 8003c10:	20000364 	.word	0x20000364
 8003c14:	20000324 	.word	0x20000324
 8003c18:	2000036c 	.word	0x2000036c
 8003c1c:	20000290 	.word	0x20000290
 8003c20:	2000028c 	.word	0x2000028c
 8003c24:	20000378 	.word	0x20000378
 8003c28:	20000374 	.word	0x20000374
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c36:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <xTaskGetTickCount+0x1c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000368 	.word	0x20000368

08003c50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c56:	f001 f989 	bl	8004f6c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003c5e:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <xTaskGetTickCountFromISR+0x20>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003c64:	683b      	ldr	r3, [r7, #0]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000368 	.word	0x20000368

08003c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7e:	4b51      	ldr	r3, [pc, #324]	@ (8003dc4 <xTaskIncrementTick+0x150>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 8093 	bne.w	8003dae <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c88:	4b4f      	ldr	r3, [pc, #316]	@ (8003dc8 <xTaskIncrementTick+0x154>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c90:	4a4d      	ldr	r2, [pc, #308]	@ (8003dc8 <xTaskIncrementTick+0x154>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d121      	bne.n	8003ce0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <xTaskIncrementTick+0x158>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <xTaskIncrementTick+0x4a>
        __asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	603b      	str	r3, [r7, #0]
    }
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	e7fd      	b.n	8003cba <xTaskIncrementTick+0x46>
 8003cbe:	4b43      	ldr	r3, [pc, #268]	@ (8003dcc <xTaskIncrementTick+0x158>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	4b42      	ldr	r3, [pc, #264]	@ (8003dd0 <xTaskIncrementTick+0x15c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a40      	ldr	r2, [pc, #256]	@ (8003dcc <xTaskIncrementTick+0x158>)
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4a40      	ldr	r2, [pc, #256]	@ (8003dd0 <xTaskIncrementTick+0x15c>)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <xTaskIncrementTick+0x160>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8003dd4 <xTaskIncrementTick+0x160>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	f000 fad0 	bl	8004280 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd8 <xTaskIncrementTick+0x164>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d34c      	bcc.n	8003d84 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cea:	4b38      	ldr	r3, [pc, #224]	@ (8003dcc <xTaskIncrementTick+0x158>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf4:	4b38      	ldr	r3, [pc, #224]	@ (8003dd8 <xTaskIncrementTick+0x164>)
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	601a      	str	r2, [r3, #0]
                    break;
 8003cfc:	e042      	b.n	8003d84 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cfe:	4b33      	ldr	r3, [pc, #204]	@ (8003dcc <xTaskIncrementTick+0x158>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d203      	bcs.n	8003d1e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d16:	4a30      	ldr	r2, [pc, #192]	@ (8003dd8 <xTaskIncrementTick+0x164>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d1c:	e032      	b.n	8003d84 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe ff3e 	bl	8002ba4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3318      	adds	r3, #24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe ff35 	bl	8002ba4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 fe51 	bl	80079e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	2201      	movs	r2, #1
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <xTaskIncrementTick+0x168>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	4a22      	ldr	r2, [pc, #136]	@ (8003ddc <xTaskIncrementTick+0x168>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4a1f      	ldr	r2, [pc, #124]	@ (8003de0 <xTaskIncrementTick+0x16c>)
 8003d62:	441a      	add	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7fe febd 	bl	8002aea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d74:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <xTaskIncrementTick+0x170>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3b5      	bcc.n	8003cea <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d82:	e7b2      	b.n	8003cea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d84:	4b17      	ldr	r3, [pc, #92]	@ (8003de4 <xTaskIncrementTick+0x170>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8a:	4915      	ldr	r1, [pc, #84]	@ (8003de0 <xTaskIncrementTick+0x16c>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d901      	bls.n	8003da0 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003da0:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <xTaskIncrementTick+0x174>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e004      	b.n	8003db8 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003dae:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <xTaskIncrementTick+0x178>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <xTaskIncrementTick+0x178>)
 8003db6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003db8:	697b      	ldr	r3, [r7, #20]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000038c 	.word	0x2000038c
 8003dc8:	20000368 	.word	0x20000368
 8003dcc:	2000031c 	.word	0x2000031c
 8003dd0:	20000320 	.word	0x20000320
 8003dd4:	2000037c 	.word	0x2000037c
 8003dd8:	20000384 	.word	0x20000384
 8003ddc:	2000036c 	.word	0x2000036c
 8003de0:	20000290 	.word	0x20000290
 8003de4:	2000028c 	.word	0x2000028c
 8003de8:	20000378 	.word	0x20000378
 8003dec:	20000374 	.word	0x20000374

08003df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003df6:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <vTaskSwitchContext+0xbc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb0 <vTaskSwitchContext+0xc0>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003e04:	e04e      	b.n	8003ea4 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003e06:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <vTaskSwitchContext+0xc0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <vTaskSwitchContext+0xc4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003e1a:	7afb      	ldrb	r3, [r7, #11]
 8003e1c:	f1c3 031f 	rsb	r3, r3, #31
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	4925      	ldr	r1, [pc, #148]	@ (8003eb8 <vTaskSwitchContext+0xc8>)
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	607b      	str	r3, [r7, #4]
    }
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <vTaskSwitchContext+0x5a>
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <vTaskSwitchContext+0xc8>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d104      	bne.n	8003e7e <vTaskSwitchContext+0x8e>
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <vTaskSwitchContext+0xcc>)
 8003e86:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <vTaskSwitchContext+0xcc>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <vTaskSwitchContext+0xd0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d102      	bne.n	8003e9a <vTaskSwitchContext+0xaa>
 8003e94:	f003 fd06 	bl	80078a4 <SEGGER_SYSVIEW_OnIdle>
}
 8003e98:	e004      	b.n	8003ea4 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003e9a:	4b08      	ldr	r3, [pc, #32]	@ (8003ebc <vTaskSwitchContext+0xcc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 fd5e 	bl	8007960 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	2000038c 	.word	0x2000038c
 8003eb0:	20000378 	.word	0x20000378
 8003eb4:	2000036c 	.word	0x2000036c
 8003eb8:	20000290 	.word	0x20000290
 8003ebc:	2000028c 	.word	0x2000028c
 8003ec0:	20000388 	.word	0x20000388

08003ec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
    }
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eec:	4b07      	ldr	r3, [pc, #28]	@ (8003f0c <vTaskPlaceOnEventList+0x48>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3318      	adds	r3, #24
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fe fe1c 	bl	8002b32 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003efa:	2101      	movs	r1, #1
 8003efc:	6838      	ldr	r0, [r7, #0]
 8003efe:	f000 fa7b 	bl	80043f8 <prvAddCurrentTaskToDelayedList>
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000028c 	.word	0x2000028c

08003f10 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	617b      	str	r3, [r7, #20]
    }
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	e7fd      	b.n	8003f36 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <vTaskPlaceOnEventListRestricted+0x5c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7fe fdd1 	bl	8002aea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003f54:	2024      	movs	r0, #36	@ 0x24
 8003f56:	f002 ffa5 	bl	8006ea4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f000 fa4b 	bl	80043f8 <prvAddCurrentTaskToDelayedList>
    }
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000028c 	.word	0x2000028c

08003f70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60fb      	str	r3, [r7, #12]
    }
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fdfe 	bl	8002ba4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <xTaskRemoveFromEventList+0xb8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d120      	bne.n	8003ff2 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe fdf5 	bl	8002ba4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 fd11 	bl	80079e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	4b18      	ldr	r3, [pc, #96]	@ (800402c <xTaskRemoveFromEventList+0xbc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	4a16      	ldr	r2, [pc, #88]	@ (800402c <xTaskRemoveFromEventList+0xbc>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4a13      	ldr	r2, [pc, #76]	@ (8004030 <xTaskRemoveFromEventList+0xc0>)
 8003fe2:	441a      	add	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fe fd7d 	bl	8002aea <vListInsertEnd>
 8003ff0:	e005      	b.n	8003ffe <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	480e      	ldr	r0, [pc, #56]	@ (8004034 <xTaskRemoveFromEventList+0xc4>)
 8003ffa:	f7fe fd76 	bl	8002aea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004002:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <xTaskRemoveFromEventList+0xc8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	429a      	cmp	r2, r3
 800400a:	d905      	bls.n	8004018 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004010:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <xTaskRemoveFromEventList+0xcc>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e001      	b.n	800401c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800401c:	697b      	ldr	r3, [r7, #20]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	2000038c 	.word	0x2000038c
 800402c:	2000036c 	.word	0x2000036c
 8004030:	20000290 	.word	0x20000290
 8004034:	20000324 	.word	0x20000324
 8004038:	2000028c 	.word	0x2000028c
 800403c:	20000378 	.word	0x20000378

08004040 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004048:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <vTaskInternalSetTimeOutState+0x24>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <vTaskInternalSetTimeOutState+0x28>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	605a      	str	r2, [r3, #4]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	2000037c 	.word	0x2000037c
 8004068:	20000368 	.word	0x20000368

0800406c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	613b      	str	r3, [r7, #16]
    }
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60fb      	str	r3, [r7, #12]
    }
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80040b2:	f000 fe6b 	bl	8004d8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80040b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <xTaskCheckForTimeOut+0xc8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d102      	bne.n	80040d6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e026      	b.n	8004124 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <xTaskCheckForTimeOut+0xcc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d00a      	beq.n	80040f8 <xTaskCheckForTimeOut+0x8c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d305      	bcc.n	80040f8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e015      	b.n	8004124 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d20b      	bcs.n	800411a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	1ad2      	subs	r2, r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff96 	bl	8004040 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	e004      	b.n	8004124 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004124:	f000 fe64 	bl	8004df0 <vPortExitCritical>

    return xReturn;
 8004128:	69fb      	ldr	r3, [r7, #28]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000368 	.word	0x20000368
 8004138:	2000037c 	.word	0x2000037c

0800413c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <vTaskMissedYield+0x14>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000378 	.word	0x20000378

08004154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800415c:	f000 f852 	bl	8004204 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <prvIdleTask+0x28>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d9f9      	bls.n	800415c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <prvIdleTask+0x2c>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004178:	e7f0      	b.n	800415c <prvIdleTask+0x8>
 800417a:	bf00      	nop
 800417c:	20000290 	.word	0x20000290
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	e00c      	b.n	80041aa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <prvInitialiseTaskLists+0x60>)
 800419c:	4413      	add	r3, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc76 	bl	8002a90 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3301      	adds	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d9ef      	bls.n	8004190 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80041b0:	480d      	ldr	r0, [pc, #52]	@ (80041e8 <prvInitialiseTaskLists+0x64>)
 80041b2:	f7fe fc6d 	bl	8002a90 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80041b6:	480d      	ldr	r0, [pc, #52]	@ (80041ec <prvInitialiseTaskLists+0x68>)
 80041b8:	f7fe fc6a 	bl	8002a90 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80041bc:	480c      	ldr	r0, [pc, #48]	@ (80041f0 <prvInitialiseTaskLists+0x6c>)
 80041be:	f7fe fc67 	bl	8002a90 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80041c2:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <prvInitialiseTaskLists+0x70>)
 80041c4:	f7fe fc64 	bl	8002a90 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80041c8:	480b      	ldr	r0, [pc, #44]	@ (80041f8 <prvInitialiseTaskLists+0x74>)
 80041ca:	f7fe fc61 	bl	8002a90 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <prvInitialiseTaskLists+0x78>)
 80041d0:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <prvInitialiseTaskLists+0x64>)
 80041d2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <prvInitialiseTaskLists+0x7c>)
 80041d6:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <prvInitialiseTaskLists+0x68>)
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000290 	.word	0x20000290
 80041e8:	200002f4 	.word	0x200002f4
 80041ec:	20000308 	.word	0x20000308
 80041f0:	20000324 	.word	0x20000324
 80041f4:	20000338 	.word	0x20000338
 80041f8:	20000350 	.word	0x20000350
 80041fc:	2000031c 	.word	0x2000031c
 8004200:	20000320 	.word	0x20000320

08004204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800420a:	e019      	b.n	8004240 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800420c:	f000 fdbe 	bl	8004d8c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <prvCheckTasksWaitingTermination+0x50>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fcc1 	bl	8002ba4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <prvCheckTasksWaitingTermination+0x54>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3b01      	subs	r3, #1
 8004228:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <prvCheckTasksWaitingTermination+0x54>)
 800422a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <prvCheckTasksWaitingTermination+0x58>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	4a0a      	ldr	r2, [pc, #40]	@ (800425c <prvCheckTasksWaitingTermination+0x58>)
 8004234:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004236:	f000 fddb 	bl	8004df0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f810 	bl	8004260 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <prvCheckTasksWaitingTermination+0x58>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e1      	bne.n	800420c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000338 	.word	0x20000338
 8004258:	20000364 	.word	0x20000364
 800425c:	2000034c 	.word	0x2000034c

08004260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ffa1 	bl	80051b4 <vPortFree>
                vPortFree( pxTCB );
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 ff9e 	bl	80051b4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004284:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <prvResetNextTaskUnblockTime+0x30>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <prvResetNextTaskUnblockTime+0x34>)
 8004290:	f04f 32ff 	mov.w	r2, #4294967295
 8004294:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004296:	e005      	b.n	80042a4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <prvResetNextTaskUnblockTime+0x30>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a04      	ldr	r2, [pc, #16]	@ (80042b4 <prvResetNextTaskUnblockTime+0x34>)
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000031c 	.word	0x2000031c
 80042b4:	20000384 	.word	0x20000384

080042b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <xTaskGetSchedulerState+0x34>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80042c6:	2301      	movs	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	e008      	b.n	80042de <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <xTaskGetSchedulerState+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80042d4:	2302      	movs	r3, #2
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e001      	b.n	80042de <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80042de:	687b      	ldr	r3, [r7, #4]
    }
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000370 	.word	0x20000370
 80042f0:	2000038c 	.word	0x2000038c

080042f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d06a      	beq.n	80043e0 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800430a:	4b38      	ldr	r3, [pc, #224]	@ (80043ec <xTaskPriorityDisinherit+0xf8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	d00b      	beq.n	800432c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
    }
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60bb      	str	r3, [r7, #8]
    }
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435e:	429a      	cmp	r2, r3
 8004360:	d03e      	beq.n	80043e0 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d13a      	bne.n	80043e0 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fc18 	bl	8002ba4 <uxListRemove>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	2201      	movs	r2, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43da      	mvns	r2, r3
 8004386:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <xTaskPriorityDisinherit+0xfc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4013      	ands	r3, r2
 800438c:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <xTaskPriorityDisinherit+0xfc>)
 800438e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	204a      	movs	r0, #74	@ 0x4a
 8004396:	f002 fda3 	bl	8006ee0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	f1c3 0205 	rsb	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	2201      	movs	r2, #1
 80043b4:	409a      	lsls	r2, r3
 80043b6:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <xTaskPriorityDisinherit+0xfc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	4a0c      	ldr	r2, [pc, #48]	@ (80043f0 <xTaskPriorityDisinherit+0xfc>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <xTaskPriorityDisinherit+0x100>)
 80043ce:	441a      	add	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7fe fb87 	bl	8002aea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043e0:	697b      	ldr	r3, [r7, #20]
    }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	2000028c 	.word	0x2000028c
 80043f0:	2000036c 	.word	0x2000036c
 80043f4:	20000290 	.word	0x20000290

080043f8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004402:	4b32      	ldr	r3, [pc, #200]	@ (80044cc <prvAddCurrentTaskToDelayedList+0xd4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004408:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3304      	adds	r3, #4
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fbc8 	bl	8002ba4 <uxListRemove>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800441a:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	2201      	movs	r2, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	4b2a      	ldr	r3, [pc, #168]	@ (80044d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4013      	ands	r3, r2
 800442e:	4a29      	ldr	r2, [pc, #164]	@ (80044d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004430:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d110      	bne.n	800445c <prvAddCurrentTaskToDelayedList+0x64>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004440:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	211b      	movs	r1, #27
 8004446:	4618      	mov	r0, r3
 8004448:	f003 fb0e 	bl	8007a68 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800444c:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4820      	ldr	r0, [pc, #128]	@ (80044d8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004456:	f7fe fb48 	bl	8002aea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800445a:	e032      	b.n	80044c2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004464:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d20f      	bcs.n	8004494 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004474:	4b16      	ldr	r3, [pc, #88]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2104      	movs	r1, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f003 faf4 	bl	8007a68 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004480:	4b16      	ldr	r3, [pc, #88]	@ (80044dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe fb50 	bl	8002b32 <vListInsert>
}
 8004492:	e016      	b.n	80044c2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004494:	4b0e      	ldr	r3, [pc, #56]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2104      	movs	r1, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f003 fae4 	bl	8007a68 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7fe fb40 	bl	8002b32 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80044b2:	4b0c      	ldr	r3, [pc, #48]	@ (80044e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d202      	bcs.n	80044c2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80044bc:	4a09      	ldr	r2, [pc, #36]	@ (80044e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6013      	str	r3, [r2, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000368 	.word	0x20000368
 80044d0:	2000028c 	.word	0x2000028c
 80044d4:	2000036c 	.word	0x2000036c
 80044d8:	20000350 	.word	0x20000350
 80044dc:	20000320 	.word	0x20000320
 80044e0:	2000031c 	.word	0x2000031c
 80044e4:	20000384 	.word	0x20000384

080044e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044f2:	f000 fae1 	bl	8004ab8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80044f6:	4b12      	ldr	r3, [pc, #72]	@ (8004540 <xTimerCreateTimerTask+0x58>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80044fe:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <xTimerCreateTimerTask+0x5c>)
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2302      	movs	r3, #2
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800450c:	490e      	ldr	r1, [pc, #56]	@ (8004548 <xTimerCreateTimerTask+0x60>)
 800450e:	480f      	ldr	r0, [pc, #60]	@ (800454c <xTimerCreateTimerTask+0x64>)
 8004510:	f7ff f8de 	bl	80036d0 <xTaskCreate>
 8004514:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	603b      	str	r3, [r7, #0]
    }
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004534:	687b      	ldr	r3, [r7, #4]
    }
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200003c0 	.word	0x200003c0
 8004544:	200003c4 	.word	0x200003c4
 8004548:	0800a830 	.word	0x0800a830
 800454c:	08004689 	.word	0x08004689

08004550 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	@ 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <xTimerGenericCommand+0x30>
        __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	623b      	str	r3, [r7, #32]
    }
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004580:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <xTimerGenericCommand+0x98>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02a      	beq.n	80045de <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	dc18      	bgt.n	80045cc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800459a:	f7ff fe8d 	bl	80042b8 <xTaskGetSchedulerState>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d109      	bne.n	80045b8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045a4:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <xTimerGenericCommand+0x98>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	f107 0114 	add.w	r1, r7, #20
 80045ac:	2300      	movs	r3, #0
 80045ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b0:	f7fe fc18 	bl	8002de4 <xQueueGenericSend>
 80045b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80045b6:	e012      	b.n	80045de <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045b8:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <xTimerGenericCommand+0x98>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	f107 0114 	add.w	r1, r7, #20
 80045c0:	2300      	movs	r3, #0
 80045c2:	2200      	movs	r2, #0
 80045c4:	f7fe fc0e 	bl	8002de4 <xQueueGenericSend>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80045ca:	e008      	b.n	80045de <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <xTimerGenericCommand+0x98>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	f107 0114 	add.w	r1, r7, #20
 80045d4:	2300      	movs	r3, #0
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	f7fe fd2e 	bl	8003038 <xQueueGenericSendFromISR>
 80045dc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	@ 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200003c0 	.word	0x200003c0

080045ec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f6:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <prvProcessExpiredTimer+0x98>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe facd 	bl	8002ba4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d023      	beq.n	8004660 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	18d1      	adds	r1, r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f000 f8d5 	bl	80047d4 <prvInsertTimerInActiveList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004630:	2300      	movs	r3, #0
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	2100      	movs	r1, #0
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff88 	bl	8004550 <xTimerGenericCommand>
 8004640:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d114      	bne.n	8004672 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60fb      	str	r3, [r7, #12]
    }
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	6978      	ldr	r0, [r7, #20]
 8004678:	4798      	blx	r3
    }
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200003b8 	.word	0x200003b8

08004688 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f859 	bl	800474c <prvGetNextExpireTime>
 800469a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4619      	mov	r1, r3
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f805 	bl	80046b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80046a6:	f000 f8d7 	bl	8004858 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046aa:	bf00      	nop
 80046ac:	e7f0      	b.n	8004690 <prvTimerTask+0x8>
	...

080046b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80046ba:	f7ff fa09 	bl	8003ad0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f866 	bl	8004794 <prvSampleTimeNow>
 80046c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d130      	bne.n	8004732 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <prvProcessTimerOrBlockTask+0x3c>
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d806      	bhi.n	80046ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80046de:	f7ff fa05 	bl	8003aec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff81 	bl	80045ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80046ea:	e024      	b.n	8004736 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046f2:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <prvProcessTimerOrBlockTask+0x90>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <prvProcessTimerOrBlockTask+0x50>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <prvProcessTimerOrBlockTask+0x52>
 8004700:	2300      	movs	r3, #0
 8004702:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004704:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <prvProcessTimerOrBlockTask+0x94>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f7fe ffa9 	bl	8003668 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004716:	f7ff f9e9 	bl	8003aec <xTaskResumeAll>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <prvProcessTimerOrBlockTask+0x98>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
    }
 8004730:	e001      	b.n	8004736 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004732:	f7ff f9db 	bl	8003aec <xTaskResumeAll>
    }
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200003bc 	.word	0x200003bc
 8004744:	200003c0 	.word	0x200003c0
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004754:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <prvGetNextExpireTime+0x44>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <prvGetNextExpireTime+0x16>
 800475e:	2201      	movs	r2, #1
 8004760:	e000      	b.n	8004764 <prvGetNextExpireTime+0x18>
 8004762:	2200      	movs	r2, #0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <prvGetNextExpireTime+0x44>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e001      	b.n	8004780 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004780:	68fb      	ldr	r3, [r7, #12]
    }
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	200003b8 	.word	0x200003b8

08004794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800479c:	f7ff fa48 	bl	8003c30 <xTaskGetTickCount>
 80047a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <prvSampleTimeNow+0x3c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d205      	bcs.n	80047b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80047ac:	f000 f91e 	bl	80049ec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e002      	b.n	80047be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80047be:	4a04      	ldr	r2, [pc, #16]	@ (80047d0 <prvSampleTimeNow+0x3c>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80047c4:	68fb      	ldr	r3, [r7, #12]
    }
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200003c8 	.word	0x200003c8

080047d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d812      	bhi.n	8004820 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e01b      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <prvInsertTimerInActiveList+0x7c>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7fe f98a 	bl	8002b32 <vListInsert>
 800481e:	e012      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d206      	bcs.n	8004836 <prvInsertTimerInActiveList+0x62>
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e007      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004836:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <prvInsertTimerInActiveList+0x80>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fe f976 	bl	8002b32 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004846:	697b      	ldr	r3, [r7, #20]
    }
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	200003bc 	.word	0x200003bc
 8004854:	200003b8 	.word	0x200003b8

08004858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	@ 0x30
 800485c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800485e:	e0b2      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f2c0 80af 	blt.w	80049c6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe f993 	bl	8002ba4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff87 	bl	8004794 <prvSampleTimeNow>
 8004886:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b09      	cmp	r3, #9
 800488c:	f200 8098 	bhi.w	80049c0 <prvProcessReceivedCommands+0x168>
 8004890:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <prvProcessReceivedCommands+0x40>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c1 	.word	0x080048c1
 80048a4:	08004937 	.word	0x08004937
 80048a8:	0800494b 	.word	0x0800494b
 80048ac:	08004997 	.word	0x08004997
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c1 	.word	0x080048c1
 80048b8:	08004937 	.word	0x08004937
 80048bc:	0800494b 	.word	0x0800494b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	18d1      	adds	r1, r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048e0:	f7ff ff78 	bl	80047d4 <prvInsertTimerInActiveList>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048f0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d061      	beq.n	80049c4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	441a      	add	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2300      	movs	r3, #0
 800490e:	2100      	movs	r1, #0
 8004910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004912:	f7ff fe1d 	bl	8004550 <xTimerGenericCommand>
 8004916:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d152      	bne.n	80049c4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61bb      	str	r3, [r7, #24]
    }
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004948:	e03d      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	617b      	str	r3, [r7, #20]
    }
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	e7fd      	b.n	800497e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	18d1      	adds	r1, r2, r3
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004990:	f7ff ff20 	bl	80047d4 <prvInsertTimerInActiveList>
                        break;
 8004994:	e017      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80049a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049a6:	f000 fc05 	bl	80051b4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80049aa:	e00c      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80049be:	e002      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
                        break;
 80049c4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049c6:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <prvProcessReceivedCommands+0x190>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f107 0108 	add.w	r1, r7, #8
 80049ce:	2200      	movs	r2, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fbf3 	bl	80031bc <xQueueReceive>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af41 	bne.w	8004860 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	3728      	adds	r7, #40	@ 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	200003c0 	.word	0x200003c0

080049ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f2:	e049      	b.n	8004a88 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fe:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe f8c9 	bl	8002ba4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d02f      	beq.n	8004a88 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90e      	bls.n	8004a58 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe f86e 	bl	8002b32 <vListInsert>
 8004a56:	e017      	b.n	8004a88 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	2100      	movs	r1, #0
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fd74 	bl	8004550 <xTimerGenericCommand>
 8004a68:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	603b      	str	r3, [r7, #0]
    }
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1b0      	bne.n	80049f4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a98:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <prvSwitchTimerLists+0xc8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004aa0:	4a04      	ldr	r2, [pc, #16]	@ (8004ab4 <prvSwitchTimerLists+0xc8>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6013      	str	r3, [r2, #0]
    }
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200003b8 	.word	0x200003b8
 8004ab4:	200003bc 	.word	0x200003bc

08004ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004abc:	f000 f966 	bl	8004d8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ac0:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11d      	bne.n	8004b04 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004ac8:	4811      	ldr	r0, [pc, #68]	@ (8004b10 <prvCheckForValidListAndQueue+0x58>)
 8004aca:	f7fd ffe1 	bl	8002a90 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004ace:	4811      	ldr	r0, [pc, #68]	@ (8004b14 <prvCheckForValidListAndQueue+0x5c>)
 8004ad0:	f7fd ffde 	bl	8002a90 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ad4:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8004b10 <prvCheckForValidListAndQueue+0x58>)
 8004ad8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004adc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b14 <prvCheckForValidListAndQueue+0x5c>)
 8004ade:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	210c      	movs	r1, #12
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fe f8f1 	bl	8002ccc <xQueueGenericCreate>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a07      	ldr	r2, [pc, #28]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004aee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004af8:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4908      	ldr	r1, [pc, #32]	@ (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fd80 	bl	8003604 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b04:	f000 f974 	bl	8004df0 <vPortExitCritical>
    }
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	200003c0 	.word	0x200003c0
 8004b10:	20000390 	.word	0x20000390
 8004b14:	200003a4 	.word	0x200003a4
 8004b18:	200003b8 	.word	0x200003b8
 8004b1c:	200003bc 	.word	0x200003bc
 8004b20:	0800a838 	.word	0x0800a838

08004b24 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b04      	subs	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b54:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <pxPortInitialiseStack+0x64>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b14      	subs	r3, #20
 8004b5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f06f 0202 	mvn.w	r2, #2
 8004b72:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b20      	subs	r3, #32
 8004b78:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	08004b8d 	.word	0x08004b8d

08004b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b96:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <prvTaskExitError+0x58>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d00b      	beq.n	8004bb8 <prvTaskExitError+0x2c>
        __asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60fb      	str	r3, [r7, #12]
    }
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <prvTaskExitError+0x28>
        __asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60bb      	str	r3, [r7, #8]
    }
 8004bca:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bcc:	bf00      	nop
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0fc      	beq.n	8004bce <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	2000000c 	.word	0x2000000c
	...

08004bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <pxCurrentTCBConst2>)
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	f380 8809 	msr	PSP, r0
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8811 	msr	BASEPRI, r0
 8004c0a:	4770      	bx	lr
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst2>:
 8004c10:	2000028c 	.word	0x2000028c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c18:	4808      	ldr	r0, [pc, #32]	@ (8004c3c <prvPortStartFirstTask+0x24>)
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	f380 8808 	msr	MSP, r0
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8814 	msr	CONTROL, r0
 8004c2a:	b662      	cpsie	i
 8004c2c:	b661      	cpsie	f
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	df00      	svc	0
 8004c38:	bf00      	nop
 8004c3a:	0000      	.short	0x0000
 8004c3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop

08004c44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c4a:	4b47      	ldr	r3, [pc, #284]	@ (8004d68 <xPortStartScheduler+0x124>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a47      	ldr	r2, [pc, #284]	@ (8004d6c <xPortStartScheduler+0x128>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10b      	bne.n	8004c6c <xPortStartScheduler+0x28>
        __asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60fb      	str	r3, [r7, #12]
    }
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d68 <xPortStartScheduler+0x124>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3f      	ldr	r2, [pc, #252]	@ (8004d70 <xPortStartScheduler+0x12c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10b      	bne.n	8004c8e <xPortStartScheduler+0x4a>
        __asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	613b      	str	r3, [r7, #16]
    }
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c8e:	4b39      	ldr	r3, [pc, #228]	@ (8004d74 <xPortStartScheduler+0x130>)
 8004c90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	22ff      	movs	r2, #255	@ 0xff
 8004c9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b31      	ldr	r3, [pc, #196]	@ (8004d78 <xPortStartScheduler+0x134>)
 8004cb4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cb6:	4b31      	ldr	r3, [pc, #196]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004cb8:	2207      	movs	r2, #7
 8004cba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cbc:	e009      	b.n	8004cd2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004cc6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b80      	cmp	r3, #128	@ 0x80
 8004cdc:	d0ef      	beq.n	8004cbe <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cde:	4b27      	ldr	r3, [pc, #156]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1c3 0307 	rsb	r3, r3, #7
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d00b      	beq.n	8004d02 <xPortStartScheduler+0xbe>
        __asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	60bb      	str	r3, [r7, #8]
    }
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004d0a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d14:	4a19      	ldr	r2, [pc, #100]	@ (8004d7c <xPortStartScheduler+0x138>)
 8004d16:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <xPortStartScheduler+0x13c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <xPortStartScheduler+0x13c>)
 8004d26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <xPortStartScheduler+0x13c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a13      	ldr	r2, [pc, #76]	@ (8004d80 <xPortStartScheduler+0x13c>)
 8004d32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d38:	f000 f8e8 	bl	8004f0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	@ (8004d84 <xPortStartScheduler+0x140>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d42:	f000 f907 	bl	8004f54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d46:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <xPortStartScheduler+0x144>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8004d88 <xPortStartScheduler+0x144>)
 8004d4c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d50:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d52:	f7ff ff61 	bl	8004c18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d56:	f7ff f84b 	bl	8003df0 <vTaskSwitchContext>
    prvTaskExitError();
 8004d5a:	f7ff ff17 	bl	8004b8c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed00 	.word	0xe000ed00
 8004d6c:	410fc271 	.word	0x410fc271
 8004d70:	410fc270 	.word	0x410fc270
 8004d74:	e000e400 	.word	0xe000e400
 8004d78:	200003cc 	.word	0x200003cc
 8004d7c:	200003d0 	.word	0x200003d0
 8004d80:	e000ed20 	.word	0xe000ed20
 8004d84:	2000000c 	.word	0x2000000c
 8004d88:	e000ef34 	.word	0xe000ef34

08004d8c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
        __asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	607b      	str	r3, [r7, #4]
    }
 8004da4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004da6:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <vPortEnterCritical+0x5c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	4a0e      	ldr	r2, [pc, #56]	@ (8004de8 <vPortEnterCritical+0x5c>)
 8004dae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004db0:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <vPortEnterCritical+0x5c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d110      	bne.n	8004dda <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <vPortEnterCritical+0x60>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <vPortEnterCritical+0x4e>
        __asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
    }
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <vPortEnterCritical+0x4a>
    }
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <vPortExitCritical+0x50>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <vPortExitCritical+0x26>
        __asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
    }
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004e16:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <vPortExitCritical+0x50>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <vPortExitCritical+0x50>)
 8004e1e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e20:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <vPortExitCritical+0x50>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <vPortExitCritical+0x44>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f383 8811 	msr	BASEPRI, r3
    }
 8004e32:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	2000000c 	.word	0x2000000c
	...

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f01e 0f10 	tst.w	lr, #16
 8004e60:	bf08      	it	eq
 8004e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e74:	f380 8811 	msr	BASEPRI, r0
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f7fe ffb6 	bl	8003df0 <vTaskSwitchContext>
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f380 8811 	msr	BASEPRI, r0
 8004e8c:	bc09      	pop	{r0, r3}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f01e 0f10 	tst.w	lr, #16
 8004e9a:	bf08      	it	eq
 8004e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ea0:	f380 8809 	msr	PSP, r0
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	2000028c 	.word	0x2000028c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
    }
 8004ed0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004ed2:	f002 fc6d 	bl	80077b0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ed6:	f7fe fecd 	bl	8003c74 <xTaskIncrementTick>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d006      	beq.n	8004eee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004ee0:	f002 fcc4 	bl	800786c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ee4:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <SysTick_Handler+0x50>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e001      	b.n	8004ef2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004eee:	f002 fca1 	bl	8007834 <SEGGER_SYSVIEW_RecordExitISR>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
    }
 8004efc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <vPortSetupTimerInterrupt+0x38>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <vPortSetupTimerInterrupt+0x3c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <vPortSetupTimerInterrupt+0x40>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <vPortSetupTimerInterrupt+0x44>)
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f2e:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010
 8004f44:	e000e018 	.word	0xe000e018
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	10624dd3 	.word	0x10624dd3
 8004f50:	e000e014 	.word	0xe000e014

08004f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f64 <vPortEnableVFP+0x10>
 8004f58:	6801      	ldr	r1, [r0, #0]
 8004f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f5e:	6001      	str	r1, [r0, #0]
 8004f60:	4770      	bx	lr
 8004f62:	0000      	.short	0x0000
 8004f64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop

08004f6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004f72:	f3ef 8305 	mrs	r3, IPSR
 8004f76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b0f      	cmp	r3, #15
 8004f7c:	d915      	bls.n	8004faa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f7e:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <vPortValidateInterruptPriority+0x74>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f88:	4b16      	ldr	r3, [pc, #88]	@ (8004fe4 <vPortValidateInterruptPriority+0x78>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	7afa      	ldrb	r2, [r7, #11]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d20b      	bcs.n	8004faa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
    }
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004faa:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe8 <vPortValidateInterruptPriority+0x7c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fec <vPortValidateInterruptPriority+0x80>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d90b      	bls.n	8004fd2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	603b      	str	r3, [r7, #0]
    }
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <vPortValidateInterruptPriority+0x62>
    }
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000e3f0 	.word	0xe000e3f0
 8004fe4:	200003cc 	.word	0x200003cc
 8004fe8:	e000ed0c 	.word	0xe000ed0c
 8004fec:	200003d0 	.word	0x200003d0

08004ff0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	@ 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ffc:	f7fe fd68 	bl	8003ad0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005000:	4b66      	ldr	r3, [pc, #408]	@ (800519c <pvPortMalloc+0x1ac>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005008:	f000 f938 	bl	800527c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800500c:	4b64      	ldr	r3, [pc, #400]	@ (80051a0 <pvPortMalloc+0x1b0>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 80a9 	bne.w	800516c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02e      	beq.n	800507e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005020:	2208      	movs	r2, #8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d228      	bcs.n	800507e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800502c:	2208      	movs	r2, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	2b00      	cmp	r3, #0
 800503c:	d022      	beq.n	8005084 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	3308      	adds	r3, #8
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d215      	bcs.n	8005078 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	3308      	adds	r3, #8
 8005054:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <pvPortMalloc+0x94>
        __asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	617b      	str	r3, [r7, #20]
    }
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800507c:	e002      	b.n	8005084 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	e000      	b.n	8005086 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005084:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d06f      	beq.n	800516c <pvPortMalloc+0x17c>
 800508c:	4b45      	ldr	r3, [pc, #276]	@ (80051a4 <pvPortMalloc+0x1b4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d86a      	bhi.n	800516c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005096:	4b44      	ldr	r3, [pc, #272]	@ (80051a8 <pvPortMalloc+0x1b8>)
 8005098:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800509a:	4b43      	ldr	r3, [pc, #268]	@ (80051a8 <pvPortMalloc+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050a0:	e004      	b.n	80050ac <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d903      	bls.n	80050be <pvPortMalloc+0xce>
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f1      	bne.n	80050a2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80050be:	4b37      	ldr	r3, [pc, #220]	@ (800519c <pvPortMalloc+0x1ac>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d051      	beq.n	800516c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2208      	movs	r2, #8
 80050ce:	4413      	add	r3, r2
 80050d0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	1ad2      	subs	r2, r2, r3
 80050e2:	2308      	movs	r3, #8
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d920      	bls.n	800512c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4413      	add	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00b      	beq.n	8005114 <pvPortMalloc+0x124>
        __asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	613b      	str	r3, [r7, #16]
    }
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	1ad2      	subs	r2, r2, r3
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005126:	69b8      	ldr	r0, [r7, #24]
 8005128:	f000 f90a 	bl	8005340 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800512c:	4b1d      	ldr	r3, [pc, #116]	@ (80051a4 <pvPortMalloc+0x1b4>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <pvPortMalloc+0x1b4>)
 8005138:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800513a:	4b1a      	ldr	r3, [pc, #104]	@ (80051a4 <pvPortMalloc+0x1b4>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <pvPortMalloc+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d203      	bcs.n	800514e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005146:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <pvPortMalloc+0x1b4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <pvPortMalloc+0x1bc>)
 800514c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <pvPortMalloc+0x1b0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	431a      	orrs	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005162:	4b13      	ldr	r3, [pc, #76]	@ (80051b0 <pvPortMalloc+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3301      	adds	r3, #1
 8005168:	4a11      	ldr	r2, [pc, #68]	@ (80051b0 <pvPortMalloc+0x1c0>)
 800516a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800516c:	f7fe fcbe 	bl	8003aec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <pvPortMalloc+0x1a2>
        __asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	60fb      	str	r3, [r7, #12]
    }
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <pvPortMalloc+0x19e>
    return pvReturn;
 8005192:	69fb      	ldr	r3, [r7, #28]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3728      	adds	r7, #40	@ 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20007bdc 	.word	0x20007bdc
 80051a0:	20007bf0 	.word	0x20007bf0
 80051a4:	20007be0 	.word	0x20007be0
 80051a8:	20007bd4 	.word	0x20007bd4
 80051ac:	20007be4 	.word	0x20007be4
 80051b0:	20007be8 	.word	0x20007be8

080051b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d04f      	beq.n	8005266 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80051c6:	2308      	movs	r3, #8
 80051c8:	425b      	negs	r3, r3
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <vPortFree+0xbc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <vPortFree+0x46>
        __asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	60fb      	str	r3, [r7, #12]
    }
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	e7fd      	b.n	80051f6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <vPortFree+0x66>
        __asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60bb      	str	r3, [r7, #8]
    }
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	4b14      	ldr	r3, [pc, #80]	@ (8005270 <vPortFree+0xbc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01e      	beq.n	8005266 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11a      	bne.n	8005266 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	4b0e      	ldr	r3, [pc, #56]	@ (8005270 <vPortFree+0xbc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	43db      	mvns	r3, r3
 800523a:	401a      	ands	r2, r3
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005240:	f7fe fc46 	bl	8003ad0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <vPortFree+0xc0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4413      	add	r3, r2
 800524e:	4a09      	ldr	r2, [pc, #36]	@ (8005274 <vPortFree+0xc0>)
 8005250:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005252:	6938      	ldr	r0, [r7, #16]
 8005254:	f000 f874 	bl	8005340 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005258:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <vPortFree+0xc4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a06      	ldr	r2, [pc, #24]	@ (8005278 <vPortFree+0xc4>)
 8005260:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005262:	f7fe fc43 	bl	8003aec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005266:	bf00      	nop
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20007bf0 	.word	0x20007bf0
 8005274:	20007be0 	.word	0x20007be0
 8005278:	20007bec 	.word	0x20007bec

0800527c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005282:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8005286:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005288:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <prvHeapInit+0xac>)
 800528a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3307      	adds	r3, #7
 800529a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <prvHeapInit+0xac>)
 80052ac:	4413      	add	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052b4:	4a1d      	ldr	r2, [pc, #116]	@ (800532c <prvHeapInit+0xb0>)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80052ba:	4b1c      	ldr	r3, [pc, #112]	@ (800532c <prvHeapInit+0xb0>)
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80052c8:	2208      	movs	r2, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0307 	bic.w	r3, r3, #7
 80052d6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <prvHeapInit+0xb4>)
 80052dc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80052de:	4b14      	ldr	r3, [pc, #80]	@ (8005330 <prvHeapInit+0xb4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2200      	movs	r2, #0
 80052e4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80052e6:	4b12      	ldr	r3, [pc, #72]	@ (8005330 <prvHeapInit+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <prvHeapInit+0xb4>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a0a      	ldr	r2, [pc, #40]	@ (8005334 <prvHeapInit+0xb8>)
 800530a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a09      	ldr	r2, [pc, #36]	@ (8005338 <prvHeapInit+0xbc>)
 8005312:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005314:	4b09      	ldr	r3, [pc, #36]	@ (800533c <prvHeapInit+0xc0>)
 8005316:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	200003d4 	.word	0x200003d4
 800532c:	20007bd4 	.word	0x20007bd4
 8005330:	20007bdc 	.word	0x20007bdc
 8005334:	20007be4 	.word	0x20007be4
 8005338:	20007be0 	.word	0x20007be0
 800533c:	20007bf0 	.word	0x20007bf0

08005340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005348:	4b28      	ldr	r3, [pc, #160]	@ (80053ec <prvInsertBlockIntoFreeList+0xac>)
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e002      	b.n	8005354 <prvInsertBlockIntoFreeList+0x14>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d8f7      	bhi.n	800534e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4413      	add	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d108      	bne.n	8005382 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	441a      	add	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d118      	bne.n	80053c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <prvInsertBlockIntoFreeList+0xb0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d00d      	beq.n	80053be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	441a      	add	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e008      	b.n	80053d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053be:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <prvInsertBlockIntoFreeList+0xb0>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e003      	b.n	80053d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d002      	beq.n	80053de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20007bd4 	.word	0x20007bd4
 80053f0:	20007bdc 	.word	0x20007bdc

080053f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80053f8:	4803      	ldr	r0, [pc, #12]	@ (8005408 <_cbSendSystemDesc+0x14>)
 80053fa:	f002 f983 	bl	8007704 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80053fe:	4803      	ldr	r0, [pc, #12]	@ (800540c <_cbSendSystemDesc+0x18>)
 8005400:	f002 f980 	bl	8007704 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}
 8005408:	0800a840 	.word	0x0800a840
 800540c:	0800a880 	.word	0x0800a880

08005410 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <SEGGER_SYSVIEW_Conf+0x20>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <SEGGER_SYSVIEW_Conf+0x20>)
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <SEGGER_SYSVIEW_Conf+0x24>)
 800541e:	4a06      	ldr	r2, [pc, #24]	@ (8005438 <SEGGER_SYSVIEW_Conf+0x28>)
 8005420:	f001 fcec 	bl	8006dfc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005424:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005428:	f001 fd2c 	bl	8006e84 <SEGGER_SYSVIEW_SetRAMBase>
}
 800542c:	bf00      	nop
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000000 	.word	0x20000000
 8005434:	080053f5 	.word	0x080053f5
 8005438:	0800a920 	.word	0x0800a920

0800543c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800543c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e033      	b.n	80054b0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005448:	491e      	ldr	r1, [pc, #120]	@ (80054c4 <_cbSendTaskList+0x88>)
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	491a      	ldr	r1, [pc, #104]	@ (80054c4 <_cbSendTaskList+0x88>)
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	3304      	adds	r3, #4
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	4c16      	ldr	r4, [pc, #88]	@ (80054c4 <_cbSendTaskList+0x88>)
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4423      	add	r3, r4
 8005478:	3308      	adds	r3, #8
 800547a:	681c      	ldr	r4, [r3, #0]
 800547c:	4d11      	ldr	r5, [pc, #68]	@ (80054c4 <_cbSendTaskList+0x88>)
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	442b      	add	r3, r5
 800548a:	330c      	adds	r3, #12
 800548c:	681d      	ldr	r5, [r3, #0]
 800548e:	4e0d      	ldr	r6, [pc, #52]	@ (80054c4 <_cbSendTaskList+0x88>)
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4433      	add	r3, r6
 800549c:	3310      	adds	r3, #16
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	462b      	mov	r3, r5
 80054a4:	4622      	mov	r2, r4
 80054a6:	f000 f8bd 	bl	8005624 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3301      	adds	r3, #1
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <_cbSendTaskList+0x8c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3c6      	bcc.n	8005448 <_cbSendTaskList+0xc>
  }
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c4:	20007bf4 	.word	0x20007bf4
 80054c8:	20007c94 	.word	0x20007c94

080054cc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80054cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80054d4:	f7fe fbbc 	bl	8003c50 <xTaskGetTickCountFromISR>
 80054d8:	4603      	mov	r3, r0
 80054da:	2200      	movs	r2, #0
 80054dc:	469a      	mov	sl, r3
 80054de:	4693      	mov	fp, r2
 80054e0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80054e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	f04f 0a00 	mov.w	sl, #0
 80054f0:	f04f 0b00 	mov.w	fp, #0
 80054f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80054f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80054fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005500:	4652      	mov	r2, sl
 8005502:	465b      	mov	r3, fp
 8005504:	1a14      	subs	r4, r2, r0
 8005506:	eb63 0501 	sbc.w	r5, r3, r1
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	00ab      	lsls	r3, r5, #2
 8005514:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005518:	00a2      	lsls	r2, r4, #2
 800551a:	4614      	mov	r4, r2
 800551c:	461d      	mov	r5, r3
 800551e:	eb14 0800 	adds.w	r8, r4, r0
 8005522:	eb45 0901 	adc.w	r9, r5, r1
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800553a:	4690      	mov	r8, r2
 800553c:	4699      	mov	r9, r3
 800553e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005542:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005554 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005562:	2205      	movs	r2, #5
 8005564:	492b      	ldr	r1, [pc, #172]	@ (8005614 <SYSVIEW_AddTask+0xc0>)
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f003 fa19 	bl	800899e <memcmp>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04b      	beq.n	800560a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005572:	4b29      	ldr	r3, [pc, #164]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b07      	cmp	r3, #7
 8005578:	d903      	bls.n	8005582 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800557a:	4828      	ldr	r0, [pc, #160]	@ (800561c <SYSVIEW_AddTask+0xc8>)
 800557c:	f002 fbde 	bl	8007d3c <SEGGER_SYSVIEW_Warn>
    return;
 8005580:	e044      	b.n	800560c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005582:	4b25      	ldr	r3, [pc, #148]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4926      	ldr	r1, [pc, #152]	@ (8005620 <SYSVIEW_AddTask+0xcc>)
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005596:	4b20      	ldr	r3, [pc, #128]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4921      	ldr	r1, [pc, #132]	@ (8005620 <SYSVIEW_AddTask+0xcc>)
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3304      	adds	r3, #4
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80055ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	491b      	ldr	r1, [pc, #108]	@ (8005620 <SYSVIEW_AddTask+0xcc>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	3308      	adds	r3, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80055c2:	4b15      	ldr	r3, [pc, #84]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4916      	ldr	r1, [pc, #88]	@ (8005620 <SYSVIEW_AddTask+0xcc>)
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	330c      	adds	r3, #12
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80055d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4910      	ldr	r1, [pc, #64]	@ (8005620 <SYSVIEW_AddTask+0xcc>)
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3310      	adds	r3, #16
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80055ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a08      	ldr	r2, [pc, #32]	@ (8005618 <SYSVIEW_AddTask+0xc4>)
 80055f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f80e 	bl	8005624 <SYSVIEW_SendTaskInfo>
 8005608:	e000      	b.n	800560c <SYSVIEW_AddTask+0xb8>
    return;
 800560a:	bf00      	nop

}
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	0800a890 	.word	0x0800a890
 8005618:	20007c94 	.word	0x20007c94
 800561c:	0800a898 	.word	0x0800a898
 8005620:	20007bf4 	.word	0x20007bf4

08005624 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	@ 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	2218      	movs	r2, #24
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f003 f9bf 	bl	80089be <memset>
  TaskInfo.TaskID     = TaskID;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005654:	f107 0310 	add.w	r3, r7, #16
 8005658:	4618      	mov	r0, r3
 800565a:	f001 ff5b 	bl	8007514 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800565e:	bf00      	nop
 8005660:	3728      	adds	r7, #40	@ 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <__NVIC_EnableIRQ>:
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	2b00      	cmp	r3, #0
 8005678:	db0b      	blt.n	8005692 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	f003 021f 	and.w	r2, r3, #31
 8005680:	4907      	ldr	r1, [pc, #28]	@ (80056a0 <__NVIC_EnableIRQ+0x38>)
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2001      	movs	r0, #1
 800568a:	fa00 f202 	lsl.w	r2, r0, r2
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e100 	.word	0xe000e100

080056a4 <__NVIC_SetPriority>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	6039      	str	r1, [r7, #0]
 80056ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	db0a      	blt.n	80056ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	490c      	ldr	r1, [pc, #48]	@ (80056f0 <__NVIC_SetPriority+0x4c>)
 80056be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c2:	0112      	lsls	r2, r2, #4
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	440b      	add	r3, r1
 80056c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056cc:	e00a      	b.n	80056e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4908      	ldr	r1, [pc, #32]	@ (80056f4 <__NVIC_SetPriority+0x50>)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	3b04      	subs	r3, #4
 80056dc:	0112      	lsls	r2, r2, #4
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	440b      	add	r3, r1
 80056e2:	761a      	strb	r2, [r3, #24]
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	e000e100 	.word	0xe000e100
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80056fe:	f002 fb79 	bl	8007df4 <SEGGER_SYSVIEW_IsStarted>
 8005702:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800570a:	f001 fd87 	bl	800721c <SEGGER_SYSVIEW_Start>
  }
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005722:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <_cbOnUARTRx+0x3c>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d806      	bhi.n	8005738 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800572a:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <_cbOnUARTRx+0x3c>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	4b08      	ldr	r3, [pc, #32]	@ (8005754 <_cbOnUARTRx+0x3c>)
 8005734:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005736:	e009      	b.n	800574c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005738:	f7ff ffde 	bl	80056f8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <_cbOnUARTRx+0x3c>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	1dfb      	adds	r3, r7, #7
 8005744:	2201      	movs	r2, #1
 8005746:	4619      	mov	r1, r3
 8005748:	f000 fbec 	bl	8005f24 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800574c:	bf00      	nop
}
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000010 	.word	0x20000010

08005758 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005760:	4b14      	ldr	r3, [pc, #80]	@ (80057b4 <_cbOnUARTTx+0x5c>)
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d80f      	bhi.n	8005788 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005768:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <_cbOnUARTTx+0x5c>)
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	461a      	mov	r2, r3
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <_cbOnUARTTx+0x60>)
 8005770:	5c9a      	ldrb	r2, [r3, r2]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005776:	4b0f      	ldr	r3, [pc, #60]	@ (80057b4 <_cbOnUARTTx+0x5c>)
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	3301      	adds	r3, #1
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <_cbOnUARTTx+0x5c>)
 8005780:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005786:	e00f      	b.n	80057a8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005788:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <_cbOnUARTTx+0x5c>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fa1b 	bl	8005bcc <SEGGER_RTT_ReadUpBufferNoLock>
 8005796:	4603      	mov	r3, r0
 8005798:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da02      	bge.n	80057a6 <_cbOnUARTTx+0x4e>
    r = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e000      	b.n	80057a8 <_cbOnUARTTx+0x50>
  }
Done:
 80057a6:	bf00      	nop
  return r;
 80057a8:	68fb      	ldr	r3, [r7, #12]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000010 	.word	0x20000010
 80057b8:	0800a928 	.word	0x0800a928

080057bc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80057c4:	4a04      	ldr	r2, [pc, #16]	@ (80057d8 <SEGGER_UART_init+0x1c>)
 80057c6:	4905      	ldr	r1, [pc, #20]	@ (80057dc <SEGGER_UART_init+0x20>)
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f863 	bl	8005894 <HIF_UART_Init>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	08005719 	.word	0x08005719
 80057dc:	08005759 	.word	0x08005759

080057e0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80057e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005860 <USART2_IRQHandler+0x80>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d011      	beq.n	800581a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80057f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005864 <USART2_IRQHandler+0x84>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 030b 	and.w	r3, r3, #11
 8005804:	2b00      	cmp	r3, #0
 8005806:	d108      	bne.n	800581a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005808:	4b17      	ldr	r3, [pc, #92]	@ (8005868 <USART2_IRQHandler+0x88>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005810:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <USART2_IRQHandler+0x88>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	79fa      	ldrb	r2, [r7, #7]
 8005816:	4610      	mov	r0, r2
 8005818:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005824:	4b11      	ldr	r3, [pc, #68]	@ (800586c <USART2_IRQHandler+0x8c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d015      	beq.n	8005858 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800582c:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <USART2_IRQHandler+0x8c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	1dfa      	adds	r2, r7, #7
 8005832:	4610      	mov	r0, r2
 8005834:	4798      	blx	r3
 8005836:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800583e:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <USART2_IRQHandler+0x90>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a0b      	ldr	r2, [pc, #44]	@ (8005870 <USART2_IRQHandler+0x90>)
 8005844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e006      	b.n	800585a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <USART2_IRQHandler+0x80>)
 800584e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005850:	79fa      	ldrb	r2, [r7, #7]
 8005852:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <USART2_IRQHandler+0x84>)
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e000      	b.n	800585a <USART2_IRQHandler+0x7a>
      return;
 8005858:	bf00      	nop
    }
  }
}
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40004400 	.word	0x40004400
 8005864:	40004404 	.word	0x40004404
 8005868:	20007c98 	.word	0x20007c98
 800586c:	20007c9c 	.word	0x20007c9c
 8005870:	4000440c 	.word	0x4000440c

08005874 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a04      	ldr	r2, [pc, #16]	@ (8005890 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800587e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	4000440c 	.word	0x4000440c

08005894 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80058a0:	4b2e      	ldr	r3, [pc, #184]	@ (800595c <HIF_UART_Init+0xc8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2d      	ldr	r2, [pc, #180]	@ (800595c <HIF_UART_Init+0xc8>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058aa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80058ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005960 <HIF_UART_Init+0xcc>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005960 <HIF_UART_Init+0xcc>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80058b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005964 <HIF_UART_Init+0xd0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80058cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80058ce:	4a25      	ldr	r2, [pc, #148]	@ (8005964 <HIF_UART_Init+0xd0>)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80058d4:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <HIF_UART_Init+0xd4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80058e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80058ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005968 <HIF_UART_Init+0xd4>)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80058f0:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <HIF_UART_Init+0xd8>)
 80058f2:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80058f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80058f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005970 <HIF_UART_Init+0xdc>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80058fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005974 <HIF_UART_Init+0xe0>)
 8005900:	2280      	movs	r2, #128	@ 0x80
 8005902:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800590a:	4a1b      	ldr	r2, [pc, #108]	@ (8005978 <HIF_UART_Init+0xe4>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	3301      	adds	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005922:	d302      	bcc.n	800592a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005924:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005928:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d004      	beq.n	800593a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	4a11      	ldr	r2, [pc, #68]	@ (800597c <HIF_UART_Init+0xe8>)
 8005936:	b29b      	uxth	r3, r3
 8005938:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800593a:	4a11      	ldr	r2, [pc, #68]	@ (8005980 <HIF_UART_Init+0xec>)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005940:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <HIF_UART_Init+0xf0>)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005946:	2106      	movs	r1, #6
 8005948:	2026      	movs	r0, #38	@ 0x26
 800594a:	f7ff feab 	bl	80056a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800594e:	2026      	movs	r0, #38	@ 0x26
 8005950:	f7ff fe8a 	bl	8005668 <__NVIC_EnableIRQ>
}
 8005954:	bf00      	nop
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023840 	.word	0x40023840
 8005960:	40023830 	.word	0x40023830
 8005964:	40020020 	.word	0x40020020
 8005968:	40020000 	.word	0x40020000
 800596c:	4000440c 	.word	0x4000440c
 8005970:	40004410 	.word	0x40004410
 8005974:	40004414 	.word	0x40004414
 8005978:	0501bd00 	.word	0x0501bd00
 800597c:	40004408 	.word	0x40004408
 8005980:	20007c98 	.word	0x20007c98
 8005984:	20007c9c 	.word	0x20007c9c

08005988 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800598e:	4b26      	ldr	r3, [pc, #152]	@ (8005a28 <_DoInit+0xa0>)
 8005990:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005992:	22a8      	movs	r2, #168	@ 0xa8
 8005994:	2100      	movs	r1, #0
 8005996:	6838      	ldr	r0, [r7, #0]
 8005998:	f003 f811 	bl	80089be <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2203      	movs	r2, #3
 80059a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4a20      	ldr	r2, [pc, #128]	@ (8005a2c <_DoInit+0xa4>)
 80059ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a30 <_DoInit+0xa8>)
 80059b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <_DoInit+0xa4>)
 80059d2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <_DoInit+0xac>)
 80059d8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2210      	movs	r2, #16
 80059de:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80059f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	e00c      	b.n	8005a16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1c3 030f 	rsb	r3, r3, #15
 8005a02:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <_DoInit+0xb0>)
 8005a04:	5cd1      	ldrb	r1, [r2, r3]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b0f      	cmp	r3, #15
 8005a1a:	d9ef      	bls.n	80059fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005a1c:	f3bf 8f5f 	dmb	sy
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20007ca0 	.word	0x20007ca0
 8005a2c:	0800a8e8 	.word	0x0800a8e8
 8005a30:	20007d48 	.word	0x20007d48
 8005a34:	20008148 	.word	0x20008148
 8005a38:	0800a92c 	.word	0x0800a92c

08005a3c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	@ 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d905      	bls.n	8005a6c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a6a:	e007      	b.n	8005a7c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	1acb      	subs	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a86:	4293      	cmp	r3, r2
 8005a88:	bf28      	it	cs
 8005a8a:	4613      	movcs	r3, r2
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bf28      	it	cs
 8005a96:	4613      	movcs	r3, r2
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	f002 fff6 	bl	8008a9a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	4413      	add	r3, r2
 8005ab4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	4413      	add	r3, r2
 8005abc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	4413      	add	r3, r2
 8005acc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d101      	bne.n	8005adc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005adc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1b2      	bne.n	8005a52 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	@ 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d911      	bls.n	8005b3e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f002 ffb6 	bl	8008a9a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b2e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005b3c:	e01f      	b.n	8005b7e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	6938      	ldr	r0, [r7, #16]
 8005b52:	f002 ffa2 	bl	8008a9a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6938      	ldr	r0, [r7, #16]
 8005b70:	f002 ff93 	bl	8008a9a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b74:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	60da      	str	r2, [r3, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005b86:	b480      	push	{r7}
 8005b88:	b087      	sub	sp, #28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d808      	bhi.n	8005bb4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e004      	b.n	8005bbe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005bbe:	697b      	ldr	r3, [r7, #20]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	@ 0x30
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b53      	cmp	r3, #83	@ 0x53
 8005be4:	d001      	beq.n	8005bea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005be6:	f7ff fecf 	bl	8005988 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4a37      	ldr	r2, [pc, #220]	@ (8005cd4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d92b      	bls.n	8005c70 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4293      	cmp	r3, r2
 8005c28:	bf28      	it	cs
 8005c2a:	4613      	movcs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	4413      	add	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	6939      	ldr	r1, [r7, #16]
 8005c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c3e:	f002 ff2c 	bl	8008a9a <memcpy>
    NumBytesRead += NumBytesRem;
 8005c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4413      	add	r3, r2
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d101      	bne.n	8005c70 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	bf28      	it	cs
 8005c80:	4613      	movcs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d019      	beq.n	8005cbe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	4413      	add	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	6939      	ldr	r1, [r7, #16]
 8005c98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c9a:	f002 fefe 	bl	8008a9a <memcpy>
    NumBytesRead += NumBytesRem;
 8005c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4413      	add	r3, r2
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3730      	adds	r7, #48	@ 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20007ca0 	.word	0x20007ca0

08005cd8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	@ 0x30
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8005de0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b53      	cmp	r3, #83	@ 0x53
 8005cf0:	d001      	beq.n	8005cf6 <SEGGER_RTT_ReadNoLock+0x1e>
 8005cf2:	f7ff fe49 	bl	8005988 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	3360      	adds	r3, #96	@ 0x60
 8005d02:	4a37      	ldr	r2, [pc, #220]	@ (8005de0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d04:	4413      	add	r3, r2
 8005d06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d92b      	bls.n	8005d7c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4293      	cmp	r3, r2
 8005d34:	bf28      	it	cs
 8005d36:	4613      	movcs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d40:	4413      	add	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	6939      	ldr	r1, [r7, #16]
 8005d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d4a:	f002 fea6 	bl	8008a9a <memcpy>
    NumBytesRead += NumBytesRem;
 8005d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d101      	bne.n	8005d7c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bf28      	it	cs
 8005d8c:	4613      	movcs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d019      	beq.n	8005dca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	4413      	add	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	6939      	ldr	r1, [r7, #16]
 8005da4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005da6:	f002 fe78 	bl	8008a9a <memcpy>
    NumBytesRead += NumBytesRem;
 8005daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	4413      	add	r3, r2
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dd4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3730      	adds	r7, #48	@ 0x30
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20007ca0 	.word	0x20007ca0

08005de4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	3360      	adds	r3, #96	@ 0x60
 8005e00:	4a1f      	ldr	r2, [pc, #124]	@ (8005e80 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005e02:	4413      	add	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d029      	beq.n	8005e62 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d82e      	bhi.n	8005e70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d013      	beq.n	8005e42 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005e1a:	e029      	b.n	8005e70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	f7ff feb2 	bl	8005b86 <_GetAvailWriteSpace>
 8005e22:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d202      	bcs.n	8005e32 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005e30:	e021      	b.n	8005e76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	69b9      	ldr	r1, [r7, #24]
 8005e3a:	6978      	ldr	r0, [r7, #20]
 8005e3c:	f7ff fe5b 	bl	8005af6 <_WriteNoCheck>
    break;
 8005e40:	e019      	b.n	8005e76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff fe9f 	bl	8005b86 <_GetAvailWriteSpace>
 8005e48:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bf28      	it	cs
 8005e52:	4613      	movcs	r3, r2
 8005e54:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f7ff fe4b 	bl	8005af6 <_WriteNoCheck>
    break;
 8005e60:	e009      	b.n	8005e76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	69b9      	ldr	r1, [r7, #24]
 8005e66:	6978      	ldr	r0, [r7, #20]
 8005e68:	f7ff fde8 	bl	8005a3c <_WriteBlocking>
 8005e6c:	61f8      	str	r0, [r7, #28]
    break;
 8005e6e:	e002      	b.n	8005e76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
    break;
 8005e74:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005e76:	69fb      	ldr	r3, [r7, #28]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20007ca0 	.word	0x20007ca0

08005e84 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f20 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005ea2:	4413      	add	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d029      	beq.n	8005f02 <SEGGER_RTT_WriteNoLock+0x7e>
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d82e      	bhi.n	8005f10 <SEGGER_RTT_WriteNoLock+0x8c>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <SEGGER_RTT_WriteNoLock+0x38>
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d013      	beq.n	8005ee2 <SEGGER_RTT_WriteNoLock+0x5e>
 8005eba:	e029      	b.n	8005f10 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ebc:	6978      	ldr	r0, [r7, #20]
 8005ebe:	f7ff fe62 	bl	8005b86 <_GetAvailWriteSpace>
 8005ec2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d202      	bcs.n	8005ed2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005ed0:	e021      	b.n	8005f16 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	6978      	ldr	r0, [r7, #20]
 8005edc:	f7ff fe0b 	bl	8005af6 <_WriteNoCheck>
    break;
 8005ee0:	e019      	b.n	8005f16 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ee2:	6978      	ldr	r0, [r7, #20]
 8005ee4:	f7ff fe4f 	bl	8005b86 <_GetAvailWriteSpace>
 8005ee8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	bf28      	it	cs
 8005ef2:	4613      	movcs	r3, r2
 8005ef4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	69b9      	ldr	r1, [r7, #24]
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7ff fdfb 	bl	8005af6 <_WriteNoCheck>
    break;
 8005f00:	e009      	b.n	8005f16 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	69b9      	ldr	r1, [r7, #24]
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f7ff fd98 	bl	8005a3c <_WriteBlocking>
 8005f0c:	61f8      	str	r0, [r7, #28]
    break;
 8005f0e:	e002      	b.n	8005f16 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61fb      	str	r3, [r7, #28]
    break;
 8005f14:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005f16:	69fb      	ldr	r3, [r7, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20007ca0 	.word	0x20007ca0

08005f24 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005f30:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b53      	cmp	r3, #83	@ 0x53
 8005f3c:	d001      	beq.n	8005f42 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005f3e:	f7ff fd23 	bl	8005988 <_DoInit>
  SEGGER_RTT_LOCK();
 8005f42:	f3ef 8311 	mrs	r3, BASEPRI
 8005f46:	f04f 0120 	mov.w	r1, #32
 8005f4a:	f381 8811 	msr	BASEPRI, r1
 8005f4e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ff45 	bl	8005de4 <SEGGER_RTT_WriteDownBufferNoLock>
 8005f5a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20007ca0 	.word	0x20007ca0

08005f70 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb8 <SEGGER_RTT_Write+0x48>)
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b53      	cmp	r3, #83	@ 0x53
 8005f88:	d001      	beq.n	8005f8e <SEGGER_RTT_Write+0x1e>
 8005f8a:	f7ff fcfd 	bl	8005988 <_DoInit>
  SEGGER_RTT_LOCK();
 8005f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f92:	f04f 0120 	mov.w	r1, #32
 8005f96:	f381 8811 	msr	BASEPRI, r1
 8005f9a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ff6f 	bl	8005e84 <SEGGER_RTT_WriteNoLock>
 8005fa6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005fae:	697b      	ldr	r3, [r7, #20]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20007ca0 	.word	0x20007ca0

08005fbc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005fca:	4b3d      	ldr	r3, [pc, #244]	@ (80060c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b53      	cmp	r3, #83	@ 0x53
 8005fd6:	d001      	beq.n	8005fdc <SEGGER_RTT_AllocUpBuffer+0x20>
 8005fd8:	f7ff fcd6 	bl	8005988 <_DoInit>
  SEGGER_RTT_LOCK();
 8005fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe0:	f04f 0120 	mov.w	r1, #32
 8005fe4:	f381 8811 	msr	BASEPRI, r1
 8005fe8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fea:	4b35      	ldr	r3, [pc, #212]	@ (80060c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005fec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005ff2:	6939      	ldr	r1, [r7, #16]
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	440b      	add	r3, r1
 8006002:	3304      	adds	r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	429a      	cmp	r2, r3
 8006018:	dbeb      	blt.n	8005ff2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800601a:	e000      	b.n	800601e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800601c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	429a      	cmp	r2, r3
 8006026:	da3f      	bge.n	80060a8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006028:	6939      	ldr	r1, [r7, #16]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800603c:	6939      	ldr	r1, [r7, #16]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	4613      	mov	r3, r2
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	440b      	add	r3, r1
 800604c:	3304      	adds	r3, #4
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006052:	6939      	ldr	r1, [r7, #16]
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	4613      	mov	r3, r2
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	4413      	add	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	440b      	add	r3, r1
 8006060:	3320      	adds	r3, #32
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	440b      	add	r3, r1
 8006074:	3328      	adds	r3, #40	@ 0x28
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800607a:	6939      	ldr	r1, [r7, #16]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	4613      	mov	r3, r2
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	440b      	add	r3, r1
 8006088:	3324      	adds	r3, #36	@ 0x24
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	440b      	add	r3, r1
 800609c:	332c      	adds	r3, #44	@ 0x2c
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80060a2:	f3bf 8f5f 	dmb	sy
 80060a6:	e002      	b.n	80060ae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80060b4:	69fb      	ldr	r3, [r7, #28]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20007ca0 	.word	0x20007ca0

080060c4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	@ 0x28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80060d2:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b53      	cmp	r3, #83	@ 0x53
 80060de:	d001      	beq.n	80060e4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80060e0:	f7ff fc52 	bl	8005988 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006158 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80060e6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d82c      	bhi.n	8006148 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80060ee:	f3ef 8311 	mrs	r3, BASEPRI
 80060f2:	f04f 0120 	mov.w	r1, #32
 80060f6:	f381 8811 	msr	BASEPRI, r1
 80060fa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4613      	mov	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	3360      	adds	r3, #96	@ 0x60
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00e      	beq.n	8006132 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006136:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006138:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
 8006146:	e002      	b.n	800614e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	@ 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20007ca0 	.word	0x20007ca0

0800615c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	60fa      	str	r2, [r7, #12]
 8006172:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b80      	cmp	r3, #128	@ 0x80
 8006178:	d90a      	bls.n	8006190 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800617a:	2380      	movs	r3, #128	@ 0x80
 800617c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800617e:	e007      	b.n	8006190 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	1c53      	adds	r3, r2, #1
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	60f9      	str	r1, [r7, #12]
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <_EncodeStr+0x46>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1ee      	bne.n	8006180 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80061ae:	68fb      	ldr	r3, [r7, #12]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3307      	adds	r3, #7
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061da:	4b34      	ldr	r3, [pc, #208]	@ (80062ac <_HandleIncomingPacket+0xd8>)
 80061dc:	7e1b      	ldrb	r3, [r3, #24]
 80061de:	4618      	mov	r0, r3
 80061e0:	1cfb      	adds	r3, r7, #3
 80061e2:	2201      	movs	r2, #1
 80061e4:	4619      	mov	r1, r3
 80061e6:	f7ff fd77 	bl	8005cd8 <SEGGER_RTT_ReadNoLock>
 80061ea:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d057      	beq.n	80062a2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	2b80      	cmp	r3, #128	@ 0x80
 80061f6:	d031      	beq.n	800625c <_HandleIncomingPacket+0x88>
 80061f8:	2b80      	cmp	r3, #128	@ 0x80
 80061fa:	dc40      	bgt.n	800627e <_HandleIncomingPacket+0xaa>
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	dc15      	bgt.n	800622c <_HandleIncomingPacket+0x58>
 8006200:	2b00      	cmp	r3, #0
 8006202:	dd3c      	ble.n	800627e <_HandleIncomingPacket+0xaa>
 8006204:	3b01      	subs	r3, #1
 8006206:	2b06      	cmp	r3, #6
 8006208:	d839      	bhi.n	800627e <_HandleIncomingPacket+0xaa>
 800620a:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <_HandleIncomingPacket+0x3c>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006233 	.word	0x08006233
 8006214:	08006239 	.word	0x08006239
 8006218:	0800623f 	.word	0x0800623f
 800621c:	08006245 	.word	0x08006245
 8006220:	0800624b 	.word	0x0800624b
 8006224:	08006251 	.word	0x08006251
 8006228:	08006257 	.word	0x08006257
 800622c:	2b7f      	cmp	r3, #127	@ 0x7f
 800622e:	d033      	beq.n	8006298 <_HandleIncomingPacket+0xc4>
 8006230:	e025      	b.n	800627e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006232:	f000 fff3 	bl	800721c <SEGGER_SYSVIEW_Start>
      break;
 8006236:	e034      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006238:	f001 f8ac 	bl	8007394 <SEGGER_SYSVIEW_Stop>
      break;
 800623c:	e031      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800623e:	f001 fa85 	bl	800774c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006242:	e02e      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006244:	f001 fa4a 	bl	80076dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006248:	e02b      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800624a:	f001 f8c9 	bl	80073e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800624e:	e028      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006250:	f001 fd22 	bl	8007c98 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006254:	e025      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006256:	f001 fd01 	bl	8007c5c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800625a:	e022      	b.n	80062a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800625c:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <_HandleIncomingPacket+0xd8>)
 800625e:	7e1b      	ldrb	r3, [r3, #24]
 8006260:	4618      	mov	r0, r3
 8006262:	1cfb      	adds	r3, r7, #3
 8006264:	2201      	movs	r2, #1
 8006266:	4619      	mov	r1, r3
 8006268:	f7ff fd36 	bl	8005cd8 <SEGGER_RTT_ReadNoLock>
 800626c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d013      	beq.n	800629c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fc66 	bl	8007b48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800627c:	e00e      	b.n	800629c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	b25b      	sxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	da0c      	bge.n	80062a0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006286:	4b09      	ldr	r3, [pc, #36]	@ (80062ac <_HandleIncomingPacket+0xd8>)
 8006288:	7e1b      	ldrb	r3, [r3, #24]
 800628a:	4618      	mov	r0, r3
 800628c:	1cfb      	adds	r3, r7, #3
 800628e:	2201      	movs	r2, #1
 8006290:	4619      	mov	r1, r3
 8006292:	f7ff fd21 	bl	8005cd8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006296:	e003      	b.n	80062a0 <_HandleIncomingPacket+0xcc>
      break;
 8006298:	bf00      	nop
 800629a:	e002      	b.n	80062a2 <_HandleIncomingPacket+0xce>
      break;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <_HandleIncomingPacket+0xce>
      break;
 80062a0:	bf00      	nop
    }
  }
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2000c160 	.word	0x2000c160

080062b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	@ 0x30
 80062b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80062b6:	2301      	movs	r3, #1
 80062b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	3301      	adds	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062c4:	4b32      	ldr	r3, [pc, #200]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ca:	e00b      	b.n	80062e4 <_TrySendOverflowPacket+0x34>
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	09db      	lsrs	r3, r3, #7
 80062e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e8:	d8f0      	bhi.n	80062cc <_TrySendOverflowPacket+0x1c>
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062fa:	4b26      	ldr	r3, [pc, #152]	@ (8006394 <_TrySendOverflowPacket+0xe4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006300:	4b23      	ldr	r3, [pc, #140]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	e00b      	b.n	800632c <_TrySendOverflowPacket+0x7c>
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	1c59      	adds	r1, r3, #1
 800631c:	6279      	str	r1, [r7, #36]	@ 0x24
 800631e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	09db      	lsrs	r3, r3, #7
 800632a:	623b      	str	r3, [r7, #32]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006330:	d8f0      	bhi.n	8006314 <_TrySendOverflowPacket+0x64>
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	627a      	str	r2, [r7, #36]	@ 0x24
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006342:	4b13      	ldr	r3, [pc, #76]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	4618      	mov	r0, r3
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	461a      	mov	r2, r3
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	4619      	mov	r1, r3
 8006354:	f7f9 ff44 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006358:	4603      	mov	r3, r0
 800635a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800635c:	f7ff fa8a 	bl	8005874 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006366:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800636c:	4b08      	ldr	r3, [pc, #32]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	3b01      	subs	r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e004      	b.n	8006384 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800637a:	4b05      	ldr	r3, [pc, #20]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	3301      	adds	r3, #1
 8006380:	4a03      	ldr	r2, [pc, #12]	@ (8006390 <_TrySendOverflowPacket+0xe0>)
 8006382:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006384:	693b      	ldr	r3, [r7, #16]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3730      	adds	r7, #48	@ 0x30
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	2000c160 	.word	0x2000c160
 8006394:	e0001004 	.word	0xe0001004

08006398 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	@ 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80063a4:	4b96      	ldr	r3, [pc, #600]	@ (8006600 <_SendPacket+0x268>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d010      	beq.n	80063ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80063ac:	4b94      	ldr	r3, [pc, #592]	@ (8006600 <_SendPacket+0x268>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8130 	beq.w	8006616 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80063b6:	4b92      	ldr	r3, [pc, #584]	@ (8006600 <_SendPacket+0x268>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d109      	bne.n	80063d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80063be:	f7ff ff77 	bl	80062b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80063c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006600 <_SendPacket+0x268>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	f040 8127 	bne.w	800661a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80063cc:	e001      	b.n	80063d2 <_SendPacket+0x3a>
    goto Send;
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <_SendPacket+0x3c>
Send:
 80063d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b1f      	cmp	r3, #31
 80063d8:	d809      	bhi.n	80063ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80063da:	4b89      	ldr	r3, [pc, #548]	@ (8006600 <_SendPacket+0x268>)
 80063dc:	69da      	ldr	r2, [r3, #28]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 8118 	bne.w	800661e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b17      	cmp	r3, #23
 80063f2:	d807      	bhi.n	8006404 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e0c4      	b.n	800658e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006410:	d912      	bls.n	8006438 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	09da      	lsrs	r2, r3, #7
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3b01      	subs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	3a01      	subs	r2, #1
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	e006      	b.n	8006446 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b7e      	cmp	r3, #126	@ 0x7e
 800644a:	d807      	bhi.n	800645c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3b01      	subs	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	e098      	b.n	800658e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006462:	d212      	bcs.n	800648a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	09da      	lsrs	r2, r3, #7
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3b01      	subs	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	3a01      	subs	r2, #1
 800647c:	60fa      	str	r2, [r7, #12]
 800647e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006482:	b2da      	uxtb	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e081      	b.n	800658e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006490:	d21d      	bcs.n	80064ce <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0b9a      	lsrs	r2, r3, #14
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3b01      	subs	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	09db      	lsrs	r3, r3, #7
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	3a01      	subs	r2, #1
 80064ac:	60fa      	str	r2, [r7, #12]
 80064ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	3a01      	subs	r2, #1
 80064c0:	60fa      	str	r2, [r7, #12]
 80064c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e05f      	b.n	800658e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064d4:	d228      	bcs.n	8006528 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	0d5a      	lsrs	r2, r3, #21
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b01      	subs	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	0b9b      	lsrs	r3, r3, #14
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	3a01      	subs	r2, #1
 80064f0:	60fa      	str	r2, [r7, #12]
 80064f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	09db      	lsrs	r3, r3, #7
 8006500:	b2db      	uxtb	r3, r3
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	3a01      	subs	r2, #1
 8006506:	60fa      	str	r2, [r7, #12]
 8006508:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800650c:	b2da      	uxtb	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	3a01      	subs	r2, #1
 800651a:	60fa      	str	r2, [r7, #12]
 800651c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006520:	b2da      	uxtb	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e032      	b.n	800658e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0f1a      	lsrs	r2, r3, #28
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3b01      	subs	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	0d5b      	lsrs	r3, r3, #21
 800653c:	b2db      	uxtb	r3, r3
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	3a01      	subs	r2, #1
 8006542:	60fa      	str	r2, [r7, #12]
 8006544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006548:	b2da      	uxtb	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0b9b      	lsrs	r3, r3, #14
 8006552:	b2db      	uxtb	r3, r3
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	3a01      	subs	r2, #1
 8006558:	60fa      	str	r2, [r7, #12]
 800655a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800655e:	b2da      	uxtb	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	09db      	lsrs	r3, r3, #7
 8006568:	b2db      	uxtb	r3, r3
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	3a01      	subs	r2, #1
 800656e:	60fa      	str	r2, [r7, #12]
 8006570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006574:	b2da      	uxtb	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	3a01      	subs	r2, #1
 8006582:	60fa      	str	r2, [r7, #12]
 8006584:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006588:	b2da      	uxtb	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800658e:	4b1d      	ldr	r3, [pc, #116]	@ (8006604 <_SendPacket+0x26c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006594:	4b1a      	ldr	r3, [pc, #104]	@ (8006600 <_SendPacket+0x268>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	e00b      	b.n	80065c0 <_SendPacket+0x228>
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80065b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	09db      	lsrs	r3, r3, #7
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065c4:	d8f0      	bhi.n	80065a8 <_SendPacket+0x210>
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80065cc:	6a3a      	ldr	r2, [r7, #32]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80065d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <_SendPacket+0x268>)
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	4618      	mov	r0, r3
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	f7f9 fdfb 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80065ea:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80065ec:	f7ff f942 	bl	8005874 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80065f6:	4a02      	ldr	r2, [pc, #8]	@ (8006600 <_SendPacket+0x268>)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	60d3      	str	r3, [r2, #12]
 80065fc:	e010      	b.n	8006620 <_SendPacket+0x288>
 80065fe:	bf00      	nop
 8006600:	2000c160 	.word	0x2000c160
 8006604:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006608:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <_SendPacket+0x2d8>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	b2da      	uxtb	r2, r3
 8006610:	4b17      	ldr	r3, [pc, #92]	@ (8006670 <_SendPacket+0x2d8>)
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e004      	b.n	8006620 <_SendPacket+0x288>
    goto SendDone;
 8006616:	bf00      	nop
 8006618:	e002      	b.n	8006620 <_SendPacket+0x288>
      goto SendDone;
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <_SendPacket+0x288>
      goto SendDone;
 800661e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006620:	4b13      	ldr	r3, [pc, #76]	@ (8006670 <_SendPacket+0x2d8>)
 8006622:	7e1b      	ldrb	r3, [r3, #24]
 8006624:	4619      	mov	r1, r3
 8006626:	4a13      	ldr	r2, [pc, #76]	@ (8006674 <_SendPacket+0x2dc>)
 8006628:	460b      	mov	r3, r1
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	440b      	add	r3, r1
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4413      	add	r3, r2
 8006632:	336c      	adds	r3, #108	@ 0x6c
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b0e      	ldr	r3, [pc, #56]	@ (8006670 <_SendPacket+0x2d8>)
 8006638:	7e1b      	ldrb	r3, [r3, #24]
 800663a:	4618      	mov	r0, r3
 800663c:	490d      	ldr	r1, [pc, #52]	@ (8006674 <_SendPacket+0x2dc>)
 800663e:	4603      	mov	r3, r0
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4403      	add	r3, r0
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	440b      	add	r3, r1
 8006648:	3370      	adds	r3, #112	@ 0x70
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d00b      	beq.n	8006668 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <_SendPacket+0x2d8>)
 8006652:	789b      	ldrb	r3, [r3, #2]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d107      	bne.n	8006668 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <_SendPacket+0x2d8>)
 800665a:	2201      	movs	r2, #1
 800665c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800665e:	f7ff fdb9 	bl	80061d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006662:	4b03      	ldr	r3, [pc, #12]	@ (8006670 <_SendPacket+0x2d8>)
 8006664:	2200      	movs	r2, #0
 8006666:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006668:	bf00      	nop
 800666a:	3728      	adds	r7, #40	@ 0x28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2000c160 	.word	0x2000c160
 8006674:	20007ca0 	.word	0x20007ca0

08006678 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	@ 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	3301      	adds	r3, #1
 800668e:	2b80      	cmp	r3, #128	@ 0x80
 8006690:	d80a      	bhi.n	80066a8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6051      	str	r1, [r2, #4]
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b80      	cmp	r3, #128	@ 0x80
 80066ae:	d15a      	bne.n	8006766 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	e00b      	b.n	80066ea <_StoreChar+0x72>
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	6279      	str	r1, [r7, #36]	@ 0x24
 80066dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	09db      	lsrs	r3, r3, #7
 80066e8:	623b      	str	r3, [r7, #32]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ee:	d8f0      	bhi.n	80066d2 <_StoreChar+0x5a>
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	2300      	movs	r3, #0
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	e00b      	b.n	8006722 <_StoreChar+0xaa>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	1c59      	adds	r1, r3, #1
 8006712:	61f9      	str	r1, [r7, #28]
 8006714:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b7f      	cmp	r3, #127	@ 0x7f
 8006726:	d8f0      	bhi.n	800670a <_StoreChar+0x92>
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	61fa      	str	r2, [r7, #28]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	221a      	movs	r2, #26
 800673e:	6939      	ldr	r1, [r7, #16]
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fe29 	bl	8006398 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fd36 	bl	80061bc <_PreparePacket>
 8006750:	4602      	mov	r2, r0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	611a      	str	r2, [r3, #16]
  }
}
 8006766:	bf00      	nop
 8006768:	3728      	adds	r7, #40	@ 0x28
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	@ 0x28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006782:	2301      	movs	r3, #1
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006786:	2301      	movs	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800678a:	e007      	b.n	800679c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	623b      	str	r3, [r7, #32]
    Width++;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3301      	adds	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d2f3      	bcs.n	800678c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d901      	bls.n	80067b0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d000      	beq.n	80067bc <_PrintUnsigned+0x4c>
 80067ba:	e01f      	b.n	80067fc <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01c      	beq.n	80067fc <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80067c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <_PrintUnsigned+0x68>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <_PrintUnsigned+0x68>
        c = '0';
 80067d2:	2330      	movs	r3, #48	@ 0x30
 80067d4:	76fb      	strb	r3, [r7, #27]
 80067d6:	e001      	b.n	80067dc <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80067d8:	2320      	movs	r3, #32
 80067da:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067dc:	e007      	b.n	80067ee <_PrintUnsigned+0x7e>
        FieldWidth--;
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	3b01      	subs	r3, #1
 80067e2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80067e4:	7efb      	ldrb	r3, [r7, #27]
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff ff45 	bl	8006678 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <_PrintUnsigned+0x8c>
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3f0      	bcc.n	80067de <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d903      	bls.n	800680a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	3b01      	subs	r3, #1
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	e009      	b.n	800681e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006812:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d200      	bcs.n	800681e <_PrintUnsigned+0xae>
        break;
 800681c:	e005      	b.n	800682a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006828:	e7e8      	b.n	80067fc <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006832:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006842:	4a15      	ldr	r2, [pc, #84]	@ (8006898 <_PrintUnsigned+0x128>)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff ff13 	bl	8006678 <_StoreChar>
    Digit /= Base;
 8006852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	fbb2 f3f3 	udiv	r3, r2, r3
 800685a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e3      	bne.n	800682a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d011      	beq.n	8006890 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00e      	beq.n	8006890 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006872:	e006      	b.n	8006882 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	3b01      	subs	r3, #1
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800687a:	2120      	movs	r1, #32
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff fefb 	bl	8006678 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <_PrintUnsigned+0x120>
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	429a      	cmp	r2, r3
 800688e:	d3f1      	bcc.n	8006874 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006890:	bf00      	nop
 8006892:	3728      	adds	r7, #40	@ 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	0800a94c 	.word	0x0800a94c

0800689c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfb8      	it	lt
 80068b0:	425b      	neglt	r3, r3
 80068b2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80068b8:	e007      	b.n	80068ca <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	fb92 f3f3 	sdiv	r3, r2, r3
 80068c2:	613b      	str	r3, [r7, #16]
    Width++;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3301      	adds	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	daf3      	bge.n	80068ba <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d901      	bls.n	80068de <_PrintInt+0x42>
    Width = NumDigits;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <_PrintInt+0x5e>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	db04      	blt.n	80068f4 <_PrintInt+0x58>
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <_PrintInt+0x5e>
    FieldWidth--;
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <_PrintInt+0x6e>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <_PrintInt+0x9c>
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d111      	bne.n	8006938 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800691a:	e006      	b.n	800692a <_PrintInt+0x8e>
        FieldWidth--;
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	3b01      	subs	r3, #1
 8006920:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006922:	2120      	movs	r1, #32
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fea7 	bl	8006678 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <_PrintInt+0x9c>
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	429a      	cmp	r2, r3
 8006936:	d3f1      	bcc.n	800691c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da07      	bge.n	800694e <_PrintInt+0xb2>
    v = -v;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	425b      	negs	r3, r3
 8006942:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006944:	212d      	movs	r1, #45	@ 0x2d
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff fe96 	bl	8006678 <_StoreChar>
 800694c:	e008      	b.n	8006960 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006958:	212b      	movs	r1, #43	@ 0x2b
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff fe8c 	bl	8006678 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d019      	beq.n	800699e <_PrintInt+0x102>
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d114      	bne.n	800699e <_PrintInt+0x102>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d111      	bne.n	800699e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006980:	e006      	b.n	8006990 <_PrintInt+0xf4>
        FieldWidth--;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	3b01      	subs	r3, #1
 8006986:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006988:	2130      	movs	r1, #48	@ 0x30
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fe74 	bl	8006678 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <_PrintInt+0x102>
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	429a      	cmp	r2, r3
 800699c:	d3f1      	bcc.n	8006982 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fedf 	bl	8006770 <_PrintUnsigned>
}
 80069b2:	bf00      	nop
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b098      	sub	sp, #96	@ 0x60
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069c8:	f3ef 8311 	mrs	r3, BASEPRI
 80069cc:	f04f 0120 	mov.w	r1, #32
 80069d0:	f381 8811 	msr	BASEPRI, r1
 80069d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069d6:	48b7      	ldr	r0, [pc, #732]	@ (8006cb4 <_VPrintTarget+0x2f8>)
 80069d8:	f7ff fbf0 	bl	80061bc <_PreparePacket>
 80069dc:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80069de:	4bb5      	ldr	r3, [pc, #724]	@ (8006cb4 <_VPrintTarget+0x2f8>)
 80069e0:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80069e2:	2300      	movs	r3, #0
 80069e4:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	3301      	adds	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006a02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 81a8 	beq.w	8006d5c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a10:	2b25      	cmp	r3, #37	@ 0x25
 8006a12:	f040 8195 	bne.w	8006d40 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006a16:	2300      	movs	r3, #0
 8006a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006a26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a2a:	3b23      	subs	r3, #35	@ 0x23
 8006a2c:	2b0d      	cmp	r3, #13
 8006a2e:	d83f      	bhi.n	8006ab0 <_VPrintTarget+0xf4>
 8006a30:	a201      	add	r2, pc, #4	@ (adr r2, 8006a38 <_VPrintTarget+0x7c>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006ab1 	.word	0x08006ab1
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006ab1 	.word	0x08006ab1
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	08006ab1 	.word	0x08006ab1
 8006a58:	08006a91 	.word	0x08006a91
 8006a5c:	08006ab1 	.word	0x08006ab1
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006ab1 	.word	0x08006ab1
 8006a68:	08006ab1 	.word	0x08006ab1
 8006a6c:	08006a81 	.word	0x08006a81
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e01a      	b.n	8006ab6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a82:	f043 0302 	orr.w	r3, r3, #2
 8006a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	e012      	b.n	8006ab6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e00a      	b.n	8006ab6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa2:	f043 0308 	orr.w	r3, r3, #8
 8006aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e002      	b.n	8006ab6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ab4:	bf00      	nop
        }
      } while (v);
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1b0      	bne.n	8006a1e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006abc:	2300      	movs	r3, #0
 8006abe:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006acc:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ace:	d912      	bls.n	8006af6 <_VPrintTarget+0x13a>
 8006ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ad4:	2b39      	cmp	r3, #57	@ 0x39
 8006ad6:	d80e      	bhi.n	8006af6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aee:	4413      	add	r3, r2
 8006af0:	3b30      	subs	r3, #48	@ 0x30
 8006af2:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006af4:	e7e4      	b.n	8006ac0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006af6:	2300      	movs	r3, #0
 8006af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006b02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b06:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b08:	d11d      	bne.n	8006b46 <_VPrintTarget+0x18a>
        sFormat++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006b18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b1e:	d912      	bls.n	8006b46 <_VPrintTarget+0x18a>
 8006b20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b24:	2b39      	cmp	r3, #57	@ 0x39
 8006b26:	d80e      	bhi.n	8006b46 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006b2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b3e:	4413      	add	r3, r2
 8006b40:	3b30      	subs	r3, #48	@ 0x30
 8006b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006b44:	e7e4      	b.n	8006b10 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006b4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b52:	2b6c      	cmp	r3, #108	@ 0x6c
 8006b54:	d003      	beq.n	8006b5e <_VPrintTarget+0x1a2>
 8006b56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b5a:	2b68      	cmp	r3, #104	@ 0x68
 8006b5c:	d107      	bne.n	8006b6e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006b6c:	e7ef      	b.n	8006b4e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b72:	2b25      	cmp	r3, #37	@ 0x25
 8006b74:	f000 80d8 	beq.w	8006d28 <_VPrintTarget+0x36c>
 8006b78:	2b25      	cmp	r3, #37	@ 0x25
 8006b7a:	f2c0 80dc 	blt.w	8006d36 <_VPrintTarget+0x37a>
 8006b7e:	2b78      	cmp	r3, #120	@ 0x78
 8006b80:	f300 80d9 	bgt.w	8006d36 <_VPrintTarget+0x37a>
 8006b84:	2b58      	cmp	r3, #88	@ 0x58
 8006b86:	f2c0 80d6 	blt.w	8006d36 <_VPrintTarget+0x37a>
 8006b8a:	3b58      	subs	r3, #88	@ 0x58
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	f200 80d2 	bhi.w	8006d36 <_VPrintTarget+0x37a>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <_VPrintTarget+0x1dc>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006c8f 	.word	0x08006c8f
 8006b9c:	08006d37 	.word	0x08006d37
 8006ba0:	08006d37 	.word	0x08006d37
 8006ba4:	08006d37 	.word	0x08006d37
 8006ba8:	08006d37 	.word	0x08006d37
 8006bac:	08006d37 	.word	0x08006d37
 8006bb0:	08006d37 	.word	0x08006d37
 8006bb4:	08006d37 	.word	0x08006d37
 8006bb8:	08006d37 	.word	0x08006d37
 8006bbc:	08006d37 	.word	0x08006d37
 8006bc0:	08006d37 	.word	0x08006d37
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c43 	.word	0x08006c43
 8006bcc:	08006d37 	.word	0x08006d37
 8006bd0:	08006d37 	.word	0x08006d37
 8006bd4:	08006d37 	.word	0x08006d37
 8006bd8:	08006d37 	.word	0x08006d37
 8006bdc:	08006d37 	.word	0x08006d37
 8006be0:	08006d37 	.word	0x08006d37
 8006be4:	08006d37 	.word	0x08006d37
 8006be8:	08006d37 	.word	0x08006d37
 8006bec:	08006d37 	.word	0x08006d37
 8006bf0:	08006d37 	.word	0x08006d37
 8006bf4:	08006d37 	.word	0x08006d37
 8006bf8:	08006d03 	.word	0x08006d03
 8006bfc:	08006d37 	.word	0x08006d37
 8006c00:	08006d37 	.word	0x08006d37
 8006c04:	08006cb9 	.word	0x08006cb9
 8006c08:	08006d37 	.word	0x08006d37
 8006c0c:	08006c69 	.word	0x08006c69
 8006c10:	08006d37 	.word	0x08006d37
 8006c14:	08006d37 	.word	0x08006d37
 8006c18:	08006c8f 	.word	0x08006c8f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	1d19      	adds	r1, r3, #4
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006c30:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006c34:	f107 0310 	add.w	r3, r7, #16
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fd1c 	bl	8006678 <_StoreChar>
        break;
 8006c40:	e07a      	b.n	8006d38 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	1d19      	adds	r1, r3, #4
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6011      	str	r1, [r2, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006c50:	f107 0010 	add.w	r0, r7, #16
 8006c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5e:	220a      	movs	r2, #10
 8006c60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c62:	f7ff fe1b 	bl	800689c <_PrintInt>
        break;
 8006c66:	e067      	b.n	8006d38 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	1d19      	adds	r1, r3, #4
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006c76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c78:	f107 0010 	add.w	r0, r7, #16
 8006c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c86:	220a      	movs	r2, #10
 8006c88:	f7ff fd72 	bl	8006770 <_PrintUnsigned>
        break;
 8006c8c:	e054      	b.n	8006d38 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	1d19      	adds	r1, r3, #4
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6011      	str	r1, [r2, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006c9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c9e:	f107 0010 	add.w	r0, r7, #16
 8006ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cac:	2210      	movs	r2, #16
 8006cae:	f7ff fd5f 	bl	8006770 <_PrintUnsigned>
        break;
 8006cb2:	e041      	b.n	8006d38 <_VPrintTarget+0x37c>
 8006cb4:	2000c190 	.word	0x2000c190
      case 's':
        s = va_arg(*pParamList, const char*);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <_VPrintTarget+0x314>
          s = "(null)";
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8006df8 <_VPrintTarget+0x43c>)
 8006cce:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cda:	3301      	adds	r3, #1
 8006cdc:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006cde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006ce6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006cea:	f107 0310 	add.w	r3, r7, #16
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fcc1 	bl	8006678 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cfa:	d9e9      	bls.n	8006cd0 <_VPrintTarget+0x314>
        break;
 8006cfc:	e01c      	b.n	8006d38 <_VPrintTarget+0x37c>
            break;
 8006cfe:	bf00      	nop
        break;
 8006d00:	e01a      	b.n	8006d38 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	1d19      	adds	r1, r3, #4
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6011      	str	r1, [r2, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006d10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d12:	f107 0010 	add.w	r0, r7, #16
 8006d16:	2300      	movs	r3, #0
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2308      	movs	r3, #8
 8006d20:	2210      	movs	r2, #16
 8006d22:	f7ff fd25 	bl	8006770 <_PrintUnsigned>
        break;
 8006d26:	e007      	b.n	8006d38 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006d28:	f107 0310 	add.w	r3, r7, #16
 8006d2c:	2125      	movs	r1, #37	@ 0x25
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fca2 	bl	8006678 <_StoreChar>
        break;
 8006d34:	e000      	b.n	8006d38 <_VPrintTarget+0x37c>
      default:
        break;
 8006d36:	bf00      	nop
      }
      sFormat++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e007      	b.n	8006d50 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006d40:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fc94 	bl	8006678 <_StoreChar>
    }
  } while (*sFormat);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f47f ae4d 	bne.w	80069f4 <_VPrintTarget+0x38>
 8006d5a:	e000      	b.n	8006d5e <_VPrintTarget+0x3a2>
      break;
 8006d5c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d041      	beq.n	8006de8 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006d64:	6a3a      	ldr	r2, [r7, #32]
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d74:	e00b      	b.n	8006d8e <_VPrintTarget+0x3d2>
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7c:	1c59      	adds	r1, r3, #1
 8006d7e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006d80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	09db      	lsrs	r3, r3, #7
 8006d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d92:	d8f0      	bhi.n	8006d76 <_VPrintTarget+0x3ba>
 8006d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da2:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da8:	2300      	movs	r3, #0
 8006daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dac:	e00b      	b.n	8006dc6 <_VPrintTarget+0x40a>
 8006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	6379      	str	r1, [r7, #52]	@ 0x34
 8006db8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	09db      	lsrs	r3, r3, #7
 8006dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dca:	d8f0      	bhi.n	8006dae <_VPrintTarget+0x3f2>
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dda:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	6979      	ldr	r1, [r7, #20]
 8006de0:	221a      	movs	r2, #26
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff fad8 	bl	8006398 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dea:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006dee:	bf00      	nop
 8006df0:	3758      	adds	r7, #88	@ 0x58
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	0800a8f4 	.word	0x0800a8f4

08006dfc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006e10:	4917      	ldr	r1, [pc, #92]	@ (8006e70 <SEGGER_SYSVIEW_Init+0x74>)
 8006e12:	4818      	ldr	r0, [pc, #96]	@ (8006e74 <SEGGER_SYSVIEW_Init+0x78>)
 8006e14:	f7ff f8d2 	bl	8005fbc <SEGGER_RTT_AllocUpBuffer>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	4b16      	ldr	r3, [pc, #88]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e1e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006e20:	4b15      	ldr	r3, [pc, #84]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e22:	785a      	ldrb	r2, [r3, #1]
 8006e24:	4b14      	ldr	r3, [pc, #80]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e26:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006e28:	4b13      	ldr	r3, [pc, #76]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e2a:	7e1b      	ldrb	r3, [r3, #24]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	2308      	movs	r3, #8
 8006e34:	4a11      	ldr	r2, [pc, #68]	@ (8006e7c <SEGGER_SYSVIEW_Init+0x80>)
 8006e36:	490f      	ldr	r1, [pc, #60]	@ (8006e74 <SEGGER_SYSVIEW_Init+0x78>)
 8006e38:	f7ff f944 	bl	80060c4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006e42:	4b0f      	ldr	r3, [pc, #60]	@ (8006e80 <SEGGER_SYSVIEW_Init+0x84>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e48:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006e50:	4a09      	ldr	r2, [pc, #36]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006e56:	4a08      	ldr	r2, [pc, #32]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006e5c:	4a06      	ldr	r2, [pc, #24]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006e62:	4b05      	ldr	r3, [pc, #20]	@ (8006e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20008158 	.word	0x20008158
 8006e74:	0800a8fc 	.word	0x0800a8fc
 8006e78:	2000c160 	.word	0x2000c160
 8006e7c:	2000c158 	.word	0x2000c158
 8006e80:	e0001004 	.word	0xe0001004

08006e84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006e8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ea0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6113      	str	r3, [r2, #16]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2000c160 	.word	0x2000c160

08006ea4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006eac:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb0:	f04f 0120 	mov.w	r1, #32
 8006eb4:	f381 8811 	msr	BASEPRI, r1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	4808      	ldr	r0, [pc, #32]	@ (8006edc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006ebc:	f7ff f97e 	bl	80061bc <_PreparePacket>
 8006ec0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	68b8      	ldr	r0, [r7, #8]
 8006ec8:	f7ff fa66 	bl	8006398 <_SendPacket>
  RECORD_END();
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f383 8811 	msr	BASEPRI, r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000c190 	.word	0x2000c190

08006ee0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006eea:	f3ef 8311 	mrs	r3, BASEPRI
 8006eee:	f04f 0120 	mov.w	r1, #32
 8006ef2:	f381 8811 	msr	BASEPRI, r1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	4816      	ldr	r0, [pc, #88]	@ (8006f54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006efa:	f7ff f95f 	bl	80061bc <_PreparePacket>
 8006efe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	e00b      	b.n	8006f26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	1c59      	adds	r1, r3, #1
 8006f16:	61f9      	str	r1, [r7, #28]
 8006f18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	09db      	lsrs	r3, r3, #7
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f2a:	d8f0      	bhi.n	8006f0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	61fa      	str	r2, [r7, #28]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	6938      	ldr	r0, [r7, #16]
 8006f42:	f7ff fa29 	bl	8006398 <_SendPacket>
  RECORD_END();
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f383 8811 	msr	BASEPRI, r3
}
 8006f4c:	bf00      	nop
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000c190 	.word	0x2000c190

08006f58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	@ 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f64:	f3ef 8311 	mrs	r3, BASEPRI
 8006f68:	f04f 0120 	mov.w	r1, #32
 8006f6c:	f381 8811 	msr	BASEPRI, r1
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	4825      	ldr	r0, [pc, #148]	@ (8007008 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006f74:	f7ff f922 	bl	80061bc <_PreparePacket>
 8006f78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f86:	e00b      	b.n	8006fa0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9c:	09db      	lsrs	r3, r3, #7
 8006f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fa4:	d8f0      	bhi.n	8006f88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	623b      	str	r3, [r7, #32]
 8006fbe:	e00b      	b.n	8006fd8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006fca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	09db      	lsrs	r3, r3, #7
 8006fd6:	623b      	str	r3, [r7, #32]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fdc:	d8f0      	bhi.n	8006fc0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	6979      	ldr	r1, [r7, #20]
 8006ff2:	69b8      	ldr	r0, [r7, #24]
 8006ff4:	f7ff f9d0 	bl	8006398 <_SendPacket>
  RECORD_END();
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
 8007000:	3730      	adds	r7, #48	@ 0x30
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000c190 	.word	0x2000c190

0800700c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	@ 0x38
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800701a:	f3ef 8311 	mrs	r3, BASEPRI
 800701e:	f04f 0120 	mov.w	r1, #32
 8007022:	f381 8811 	msr	BASEPRI, r1
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	4832      	ldr	r0, [pc, #200]	@ (80070f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800702a:	f7ff f8c7 	bl	80061bc <_PreparePacket>
 800702e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	633b      	str	r3, [r7, #48]	@ 0x30
 800703c:	e00b      	b.n	8007056 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	b2da      	uxtb	r2, r3
 8007042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007044:	1c59      	adds	r1, r3, #1
 8007046:	6379      	str	r1, [r7, #52]	@ 0x34
 8007048:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	09db      	lsrs	r3, r3, #7
 8007054:	633b      	str	r3, [r7, #48]	@ 0x30
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	2b7f      	cmp	r3, #127	@ 0x7f
 800705a:	d8f0      	bhi.n	800703e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	637a      	str	r2, [r7, #52]	@ 0x34
 8007062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007074:	e00b      	b.n	800708e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	b2da      	uxtb	r2, r3
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007080:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	09db      	lsrs	r3, r3, #7
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	2b7f      	cmp	r3, #127	@ 0x7f
 8007092:	d8f0      	bhi.n	8007076 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800709a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	623b      	str	r3, [r7, #32]
 80070ac:	e00b      	b.n	80070c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	1c59      	adds	r1, r3, #1
 80070b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80070b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	09db      	lsrs	r3, r3, #7
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ca:	d8f0      	bhi.n	80070ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	6979      	ldr	r1, [r7, #20]
 80070e0:	69b8      	ldr	r0, [r7, #24]
 80070e2:	f7ff f959 	bl	8006398 <_SendPacket>
  RECORD_END();
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f383 8811 	msr	BASEPRI, r3
}
 80070ec:	bf00      	nop
 80070ee:	3738      	adds	r7, #56	@ 0x38
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	2000c190 	.word	0x2000c190

080070f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b090      	sub	sp, #64	@ 0x40
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007106:	f3ef 8311 	mrs	r3, BASEPRI
 800710a:	f04f 0120 	mov.w	r1, #32
 800710e:	f381 8811 	msr	BASEPRI, r1
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	4840      	ldr	r0, [pc, #256]	@ (8007218 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007116:	f7ff f851 	bl	80061bc <_PreparePacket>
 800711a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007128:	e00b      	b.n	8007142 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007134:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	09db      	lsrs	r3, r3, #7
 8007140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	2b7f      	cmp	r3, #127	@ 0x7f
 8007146:	d8f0      	bhi.n	800712a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800714e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007156:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007160:	e00b      	b.n	800717a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	b2da      	uxtb	r2, r3
 8007166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007168:	1c59      	adds	r1, r3, #1
 800716a:	6379      	str	r1, [r7, #52]	@ 0x34
 800716c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	09db      	lsrs	r3, r3, #7
 8007178:	633b      	str	r3, [r7, #48]	@ 0x30
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	2b7f      	cmp	r3, #127	@ 0x7f
 800717e:	d8f0      	bhi.n	8007162 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	637a      	str	r2, [r7, #52]	@ 0x34
 8007186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007198:	e00b      	b.n	80071b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	b2da      	uxtb	r2, r3
 800719e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a0:	1c59      	adds	r1, r3, #1
 80071a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80071a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	09db      	lsrs	r3, r3, #7
 80071b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80071b6:	d8f0      	bhi.n	800719a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80071cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ce:	623b      	str	r3, [r7, #32]
 80071d0:	e00b      	b.n	80071ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	1c59      	adds	r1, r3, #1
 80071da:	6279      	str	r1, [r7, #36]	@ 0x24
 80071dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	09db      	lsrs	r3, r3, #7
 80071e8:	623b      	str	r3, [r7, #32]
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ee:	d8f0      	bhi.n	80071d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f6:	6a3a      	ldr	r2, [r7, #32]
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	6979      	ldr	r1, [r7, #20]
 8007204:	69b8      	ldr	r0, [r7, #24]
 8007206:	f7ff f8c7 	bl	8006398 <_SendPacket>
  RECORD_END();
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f383 8811 	msr	BASEPRI, r3
}
 8007210:	bf00      	nop
 8007212:	3740      	adds	r7, #64	@ 0x40
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	2000c190 	.word	0x2000c190

0800721c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b08c      	sub	sp, #48	@ 0x30
 8007220:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007222:	4b59      	ldr	r3, [pc, #356]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007228:	f3ef 8311 	mrs	r3, BASEPRI
 800722c:	f04f 0120 	mov.w	r1, #32
 8007230:	f381 8811 	msr	BASEPRI, r1
 8007234:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007236:	4b54      	ldr	r3, [pc, #336]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	220a      	movs	r2, #10
 800723c:	4953      	ldr	r1, [pc, #332]	@ (800738c <SEGGER_SYSVIEW_Start+0x170>)
 800723e:	4618      	mov	r0, r3
 8007240:	f7f8 ffce 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800724a:	f7fe fb13 	bl	8005874 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800724e:	200a      	movs	r0, #10
 8007250:	f7ff fe28 	bl	8006ea4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007254:	f3ef 8311 	mrs	r3, BASEPRI
 8007258:	f04f 0120 	mov.w	r1, #32
 800725c:	f381 8811 	msr	BASEPRI, r1
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	484b      	ldr	r0, [pc, #300]	@ (8007390 <SEGGER_SYSVIEW_Start+0x174>)
 8007264:	f7fe ffaa 	bl	80061bc <_PreparePacket>
 8007268:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007272:	4b45      	ldr	r3, [pc, #276]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007278:	e00b      	b.n	8007292 <SEGGER_SYSVIEW_Start+0x76>
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	b2da      	uxtb	r2, r3
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	1c59      	adds	r1, r3, #1
 8007282:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007284:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	09db      	lsrs	r3, r3, #7
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007294:	2b7f      	cmp	r3, #127	@ 0x7f
 8007296:	d8f0      	bhi.n	800727a <SEGGER_SYSVIEW_Start+0x5e>
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800729e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ac:	4b36      	ldr	r3, [pc, #216]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	e00b      	b.n	80072cc <SEGGER_SYSVIEW_Start+0xb0>
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80072be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	09db      	lsrs	r3, r3, #7
 80072ca:	623b      	str	r3, [r7, #32]
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80072d0:	d8f0      	bhi.n	80072b4 <SEGGER_SYSVIEW_Start+0x98>
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	4b28      	ldr	r3, [pc, #160]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e00b      	b.n	8007306 <SEGGER_SYSVIEW_Start+0xea>
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	1c59      	adds	r1, r3, #1
 80072f6:	61f9      	str	r1, [r7, #28]
 80072f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	09db      	lsrs	r3, r3, #7
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b7f      	cmp	r3, #127	@ 0x7f
 800730a:	d8f0      	bhi.n	80072ee <SEGGER_SYSVIEW_Start+0xd2>
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	61fa      	str	r2, [r7, #28]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e00b      	b.n	800733e <SEGGER_SYSVIEW_Start+0x122>
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	1c59      	adds	r1, r3, #1
 800732e:	6179      	str	r1, [r7, #20]
 8007330:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	09db      	lsrs	r3, r3, #7
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b7f      	cmp	r3, #127	@ 0x7f
 8007342:	d8f0      	bhi.n	8007326 <SEGGER_SYSVIEW_Start+0x10a>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	617a      	str	r2, [r7, #20]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007354:	2218      	movs	r2, #24
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff f81d 	bl	8006398 <_SendPacket>
      RECORD_END();
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007364:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800736c:	4b06      	ldr	r3, [pc, #24]	@ (8007388 <SEGGER_SYSVIEW_Start+0x16c>)
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007372:	f000 f9eb 	bl	800774c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007376:	f000 f9b1 	bl	80076dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800737a:	f000 fc8d 	bl	8007c98 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800737e:	bf00      	nop
 8007380:	3730      	adds	r7, #48	@ 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	2000c160 	.word	0x2000c160
 800738c:	0800a940 	.word	0x0800a940
 8007390:	2000c190 	.word	0x2000c190

08007394 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800739a:	f3ef 8311 	mrs	r3, BASEPRI
 800739e:	f04f 0120 	mov.w	r1, #32
 80073a2:	f381 8811 	msr	BASEPRI, r1
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	480b      	ldr	r0, [pc, #44]	@ (80073d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80073aa:	f7fe ff07 	bl	80061bc <_PreparePacket>
 80073ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80073b0:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <SEGGER_SYSVIEW_Stop+0x48>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80073b8:	220b      	movs	r2, #11
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6838      	ldr	r0, [r7, #0]
 80073be:	f7fe ffeb 	bl	8006398 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <SEGGER_SYSVIEW_Stop+0x48>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f383 8811 	msr	BASEPRI, r3
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000c190 	.word	0x2000c190
 80073dc:	2000c160 	.word	0x2000c160

080073e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	@ 0x30
 80073e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80073e6:	f3ef 8311 	mrs	r3, BASEPRI
 80073ea:	f04f 0120 	mov.w	r1, #32
 80073ee:	f381 8811 	msr	BASEPRI, r1
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	4845      	ldr	r0, [pc, #276]	@ (800750c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80073f6:	f7fe fee1 	bl	80061bc <_PreparePacket>
 80073fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007404:	4b42      	ldr	r3, [pc, #264]	@ (8007510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800740a:	e00b      	b.n	8007424 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	b2da      	uxtb	r2, r3
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	1c59      	adds	r1, r3, #1
 8007414:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007416:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	09db      	lsrs	r3, r3, #7
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	2b7f      	cmp	r3, #127	@ 0x7f
 8007428:	d8f0      	bhi.n	800740c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007430:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007438:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
 800743e:	4b34      	ldr	r3, [pc, #208]	@ (8007510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	623b      	str	r3, [r7, #32]
 8007444:	e00b      	b.n	800745e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	b2da      	uxtb	r2, r3
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	1c59      	adds	r1, r3, #1
 800744e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007450:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	09db      	lsrs	r3, r3, #7
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	2b7f      	cmp	r3, #127	@ 0x7f
 8007462:	d8f0      	bhi.n	8007446 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	627a      	str	r2, [r7, #36]	@ 0x24
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	4b25      	ldr	r3, [pc, #148]	@ (8007510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	e00b      	b.n	8007498 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	b2da      	uxtb	r2, r3
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	61f9      	str	r1, [r7, #28]
 800748a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	09db      	lsrs	r3, r3, #7
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b7f      	cmp	r3, #127	@ 0x7f
 800749c:	d8f0      	bhi.n	8007480 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	61fa      	str	r2, [r7, #28]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e00b      	b.n	80074d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	1c59      	adds	r1, r3, #1
 80074c0:	6179      	str	r1, [r7, #20]
 80074c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	09db      	lsrs	r3, r3, #7
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80074d4:	d8f0      	bhi.n	80074b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	617a      	str	r2, [r7, #20]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80074e6:	2218      	movs	r2, #24
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f7fe ff54 	bl	8006398 <_SendPacket>
  RECORD_END();
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80074f6:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80074fe:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	4798      	blx	r3
  }
}
 8007504:	bf00      	nop
 8007506:	3730      	adds	r7, #48	@ 0x30
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	2000c190 	.word	0x2000c190
 8007510:	2000c160 	.word	0x2000c160

08007514 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b092      	sub	sp, #72	@ 0x48
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800751c:	f3ef 8311 	mrs	r3, BASEPRI
 8007520:	f04f 0120 	mov.w	r1, #32
 8007524:	f381 8811 	msr	BASEPRI, r1
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	486a      	ldr	r0, [pc, #424]	@ (80076d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800752c:	f7fe fe46 	bl	80061bc <_PreparePacket>
 8007530:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	647b      	str	r3, [r7, #68]	@ 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b66      	ldr	r3, [pc, #408]	@ (80076d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	643b      	str	r3, [r7, #64]	@ 0x40
 8007546:	e00b      	b.n	8007560 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	6479      	str	r1, [r7, #68]	@ 0x44
 8007552:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800755c:	09db      	lsrs	r3, r3, #7
 800755e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007562:	2b7f      	cmp	r3, #127	@ 0x7f
 8007564:	d8f0      	bhi.n	8007548 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	647a      	str	r2, [r7, #68]	@ 0x44
 800756c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007574:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007580:	e00b      	b.n	800759a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007584:	b2da      	uxtb	r2, r3
 8007586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007588:	1c59      	adds	r1, r3, #1
 800758a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800758c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	09db      	lsrs	r3, r3, #7
 8007598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800759a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759c:	2b7f      	cmp	r3, #127	@ 0x7f
 800759e:	d8f0      	bhi.n	8007582 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80075a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80075a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7fe fdcf 	bl	800615c <_EncodeStr>
 80075be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80075c0:	2209      	movs	r2, #9
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	6938      	ldr	r0, [r7, #16]
 80075c6:	f7fe fee7 	bl	8006398 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4b40      	ldr	r3, [pc, #256]	@ (80076d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80075de:	e00b      	b.n	80075f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	1c59      	adds	r1, r3, #1
 80075e8:	6379      	str	r1, [r7, #52]	@ 0x34
 80075ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	09db      	lsrs	r3, r3, #7
 80075f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80075fc:	d8f0      	bhi.n	80075e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	637a      	str	r2, [r7, #52]	@ 0x34
 8007604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007618:	e00b      	b.n	8007632 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800761a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761c:	b2da      	uxtb	r2, r3
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	1c59      	adds	r1, r3, #1
 8007622:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007624:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	09db      	lsrs	r3, r3, #7
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	2b7f      	cmp	r3, #127	@ 0x7f
 8007636:	d8f0      	bhi.n	800761a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800763e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	e00b      	b.n	800766c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	b2da      	uxtb	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	1c59      	adds	r1, r3, #1
 800765c:	6279      	str	r1, [r7, #36]	@ 0x24
 800765e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	09db      	lsrs	r3, r3, #7
 800766a:	623b      	str	r3, [r7, #32]
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007670:	d8f0      	bhi.n	8007654 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	627a      	str	r2, [r7, #36]	@ 0x24
 8007678:	6a3a      	ldr	r2, [r7, #32]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e00b      	b.n	80076a6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	1c59      	adds	r1, r3, #1
 8007696:	61f9      	str	r1, [r7, #28]
 8007698:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	09db      	lsrs	r3, r3, #7
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80076aa:	d8f0      	bhi.n	800768e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	61fa      	str	r2, [r7, #28]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80076bc:	2215      	movs	r2, #21
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6938      	ldr	r0, [r7, #16]
 80076c2:	f7fe fe69 	bl	8006398 <_SendPacket>
  RECORD_END();
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f383 8811 	msr	BASEPRI, r3
}
 80076cc:	bf00      	nop
 80076ce:	3748      	adds	r7, #72	@ 0x48
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	2000c190 	.word	0x2000c190
 80076d8:	2000c160 	.word	0x2000c160

080076dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80076e0:	4b07      	ldr	r3, [pc, #28]	@ (8007700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80076e8:	4b05      	ldr	r3, [pc, #20]	@ (8007700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80076f2:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4798      	blx	r3
  }
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2000c160 	.word	0x2000c160

08007704 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800770c:	f3ef 8311 	mrs	r3, BASEPRI
 8007710:	f04f 0120 	mov.w	r1, #32
 8007714:	f381 8811 	msr	BASEPRI, r1
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	480b      	ldr	r0, [pc, #44]	@ (8007748 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800771c:	f7fe fd4e 	bl	80061bc <_PreparePacket>
 8007720:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007722:	2280      	movs	r2, #128	@ 0x80
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	6938      	ldr	r0, [r7, #16]
 8007728:	f7fe fd18 	bl	800615c <_EncodeStr>
 800772c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800772e:	220e      	movs	r2, #14
 8007730:	68f9      	ldr	r1, [r7, #12]
 8007732:	6938      	ldr	r0, [r7, #16]
 8007734:	f7fe fe30 	bl	8006398 <_SendPacket>
  RECORD_END();
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f383 8811 	msr	BASEPRI, r3
}
 800773e:	bf00      	nop
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000c190 	.word	0x2000c190

0800774c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800774c:	b590      	push	{r4, r7, lr}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007752:	4b15      	ldr	r3, [pc, #84]	@ (80077a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01a      	beq.n	8007790 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800775a:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d015      	beq.n	8007790 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007764:	4b10      	ldr	r3, [pc, #64]	@ (80077a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4798      	blx	r3
 800776c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007770:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	000a      	movs	r2, r1
 8007780:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007782:	4613      	mov	r3, r2
 8007784:	461a      	mov	r2, r3
 8007786:	4621      	mov	r1, r4
 8007788:	200d      	movs	r0, #13
 800778a:	f7ff fbe5 	bl	8006f58 <SEGGER_SYSVIEW_RecordU32x2>
 800778e:	e006      	b.n	800779e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007790:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	200c      	movs	r0, #12
 8007798:	f7ff fba2 	bl	8006ee0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd90      	pop	{r4, r7, pc}
 80077a6:	bf00      	nop
 80077a8:	2000c160 	.word	0x2000c160
 80077ac:	e0001004 	.word	0xe0001004

080077b0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077b6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ba:	f04f 0120 	mov.w	r1, #32
 80077be:	f381 8811 	msr	BASEPRI, r1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	4819      	ldr	r0, [pc, #100]	@ (800782c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80077c6:	f7fe fcf9 	bl	80061bc <_PreparePacket>
 80077ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80077d0:	4b17      	ldr	r3, [pc, #92]	@ (8007830 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	e00b      	b.n	80077fc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	1c59      	adds	r1, r3, #1
 80077ec:	6179      	str	r1, [r7, #20]
 80077ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	09db      	lsrs	r3, r3, #7
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007800:	d8f0      	bhi.n	80077e4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	617a      	str	r2, [r7, #20]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007812:	2202      	movs	r2, #2
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	68b8      	ldr	r0, [r7, #8]
 8007818:	f7fe fdbe 	bl	8006398 <_SendPacket>
  RECORD_END();
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f383 8811 	msr	BASEPRI, r3
}
 8007822:	bf00      	nop
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	2000c190 	.word	0x2000c190
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800783a:	f3ef 8311 	mrs	r3, BASEPRI
 800783e:	f04f 0120 	mov.w	r1, #32
 8007842:	f381 8811 	msr	BASEPRI, r1
 8007846:	607b      	str	r3, [r7, #4]
 8007848:	4807      	ldr	r0, [pc, #28]	@ (8007868 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800784a:	f7fe fcb7 	bl	80061bc <_PreparePacket>
 800784e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007850:	2203      	movs	r2, #3
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6838      	ldr	r0, [r7, #0]
 8007856:	f7fe fd9f 	bl	8006398 <_SendPacket>
  RECORD_END();
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f383 8811 	msr	BASEPRI, r3
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	2000c190 	.word	0x2000c190

0800786c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007872:	f3ef 8311 	mrs	r3, BASEPRI
 8007876:	f04f 0120 	mov.w	r1, #32
 800787a:	f381 8811 	msr	BASEPRI, r1
 800787e:	607b      	str	r3, [r7, #4]
 8007880:	4807      	ldr	r0, [pc, #28]	@ (80078a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007882:	f7fe fc9b 	bl	80061bc <_PreparePacket>
 8007886:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007888:	2212      	movs	r2, #18
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6838      	ldr	r0, [r7, #0]
 800788e:	f7fe fd83 	bl	8006398 <_SendPacket>
  RECORD_END();
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f383 8811 	msr	BASEPRI, r3
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	2000c190 	.word	0x2000c190

080078a4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078aa:	f3ef 8311 	mrs	r3, BASEPRI
 80078ae:	f04f 0120 	mov.w	r1, #32
 80078b2:	f381 8811 	msr	BASEPRI, r1
 80078b6:	607b      	str	r3, [r7, #4]
 80078b8:	4807      	ldr	r0, [pc, #28]	@ (80078d8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80078ba:	f7fe fc7f 	bl	80061bc <_PreparePacket>
 80078be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80078c0:	2211      	movs	r2, #17
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6838      	ldr	r0, [r7, #0]
 80078c6:	f7fe fd67 	bl	8006398 <_SendPacket>
  RECORD_END();
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f383 8811 	msr	BASEPRI, r3
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	2000c190 	.word	0x2000c190

080078dc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80078e4:	f3ef 8311 	mrs	r3, BASEPRI
 80078e8:	f04f 0120 	mov.w	r1, #32
 80078ec:	f381 8811 	msr	BASEPRI, r1
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	4819      	ldr	r0, [pc, #100]	@ (8007958 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80078f4:	f7fe fc62 	bl	80061bc <_PreparePacket>
 80078f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80078fe:	4b17      	ldr	r3, [pc, #92]	@ (800795c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	e00b      	b.n	800792a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	b2da      	uxtb	r2, r3
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	1c59      	adds	r1, r3, #1
 800791a:	61f9      	str	r1, [r7, #28]
 800791c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	09db      	lsrs	r3, r3, #7
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b7f      	cmp	r3, #127	@ 0x7f
 800792e:	d8f0      	bhi.n	8007912 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	61fa      	str	r2, [r7, #28]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007940:	2208      	movs	r2, #8
 8007942:	68f9      	ldr	r1, [r7, #12]
 8007944:	6938      	ldr	r0, [r7, #16]
 8007946:	f7fe fd27 	bl	8006398 <_SendPacket>
  RECORD_END();
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f383 8811 	msr	BASEPRI, r3
}
 8007950:	bf00      	nop
 8007952:	3720      	adds	r7, #32
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	2000c190 	.word	0x2000c190
 800795c:	2000c160 	.word	0x2000c160

08007960 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007960:	b580      	push	{r7, lr}
 8007962:	b088      	sub	sp, #32
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007968:	f3ef 8311 	mrs	r3, BASEPRI
 800796c:	f04f 0120 	mov.w	r1, #32
 8007970:	f381 8811 	msr	BASEPRI, r1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	4819      	ldr	r0, [pc, #100]	@ (80079dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007978:	f7fe fc20 	bl	80061bc <_PreparePacket>
 800797c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007982:	4b17      	ldr	r3, [pc, #92]	@ (80079e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e00b      	b.n	80079ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	b2da      	uxtb	r2, r3
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1c59      	adds	r1, r3, #1
 800799e:	61f9      	str	r1, [r7, #28]
 80079a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	09db      	lsrs	r3, r3, #7
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80079b2:	d8f0      	bhi.n	8007996 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	61fa      	str	r2, [r7, #28]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80079c4:	2204      	movs	r2, #4
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	6938      	ldr	r0, [r7, #16]
 80079ca:	f7fe fce5 	bl	8006398 <_SendPacket>
  RECORD_END();
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f383 8811 	msr	BASEPRI, r3
}
 80079d4:	bf00      	nop
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	2000c190 	.word	0x2000c190
 80079e0:	2000c160 	.word	0x2000c160

080079e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80079ec:	f3ef 8311 	mrs	r3, BASEPRI
 80079f0:	f04f 0120 	mov.w	r1, #32
 80079f4:	f381 8811 	msr	BASEPRI, r1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	4819      	ldr	r0, [pc, #100]	@ (8007a60 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80079fc:	f7fe fbde 	bl	80061bc <_PreparePacket>
 8007a00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	e00b      	b.n	8007a32 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	61f9      	str	r1, [r7, #28]
 8007a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	09db      	lsrs	r3, r3, #7
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a36:	d8f0      	bhi.n	8007a1a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	61fa      	str	r2, [r7, #28]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007a48:	2206      	movs	r2, #6
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	6938      	ldr	r0, [r7, #16]
 8007a4e:	f7fe fca3 	bl	8006398 <_SendPacket>
  RECORD_END();
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f383 8811 	msr	BASEPRI, r3
}
 8007a58:	bf00      	nop
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	2000c190 	.word	0x2000c190
 8007a64:	2000c160 	.word	0x2000c160

08007a68 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	@ 0x28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a72:	f3ef 8311 	mrs	r3, BASEPRI
 8007a76:	f04f 0120 	mov.w	r1, #32
 8007a7a:	f381 8811 	msr	BASEPRI, r1
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	4827      	ldr	r0, [pc, #156]	@ (8007b20 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007a82:	f7fe fb9b 	bl	80061bc <_PreparePacket>
 8007a86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a8c:	4b25      	ldr	r3, [pc, #148]	@ (8007b24 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	e00b      	b.n	8007ab8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	1c59      	adds	r1, r3, #1
 8007aa8:	6279      	str	r1, [r7, #36]	@ 0x24
 8007aaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	09db      	lsrs	r3, r3, #7
 8007ab6:	623b      	str	r3, [r7, #32]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	2b7f      	cmp	r3, #127	@ 0x7f
 8007abc:	d8f0      	bhi.n	8007aa0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	e00b      	b.n	8007af0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	1c59      	adds	r1, r3, #1
 8007ae0:	61f9      	str	r1, [r7, #28]
 8007ae2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	09db      	lsrs	r3, r3, #7
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007af4:	d8f0      	bhi.n	8007ad8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	61fa      	str	r2, [r7, #28]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007b06:	2207      	movs	r2, #7
 8007b08:	68f9      	ldr	r1, [r7, #12]
 8007b0a:	6938      	ldr	r0, [r7, #16]
 8007b0c:	f7fe fc44 	bl	8006398 <_SendPacket>
  RECORD_END();
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f383 8811 	msr	BASEPRI, r3
}
 8007b16:	bf00      	nop
 8007b18:	3728      	adds	r7, #40	@ 0x28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000c190 	.word	0x2000c190
 8007b24:	2000c160 	.word	0x2000c160

08007b28 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007b30:	4b04      	ldr	r3, [pc, #16]	@ (8007b44 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	1ad3      	subs	r3, r2, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	2000c160 	.word	0x2000c160

08007b48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08c      	sub	sp, #48	@ 0x30
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007b52:	4b40      	ldr	r3, [pc, #256]	@ (8007c54 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d077      	beq.n	8007c4a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c54 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007b60:	2300      	movs	r3, #0
 8007b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b64:	e008      	b.n	8007b78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	3301      	adds	r3, #1
 8007b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d3f2      	bcc.n	8007b66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007b80:	e000      	b.n	8007b84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007b82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d055      	beq.n	8007c36 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b8e:	f04f 0120 	mov.w	r1, #32
 8007b92:	f381 8811 	msr	BASEPRI, r1
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	482f      	ldr	r0, [pc, #188]	@ (8007c58 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007b9a:	f7fe fb0f 	bl	80061bc <_PreparePacket>
 8007b9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	623b      	str	r3, [r7, #32]
 8007bac:	e00b      	b.n	8007bc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	1c59      	adds	r1, r3, #1
 8007bb6:	6279      	str	r1, [r7, #36]	@ 0x24
 8007bb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	701a      	strb	r2, [r3, #0]
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	09db      	lsrs	r3, r3, #7
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bca:	d8f0      	bhi.n	8007bae <SEGGER_SYSVIEW_SendModule+0x66>
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	e00b      	b.n	8007c00 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	61f9      	str	r1, [r7, #28]
 8007bf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	09db      	lsrs	r3, r3, #7
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c04:	d8f0      	bhi.n	8007be8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	61fa      	str	r2, [r7, #28]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2280      	movs	r2, #128	@ 0x80
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7fe fa9c 	bl	800615c <_EncodeStr>
 8007c24:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007c26:	2216      	movs	r2, #22
 8007c28:	68f9      	ldr	r1, [r7, #12]
 8007c2a:	6938      	ldr	r0, [r7, #16]
 8007c2c:	f7fe fbb4 	bl	8006398 <_SendPacket>
      RECORD_END();
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <SEGGER_SYSVIEW_SendModule+0x102>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	4798      	blx	r3
    }
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3730      	adds	r7, #48	@ 0x30
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	2000c188 	.word	0x2000c188
 8007c58:	2000c190 	.word	0x2000c190

08007c5c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007c62:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f2      	bne.n	8007c70 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	2000c188 	.word	0x2000c188

08007c98 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8007ca2:	f04f 0120 	mov.w	r1, #32
 8007ca6:	f381 8811 	msr	BASEPRI, r1
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	4817      	ldr	r0, [pc, #92]	@ (8007d0c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007cae:	f7fe fa85 	bl	80061bc <_PreparePacket>
 8007cb2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	4b14      	ldr	r3, [pc, #80]	@ (8007d10 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	e00b      	b.n	8007cdc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	1c59      	adds	r1, r3, #1
 8007ccc:	6179      	str	r1, [r7, #20]
 8007cce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	09db      	lsrs	r3, r3, #7
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ce0:	d8f0      	bhi.n	8007cc4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	617a      	str	r2, [r7, #20]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007cf2:	221b      	movs	r2, #27
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	68b8      	ldr	r0, [r7, #8]
 8007cf8:	f7fe fb4e 	bl	8006398 <_SendPacket>
  RECORD_END();
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f383 8811 	msr	BASEPRI, r3
}
 8007d02:	bf00      	nop
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	2000c190 	.word	0x2000c190
 8007d10:	2000c18c 	.word	0x2000c18c

08007d14 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007d14:	b40f      	push	{r0, r1, r2, r3}
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	461a      	mov	r2, r3
 8007d26:	2100      	movs	r1, #0
 8007d28:	6938      	ldr	r0, [r7, #16]
 8007d2a:	f7fe fe47 	bl	80069bc <_VPrintTarget>
  va_end(ParamList);
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d38:	b004      	add	sp, #16
 8007d3a:	4770      	bx	lr

08007d3c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	@ 0x28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d44:	f3ef 8311 	mrs	r3, BASEPRI
 8007d48:	f04f 0120 	mov.w	r1, #32
 8007d4c:	f381 8811 	msr	BASEPRI, r1
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	4827      	ldr	r0, [pc, #156]	@ (8007df0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007d54:	f7fe fa32 	bl	80061bc <_PreparePacket>
 8007d58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d5a:	2280      	movs	r2, #128	@ 0x80
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	6938      	ldr	r0, [r7, #16]
 8007d60:	f7fe f9fc 	bl	800615c <_EncodeStr>
 8007d64:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	e00b      	b.n	8007d88 <SEGGER_SYSVIEW_Warn+0x4c>
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	6279      	str	r1, [r7, #36]	@ 0x24
 8007d7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	09db      	lsrs	r3, r3, #7
 8007d86:	623b      	str	r3, [r7, #32]
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d8c:	d8f0      	bhi.n	8007d70 <SEGGER_SYSVIEW_Warn+0x34>
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d94:	6a3a      	ldr	r2, [r7, #32]
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	61fb      	str	r3, [r7, #28]
 8007da2:	2300      	movs	r3, #0
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	e00b      	b.n	8007dc0 <SEGGER_SYSVIEW_Warn+0x84>
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	61f9      	str	r1, [r7, #28]
 8007db2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	09db      	lsrs	r3, r3, #7
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dc4:	d8f0      	bhi.n	8007da8 <SEGGER_SYSVIEW_Warn+0x6c>
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	61fa      	str	r2, [r7, #28]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007dd6:	221a      	movs	r2, #26
 8007dd8:	68f9      	ldr	r1, [r7, #12]
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f7fe fadc 	bl	8006398 <_SendPacket>
  RECORD_END();
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f383 8811 	msr	BASEPRI, r3
}
 8007de6:	bf00      	nop
 8007de8:	3728      	adds	r7, #40	@ 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	2000c190 	.word	0x2000c190

08007df4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007df8:	4b13      	ldr	r3, [pc, #76]	@ (8007e48 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007dfa:	7e1b      	ldrb	r3, [r3, #24]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4a13      	ldr	r2, [pc, #76]	@ (8007e4c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e00:	460b      	mov	r3, r1
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	440b      	add	r3, r1
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	336c      	adds	r3, #108	@ 0x6c
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e10:	7e1b      	ldrb	r3, [r3, #24]
 8007e12:	4618      	mov	r0, r3
 8007e14:	490d      	ldr	r1, [pc, #52]	@ (8007e4c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e16:	4603      	mov	r3, r0
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	4403      	add	r3, r0
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	440b      	add	r3, r1
 8007e20:	3370      	adds	r3, #112	@ 0x70
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d00b      	beq.n	8007e40 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007e28:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d107      	bne.n	8007e40 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007e30:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007e36:	f7fe f9cd 	bl	80061d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007e3a:	4b03      	ldr	r3, [pc, #12]	@ (8007e48 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007e40:	4b01      	ldr	r3, [pc, #4]	@ (8007e48 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	2000c160 	.word	0x2000c160
 8007e4c:	20007ca0 	.word	0x20007ca0

08007e50 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e98 <ITM_SendChar+0x48>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007e98 <ITM_SendChar+0x48>)
 8007e60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e64:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <ITM_SendChar+0x4c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e9c <ITM_SendChar+0x4c>)
 8007e6c:	f043 0301 	orr.w	r3, r3, #1
 8007e70:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8007e72:	bf00      	nop
 8007e74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0f8      	beq.n	8007e74 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8007e82:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	6013      	str	r3, [r2, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	e000edfc 	.word	0xe000edfc
 8007e9c:	e0000e00 	.word	0xe0000e00

08007ea0 <_write_r>:
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f7fe f85c 	bl	8005f70 <SEGGER_RTT_Write>

  // Convertir el puntero a tipo const char* para manejar los datos correctamente
  const char *dataPtr = (const char *)ptr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	613b      	str	r3, [r7, #16]

  // Iterar por los datos y enviarlos usando ITM_SendChar
  for (size_t DataIdx = 0; DataIdx < len; DataIdx++) {
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e009      	b.n	8007ed6 <_write_r+0x36>
    ITM_SendChar(dataPtr[DataIdx]); // Enviar un carácter
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff ffc0 	bl	8007e50 <ITM_SendChar>
  for (size_t DataIdx = 0; DataIdx < len; DataIdx++) {
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d3f1      	bcc.n	8007ec2 <_write_r+0x22>
  }

  return len;
 8007ede:	683b      	ldr	r3, [r7, #0]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <__cvt>:
 8007ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eec:	ec57 6b10 	vmov	r6, r7, d0
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	bfbb      	ittet	lt
 8007efa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007efe:	461f      	movlt	r7, r3
 8007f00:	2300      	movge	r3, #0
 8007f02:	232d      	movlt	r3, #45	@ 0x2d
 8007f04:	700b      	strb	r3, [r1, #0]
 8007f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f0c:	4691      	mov	r9, r2
 8007f0e:	f023 0820 	bic.w	r8, r3, #32
 8007f12:	bfbc      	itt	lt
 8007f14:	4632      	movlt	r2, r6
 8007f16:	4616      	movlt	r6, r2
 8007f18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f1c:	d005      	beq.n	8007f2a <__cvt+0x42>
 8007f1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f22:	d100      	bne.n	8007f26 <__cvt+0x3e>
 8007f24:	3401      	adds	r4, #1
 8007f26:	2102      	movs	r1, #2
 8007f28:	e000      	b.n	8007f2c <__cvt+0x44>
 8007f2a:	2103      	movs	r1, #3
 8007f2c:	ab03      	add	r3, sp, #12
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	ab02      	add	r3, sp, #8
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	ec47 6b10 	vmov	d0, r6, r7
 8007f38:	4653      	mov	r3, sl
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	f000 fe44 	bl	8008bc8 <_dtoa_r>
 8007f40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f44:	4605      	mov	r5, r0
 8007f46:	d119      	bne.n	8007f7c <__cvt+0x94>
 8007f48:	f019 0f01 	tst.w	r9, #1
 8007f4c:	d00e      	beq.n	8007f6c <__cvt+0x84>
 8007f4e:	eb00 0904 	add.w	r9, r0, r4
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 fe0d 	bl	8000b78 <__aeabi_dcmpeq>
 8007f5e:	b108      	cbz	r0, 8007f64 <__cvt+0x7c>
 8007f60:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f64:	2230      	movs	r2, #48	@ 0x30
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	454b      	cmp	r3, r9
 8007f6a:	d31e      	bcc.n	8007faa <__cvt+0xc2>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f70:	1b5b      	subs	r3, r3, r5
 8007f72:	4628      	mov	r0, r5
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	b004      	add	sp, #16
 8007f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f80:	eb00 0904 	add.w	r9, r0, r4
 8007f84:	d1e5      	bne.n	8007f52 <__cvt+0x6a>
 8007f86:	7803      	ldrb	r3, [r0, #0]
 8007f88:	2b30      	cmp	r3, #48	@ 0x30
 8007f8a:	d10a      	bne.n	8007fa2 <__cvt+0xba>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fdf0 	bl	8000b78 <__aeabi_dcmpeq>
 8007f98:	b918      	cbnz	r0, 8007fa2 <__cvt+0xba>
 8007f9a:	f1c4 0401 	rsb	r4, r4, #1
 8007f9e:	f8ca 4000 	str.w	r4, [sl]
 8007fa2:	f8da 3000 	ldr.w	r3, [sl]
 8007fa6:	4499      	add	r9, r3
 8007fa8:	e7d3      	b.n	8007f52 <__cvt+0x6a>
 8007faa:	1c59      	adds	r1, r3, #1
 8007fac:	9103      	str	r1, [sp, #12]
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e7d9      	b.n	8007f66 <__cvt+0x7e>

08007fb2 <__exponent>:
 8007fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	bfba      	itte	lt
 8007fb8:	4249      	neglt	r1, r1
 8007fba:	232d      	movlt	r3, #45	@ 0x2d
 8007fbc:	232b      	movge	r3, #43	@ 0x2b
 8007fbe:	2909      	cmp	r1, #9
 8007fc0:	7002      	strb	r2, [r0, #0]
 8007fc2:	7043      	strb	r3, [r0, #1]
 8007fc4:	dd29      	ble.n	800801a <__exponent+0x68>
 8007fc6:	f10d 0307 	add.w	r3, sp, #7
 8007fca:	461d      	mov	r5, r3
 8007fcc:	270a      	movs	r7, #10
 8007fce:	461a      	mov	r2, r3
 8007fd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007fd4:	fb07 1416 	mls	r4, r7, r6, r1
 8007fd8:	3430      	adds	r4, #48	@ 0x30
 8007fda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007fde:	460c      	mov	r4, r1
 8007fe0:	2c63      	cmp	r4, #99	@ 0x63
 8007fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	dcf1      	bgt.n	8007fce <__exponent+0x1c>
 8007fea:	3130      	adds	r1, #48	@ 0x30
 8007fec:	1e94      	subs	r4, r2, #2
 8007fee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ff2:	1c41      	adds	r1, r0, #1
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	42ab      	cmp	r3, r5
 8007ff8:	d30a      	bcc.n	8008010 <__exponent+0x5e>
 8007ffa:	f10d 0309 	add.w	r3, sp, #9
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	42ac      	cmp	r4, r5
 8008002:	bf88      	it	hi
 8008004:	2300      	movhi	r3, #0
 8008006:	3302      	adds	r3, #2
 8008008:	4403      	add	r3, r0
 800800a:	1a18      	subs	r0, r3, r0
 800800c:	b003      	add	sp, #12
 800800e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008010:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008014:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008018:	e7ed      	b.n	8007ff6 <__exponent+0x44>
 800801a:	2330      	movs	r3, #48	@ 0x30
 800801c:	3130      	adds	r1, #48	@ 0x30
 800801e:	7083      	strb	r3, [r0, #2]
 8008020:	70c1      	strb	r1, [r0, #3]
 8008022:	1d03      	adds	r3, r0, #4
 8008024:	e7f1      	b.n	800800a <__exponent+0x58>
	...

08008028 <_printf_float>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	b08d      	sub	sp, #52	@ 0x34
 800802e:	460c      	mov	r4, r1
 8008030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008034:	4616      	mov	r6, r2
 8008036:	461f      	mov	r7, r3
 8008038:	4605      	mov	r5, r0
 800803a:	f000 fcc9 	bl	80089d0 <_localeconv_r>
 800803e:	6803      	ldr	r3, [r0, #0]
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 f96c 	bl	8000320 <strlen>
 8008048:	2300      	movs	r3, #0
 800804a:	930a      	str	r3, [sp, #40]	@ 0x28
 800804c:	f8d8 3000 	ldr.w	r3, [r8]
 8008050:	9005      	str	r0, [sp, #20]
 8008052:	3307      	adds	r3, #7
 8008054:	f023 0307 	bic.w	r3, r3, #7
 8008058:	f103 0208 	add.w	r2, r3, #8
 800805c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008060:	f8d4 b000 	ldr.w	fp, [r4]
 8008064:	f8c8 2000 	str.w	r2, [r8]
 8008068:	e9d3 8900 	ldrd	r8, r9, [r3]
 800806c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008070:	9307      	str	r3, [sp, #28]
 8008072:	f8cd 8018 	str.w	r8, [sp, #24]
 8008076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800807a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807e:	4b9c      	ldr	r3, [pc, #624]	@ (80082f0 <_printf_float+0x2c8>)
 8008080:	f04f 32ff 	mov.w	r2, #4294967295
 8008084:	f7f8 fdaa 	bl	8000bdc <__aeabi_dcmpun>
 8008088:	bb70      	cbnz	r0, 80080e8 <_printf_float+0xc0>
 800808a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800808e:	4b98      	ldr	r3, [pc, #608]	@ (80082f0 <_printf_float+0x2c8>)
 8008090:	f04f 32ff 	mov.w	r2, #4294967295
 8008094:	f7f8 fd84 	bl	8000ba0 <__aeabi_dcmple>
 8008098:	bb30      	cbnz	r0, 80080e8 <_printf_float+0xc0>
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fd73 	bl	8000b8c <__aeabi_dcmplt>
 80080a6:	b110      	cbz	r0, 80080ae <_printf_float+0x86>
 80080a8:	232d      	movs	r3, #45	@ 0x2d
 80080aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ae:	4a91      	ldr	r2, [pc, #580]	@ (80082f4 <_printf_float+0x2cc>)
 80080b0:	4b91      	ldr	r3, [pc, #580]	@ (80082f8 <_printf_float+0x2d0>)
 80080b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80080b6:	bf8c      	ite	hi
 80080b8:	4690      	movhi	r8, r2
 80080ba:	4698      	movls	r8, r3
 80080bc:	2303      	movs	r3, #3
 80080be:	6123      	str	r3, [r4, #16]
 80080c0:	f02b 0304 	bic.w	r3, fp, #4
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	f04f 0900 	mov.w	r9, #0
 80080ca:	9700      	str	r7, [sp, #0]
 80080cc:	4633      	mov	r3, r6
 80080ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80080d0:	4621      	mov	r1, r4
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 f9d2 	bl	800847c <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	f040 808d 	bne.w	80081f8 <_printf_float+0x1d0>
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	b00d      	add	sp, #52	@ 0x34
 80080e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 fd74 	bl	8000bdc <__aeabi_dcmpun>
 80080f4:	b140      	cbz	r0, 8008108 <_printf_float+0xe0>
 80080f6:	464b      	mov	r3, r9
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfbc      	itt	lt
 80080fc:	232d      	movlt	r3, #45	@ 0x2d
 80080fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008102:	4a7e      	ldr	r2, [pc, #504]	@ (80082fc <_printf_float+0x2d4>)
 8008104:	4b7e      	ldr	r3, [pc, #504]	@ (8008300 <_printf_float+0x2d8>)
 8008106:	e7d4      	b.n	80080b2 <_printf_float+0x8a>
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800810e:	9206      	str	r2, [sp, #24]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	d13b      	bne.n	800818c <_printf_float+0x164>
 8008114:	2306      	movs	r3, #6
 8008116:	6063      	str	r3, [r4, #4]
 8008118:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800811c:	2300      	movs	r3, #0
 800811e:	6022      	str	r2, [r4, #0]
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	ab0a      	add	r3, sp, #40	@ 0x28
 8008124:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008128:	ab09      	add	r3, sp, #36	@ 0x24
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	ec49 8b10 	vmov	d0, r8, r9
 8008132:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008136:	4628      	mov	r0, r5
 8008138:	f7ff fed6 	bl	8007ee8 <__cvt>
 800813c:	9b06      	ldr	r3, [sp, #24]
 800813e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008140:	2b47      	cmp	r3, #71	@ 0x47
 8008142:	4680      	mov	r8, r0
 8008144:	d129      	bne.n	800819a <_printf_float+0x172>
 8008146:	1cc8      	adds	r0, r1, #3
 8008148:	db02      	blt.n	8008150 <_printf_float+0x128>
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	4299      	cmp	r1, r3
 800814e:	dd41      	ble.n	80081d4 <_printf_float+0x1ac>
 8008150:	f1aa 0a02 	sub.w	sl, sl, #2
 8008154:	fa5f fa8a 	uxtb.w	sl, sl
 8008158:	3901      	subs	r1, #1
 800815a:	4652      	mov	r2, sl
 800815c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008160:	9109      	str	r1, [sp, #36]	@ 0x24
 8008162:	f7ff ff26 	bl	8007fb2 <__exponent>
 8008166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008168:	1813      	adds	r3, r2, r0
 800816a:	2a01      	cmp	r2, #1
 800816c:	4681      	mov	r9, r0
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	dc02      	bgt.n	8008178 <_printf_float+0x150>
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	07d2      	lsls	r2, r2, #31
 8008176:	d501      	bpl.n	800817c <_printf_float+0x154>
 8008178:	3301      	adds	r3, #1
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0a2      	beq.n	80080ca <_printf_float+0xa2>
 8008184:	232d      	movs	r3, #45	@ 0x2d
 8008186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800818a:	e79e      	b.n	80080ca <_printf_float+0xa2>
 800818c:	9a06      	ldr	r2, [sp, #24]
 800818e:	2a47      	cmp	r2, #71	@ 0x47
 8008190:	d1c2      	bne.n	8008118 <_printf_float+0xf0>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1c0      	bne.n	8008118 <_printf_float+0xf0>
 8008196:	2301      	movs	r3, #1
 8008198:	e7bd      	b.n	8008116 <_printf_float+0xee>
 800819a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800819e:	d9db      	bls.n	8008158 <_printf_float+0x130>
 80081a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80081a4:	d118      	bne.n	80081d8 <_printf_float+0x1b0>
 80081a6:	2900      	cmp	r1, #0
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	dd0b      	ble.n	80081c4 <_printf_float+0x19c>
 80081ac:	6121      	str	r1, [r4, #16]
 80081ae:	b913      	cbnz	r3, 80081b6 <_printf_float+0x18e>
 80081b0:	6822      	ldr	r2, [r4, #0]
 80081b2:	07d0      	lsls	r0, r2, #31
 80081b4:	d502      	bpl.n	80081bc <_printf_float+0x194>
 80081b6:	3301      	adds	r3, #1
 80081b8:	440b      	add	r3, r1
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80081be:	f04f 0900 	mov.w	r9, #0
 80081c2:	e7db      	b.n	800817c <_printf_float+0x154>
 80081c4:	b913      	cbnz	r3, 80081cc <_printf_float+0x1a4>
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	07d2      	lsls	r2, r2, #31
 80081ca:	d501      	bpl.n	80081d0 <_printf_float+0x1a8>
 80081cc:	3302      	adds	r3, #2
 80081ce:	e7f4      	b.n	80081ba <_printf_float+0x192>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e7f2      	b.n	80081ba <_printf_float+0x192>
 80081d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80081d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081da:	4299      	cmp	r1, r3
 80081dc:	db05      	blt.n	80081ea <_printf_float+0x1c2>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	6121      	str	r1, [r4, #16]
 80081e2:	07d8      	lsls	r0, r3, #31
 80081e4:	d5ea      	bpl.n	80081bc <_printf_float+0x194>
 80081e6:	1c4b      	adds	r3, r1, #1
 80081e8:	e7e7      	b.n	80081ba <_printf_float+0x192>
 80081ea:	2900      	cmp	r1, #0
 80081ec:	bfd4      	ite	le
 80081ee:	f1c1 0202 	rsble	r2, r1, #2
 80081f2:	2201      	movgt	r2, #1
 80081f4:	4413      	add	r3, r2
 80081f6:	e7e0      	b.n	80081ba <_printf_float+0x192>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	055a      	lsls	r2, r3, #21
 80081fc:	d407      	bmi.n	800820e <_printf_float+0x1e6>
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	4642      	mov	r2, r8
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	d12b      	bne.n	8008264 <_printf_float+0x23c>
 800820c:	e767      	b.n	80080de <_printf_float+0xb6>
 800820e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008212:	f240 80dd 	bls.w	80083d0 <_printf_float+0x3a8>
 8008216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	f7f8 fcab 	bl	8000b78 <__aeabi_dcmpeq>
 8008222:	2800      	cmp	r0, #0
 8008224:	d033      	beq.n	800828e <_printf_float+0x266>
 8008226:	4a37      	ldr	r2, [pc, #220]	@ (8008304 <_printf_float+0x2dc>)
 8008228:	2301      	movs	r3, #1
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	f43f af54 	beq.w	80080de <_printf_float+0xb6>
 8008236:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800823a:	4543      	cmp	r3, r8
 800823c:	db02      	blt.n	8008244 <_printf_float+0x21c>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	07d8      	lsls	r0, r3, #31
 8008242:	d50f      	bpl.n	8008264 <_printf_float+0x23c>
 8008244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af45 	beq.w	80080de <_printf_float+0xb6>
 8008254:	f04f 0900 	mov.w	r9, #0
 8008258:	f108 38ff 	add.w	r8, r8, #4294967295
 800825c:	f104 0a1a 	add.w	sl, r4, #26
 8008260:	45c8      	cmp	r8, r9
 8008262:	dc09      	bgt.n	8008278 <_printf_float+0x250>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	079b      	lsls	r3, r3, #30
 8008268:	f100 8103 	bmi.w	8008472 <_printf_float+0x44a>
 800826c:	68e0      	ldr	r0, [r4, #12]
 800826e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008270:	4298      	cmp	r0, r3
 8008272:	bfb8      	it	lt
 8008274:	4618      	movlt	r0, r3
 8008276:	e734      	b.n	80080e2 <_printf_float+0xba>
 8008278:	2301      	movs	r3, #1
 800827a:	4652      	mov	r2, sl
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f af2b 	beq.w	80080de <_printf_float+0xb6>
 8008288:	f109 0901 	add.w	r9, r9, #1
 800828c:	e7e8      	b.n	8008260 <_printf_float+0x238>
 800828e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc39      	bgt.n	8008308 <_printf_float+0x2e0>
 8008294:	4a1b      	ldr	r2, [pc, #108]	@ (8008304 <_printf_float+0x2dc>)
 8008296:	2301      	movs	r3, #1
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	f43f af1d 	beq.w	80080de <_printf_float+0xb6>
 80082a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80082a8:	ea59 0303 	orrs.w	r3, r9, r3
 80082ac:	d102      	bne.n	80082b4 <_printf_float+0x28c>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	07d9      	lsls	r1, r3, #31
 80082b2:	d5d7      	bpl.n	8008264 <_printf_float+0x23c>
 80082b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	f43f af0d 	beq.w	80080de <_printf_float+0xb6>
 80082c4:	f04f 0a00 	mov.w	sl, #0
 80082c8:	f104 0b1a 	add.w	fp, r4, #26
 80082cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ce:	425b      	negs	r3, r3
 80082d0:	4553      	cmp	r3, sl
 80082d2:	dc01      	bgt.n	80082d8 <_printf_float+0x2b0>
 80082d4:	464b      	mov	r3, r9
 80082d6:	e793      	b.n	8008200 <_printf_float+0x1d8>
 80082d8:	2301      	movs	r3, #1
 80082da:	465a      	mov	r2, fp
 80082dc:	4631      	mov	r1, r6
 80082de:	4628      	mov	r0, r5
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	f43f aefb 	beq.w	80080de <_printf_float+0xb6>
 80082e8:	f10a 0a01 	add.w	sl, sl, #1
 80082ec:	e7ee      	b.n	80082cc <_printf_float+0x2a4>
 80082ee:	bf00      	nop
 80082f0:	7fefffff 	.word	0x7fefffff
 80082f4:	0800a960 	.word	0x0800a960
 80082f8:	0800a95c 	.word	0x0800a95c
 80082fc:	0800a968 	.word	0x0800a968
 8008300:	0800a964 	.word	0x0800a964
 8008304:	0800a96c 	.word	0x0800a96c
 8008308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800830a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800830e:	4553      	cmp	r3, sl
 8008310:	bfa8      	it	ge
 8008312:	4653      	movge	r3, sl
 8008314:	2b00      	cmp	r3, #0
 8008316:	4699      	mov	r9, r3
 8008318:	dc36      	bgt.n	8008388 <_printf_float+0x360>
 800831a:	f04f 0b00 	mov.w	fp, #0
 800831e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008322:	f104 021a 	add.w	r2, r4, #26
 8008326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008328:	9306      	str	r3, [sp, #24]
 800832a:	eba3 0309 	sub.w	r3, r3, r9
 800832e:	455b      	cmp	r3, fp
 8008330:	dc31      	bgt.n	8008396 <_printf_float+0x36e>
 8008332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008334:	459a      	cmp	sl, r3
 8008336:	dc3a      	bgt.n	80083ae <_printf_float+0x386>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	07da      	lsls	r2, r3, #31
 800833c:	d437      	bmi.n	80083ae <_printf_float+0x386>
 800833e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008340:	ebaa 0903 	sub.w	r9, sl, r3
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	ebaa 0303 	sub.w	r3, sl, r3
 800834a:	4599      	cmp	r9, r3
 800834c:	bfa8      	it	ge
 800834e:	4699      	movge	r9, r3
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	dc33      	bgt.n	80083be <_printf_float+0x396>
 8008356:	f04f 0800 	mov.w	r8, #0
 800835a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800835e:	f104 0b1a 	add.w	fp, r4, #26
 8008362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008364:	ebaa 0303 	sub.w	r3, sl, r3
 8008368:	eba3 0309 	sub.w	r3, r3, r9
 800836c:	4543      	cmp	r3, r8
 800836e:	f77f af79 	ble.w	8008264 <_printf_float+0x23c>
 8008372:	2301      	movs	r3, #1
 8008374:	465a      	mov	r2, fp
 8008376:	4631      	mov	r1, r6
 8008378:	4628      	mov	r0, r5
 800837a:	47b8      	blx	r7
 800837c:	3001      	adds	r0, #1
 800837e:	f43f aeae 	beq.w	80080de <_printf_float+0xb6>
 8008382:	f108 0801 	add.w	r8, r8, #1
 8008386:	e7ec      	b.n	8008362 <_printf_float+0x33a>
 8008388:	4642      	mov	r2, r8
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	47b8      	blx	r7
 8008390:	3001      	adds	r0, #1
 8008392:	d1c2      	bne.n	800831a <_printf_float+0x2f2>
 8008394:	e6a3      	b.n	80080de <_printf_float+0xb6>
 8008396:	2301      	movs	r3, #1
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	9206      	str	r2, [sp, #24]
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f ae9c 	beq.w	80080de <_printf_float+0xb6>
 80083a6:	9a06      	ldr	r2, [sp, #24]
 80083a8:	f10b 0b01 	add.w	fp, fp, #1
 80083ac:	e7bb      	b.n	8008326 <_printf_float+0x2fe>
 80083ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	d1c0      	bne.n	800833e <_printf_float+0x316>
 80083bc:	e68f      	b.n	80080de <_printf_float+0xb6>
 80083be:	9a06      	ldr	r2, [sp, #24]
 80083c0:	464b      	mov	r3, r9
 80083c2:	4442      	add	r2, r8
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	d1c3      	bne.n	8008356 <_printf_float+0x32e>
 80083ce:	e686      	b.n	80080de <_printf_float+0xb6>
 80083d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083d4:	f1ba 0f01 	cmp.w	sl, #1
 80083d8:	dc01      	bgt.n	80083de <_printf_float+0x3b6>
 80083da:	07db      	lsls	r3, r3, #31
 80083dc:	d536      	bpl.n	800844c <_printf_float+0x424>
 80083de:	2301      	movs	r3, #1
 80083e0:	4642      	mov	r2, r8
 80083e2:	4631      	mov	r1, r6
 80083e4:	4628      	mov	r0, r5
 80083e6:	47b8      	blx	r7
 80083e8:	3001      	adds	r0, #1
 80083ea:	f43f ae78 	beq.w	80080de <_printf_float+0xb6>
 80083ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f2:	4631      	mov	r1, r6
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b8      	blx	r7
 80083f8:	3001      	adds	r0, #1
 80083fa:	f43f ae70 	beq.w	80080de <_printf_float+0xb6>
 80083fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800840a:	f7f8 fbb5 	bl	8000b78 <__aeabi_dcmpeq>
 800840e:	b9c0      	cbnz	r0, 8008442 <_printf_float+0x41a>
 8008410:	4653      	mov	r3, sl
 8008412:	f108 0201 	add.w	r2, r8, #1
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	d10c      	bne.n	800843a <_printf_float+0x412>
 8008420:	e65d      	b.n	80080de <_printf_float+0xb6>
 8008422:	2301      	movs	r3, #1
 8008424:	465a      	mov	r2, fp
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	f43f ae56 	beq.w	80080de <_printf_float+0xb6>
 8008432:	f108 0801 	add.w	r8, r8, #1
 8008436:	45d0      	cmp	r8, sl
 8008438:	dbf3      	blt.n	8008422 <_printf_float+0x3fa>
 800843a:	464b      	mov	r3, r9
 800843c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008440:	e6df      	b.n	8008202 <_printf_float+0x1da>
 8008442:	f04f 0800 	mov.w	r8, #0
 8008446:	f104 0b1a 	add.w	fp, r4, #26
 800844a:	e7f4      	b.n	8008436 <_printf_float+0x40e>
 800844c:	2301      	movs	r3, #1
 800844e:	4642      	mov	r2, r8
 8008450:	e7e1      	b.n	8008416 <_printf_float+0x3ee>
 8008452:	2301      	movs	r3, #1
 8008454:	464a      	mov	r2, r9
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae3e 	beq.w	80080de <_printf_float+0xb6>
 8008462:	f108 0801 	add.w	r8, r8, #1
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800846a:	1a5b      	subs	r3, r3, r1
 800846c:	4543      	cmp	r3, r8
 800846e:	dcf0      	bgt.n	8008452 <_printf_float+0x42a>
 8008470:	e6fc      	b.n	800826c <_printf_float+0x244>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	f104 0919 	add.w	r9, r4, #25
 800847a:	e7f4      	b.n	8008466 <_printf_float+0x43e>

0800847c <_printf_common>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	4616      	mov	r6, r2
 8008482:	4698      	mov	r8, r3
 8008484:	688a      	ldr	r2, [r1, #8]
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800848c:	4293      	cmp	r3, r2
 800848e:	bfb8      	it	lt
 8008490:	4613      	movlt	r3, r2
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008498:	4607      	mov	r7, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b10a      	cbz	r2, 80084a2 <_printf_common+0x26>
 800849e:	3301      	adds	r3, #1
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	0699      	lsls	r1, r3, #26
 80084a6:	bf42      	ittt	mi
 80084a8:	6833      	ldrmi	r3, [r6, #0]
 80084aa:	3302      	addmi	r3, #2
 80084ac:	6033      	strmi	r3, [r6, #0]
 80084ae:	6825      	ldr	r5, [r4, #0]
 80084b0:	f015 0506 	ands.w	r5, r5, #6
 80084b4:	d106      	bne.n	80084c4 <_printf_common+0x48>
 80084b6:	f104 0a19 	add.w	sl, r4, #25
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	6832      	ldr	r2, [r6, #0]
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc26      	bgt.n	8008512 <_printf_common+0x96>
 80084c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	3b00      	subs	r3, #0
 80084cc:	bf18      	it	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	0692      	lsls	r2, r2, #26
 80084d2:	d42b      	bmi.n	800852c <_printf_common+0xb0>
 80084d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084d8:	4641      	mov	r1, r8
 80084da:	4638      	mov	r0, r7
 80084dc:	47c8      	blx	r9
 80084de:	3001      	adds	r0, #1
 80084e0:	d01e      	beq.n	8008520 <_printf_common+0xa4>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	f003 0306 	and.w	r3, r3, #6
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	bf02      	ittt	eq
 80084ee:	68e5      	ldreq	r5, [r4, #12]
 80084f0:	6833      	ldreq	r3, [r6, #0]
 80084f2:	1aed      	subeq	r5, r5, r3
 80084f4:	68a3      	ldr	r3, [r4, #8]
 80084f6:	bf0c      	ite	eq
 80084f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084fc:	2500      	movne	r5, #0
 80084fe:	4293      	cmp	r3, r2
 8008500:	bfc4      	itt	gt
 8008502:	1a9b      	subgt	r3, r3, r2
 8008504:	18ed      	addgt	r5, r5, r3
 8008506:	2600      	movs	r6, #0
 8008508:	341a      	adds	r4, #26
 800850a:	42b5      	cmp	r5, r6
 800850c:	d11a      	bne.n	8008544 <_printf_common+0xc8>
 800850e:	2000      	movs	r0, #0
 8008510:	e008      	b.n	8008524 <_printf_common+0xa8>
 8008512:	2301      	movs	r3, #1
 8008514:	4652      	mov	r2, sl
 8008516:	4641      	mov	r1, r8
 8008518:	4638      	mov	r0, r7
 800851a:	47c8      	blx	r9
 800851c:	3001      	adds	r0, #1
 800851e:	d103      	bne.n	8008528 <_printf_common+0xac>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	3501      	adds	r5, #1
 800852a:	e7c6      	b.n	80084ba <_printf_common+0x3e>
 800852c:	18e1      	adds	r1, r4, r3
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	2030      	movs	r0, #48	@ 0x30
 8008532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008536:	4422      	add	r2, r4
 8008538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800853c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008540:	3302      	adds	r3, #2
 8008542:	e7c7      	b.n	80084d4 <_printf_common+0x58>
 8008544:	2301      	movs	r3, #1
 8008546:	4622      	mov	r2, r4
 8008548:	4641      	mov	r1, r8
 800854a:	4638      	mov	r0, r7
 800854c:	47c8      	blx	r9
 800854e:	3001      	adds	r0, #1
 8008550:	d0e6      	beq.n	8008520 <_printf_common+0xa4>
 8008552:	3601      	adds	r6, #1
 8008554:	e7d9      	b.n	800850a <_printf_common+0x8e>
	...

08008558 <_printf_i>:
 8008558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	7e0f      	ldrb	r7, [r1, #24]
 800855e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008560:	2f78      	cmp	r7, #120	@ 0x78
 8008562:	4691      	mov	r9, r2
 8008564:	4680      	mov	r8, r0
 8008566:	460c      	mov	r4, r1
 8008568:	469a      	mov	sl, r3
 800856a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800856e:	d807      	bhi.n	8008580 <_printf_i+0x28>
 8008570:	2f62      	cmp	r7, #98	@ 0x62
 8008572:	d80a      	bhi.n	800858a <_printf_i+0x32>
 8008574:	2f00      	cmp	r7, #0
 8008576:	f000 80d1 	beq.w	800871c <_printf_i+0x1c4>
 800857a:	2f58      	cmp	r7, #88	@ 0x58
 800857c:	f000 80b8 	beq.w	80086f0 <_printf_i+0x198>
 8008580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008588:	e03a      	b.n	8008600 <_printf_i+0xa8>
 800858a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800858e:	2b15      	cmp	r3, #21
 8008590:	d8f6      	bhi.n	8008580 <_printf_i+0x28>
 8008592:	a101      	add	r1, pc, #4	@ (adr r1, 8008598 <_printf_i+0x40>)
 8008594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008598:	080085f1 	.word	0x080085f1
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008581 	.word	0x08008581
 80085a4:	08008581 	.word	0x08008581
 80085a8:	08008581 	.word	0x08008581
 80085ac:	08008581 	.word	0x08008581
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008581 	.word	0x08008581
 80085b8:	08008581 	.word	0x08008581
 80085bc:	08008581 	.word	0x08008581
 80085c0:	08008581 	.word	0x08008581
 80085c4:	08008703 	.word	0x08008703
 80085c8:	0800862f 	.word	0x0800862f
 80085cc:	080086bd 	.word	0x080086bd
 80085d0:	08008581 	.word	0x08008581
 80085d4:	08008581 	.word	0x08008581
 80085d8:	08008725 	.word	0x08008725
 80085dc:	08008581 	.word	0x08008581
 80085e0:	0800862f 	.word	0x0800862f
 80085e4:	08008581 	.word	0x08008581
 80085e8:	08008581 	.word	0x08008581
 80085ec:	080086c5 	.word	0x080086c5
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6032      	str	r2, [r6, #0]
 80085f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008600:	2301      	movs	r3, #1
 8008602:	e09c      	b.n	800873e <_printf_i+0x1e6>
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	6820      	ldr	r0, [r4, #0]
 8008608:	1d19      	adds	r1, r3, #4
 800860a:	6031      	str	r1, [r6, #0]
 800860c:	0606      	lsls	r6, r0, #24
 800860e:	d501      	bpl.n	8008614 <_printf_i+0xbc>
 8008610:	681d      	ldr	r5, [r3, #0]
 8008612:	e003      	b.n	800861c <_printf_i+0xc4>
 8008614:	0645      	lsls	r5, r0, #25
 8008616:	d5fb      	bpl.n	8008610 <_printf_i+0xb8>
 8008618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800861c:	2d00      	cmp	r5, #0
 800861e:	da03      	bge.n	8008628 <_printf_i+0xd0>
 8008620:	232d      	movs	r3, #45	@ 0x2d
 8008622:	426d      	negs	r5, r5
 8008624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008628:	4858      	ldr	r0, [pc, #352]	@ (800878c <_printf_i+0x234>)
 800862a:	230a      	movs	r3, #10
 800862c:	e011      	b.n	8008652 <_printf_i+0xfa>
 800862e:	6821      	ldr	r1, [r4, #0]
 8008630:	6833      	ldr	r3, [r6, #0]
 8008632:	0608      	lsls	r0, r1, #24
 8008634:	f853 5b04 	ldr.w	r5, [r3], #4
 8008638:	d402      	bmi.n	8008640 <_printf_i+0xe8>
 800863a:	0649      	lsls	r1, r1, #25
 800863c:	bf48      	it	mi
 800863e:	b2ad      	uxthmi	r5, r5
 8008640:	2f6f      	cmp	r7, #111	@ 0x6f
 8008642:	4852      	ldr	r0, [pc, #328]	@ (800878c <_printf_i+0x234>)
 8008644:	6033      	str	r3, [r6, #0]
 8008646:	bf14      	ite	ne
 8008648:	230a      	movne	r3, #10
 800864a:	2308      	moveq	r3, #8
 800864c:	2100      	movs	r1, #0
 800864e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008652:	6866      	ldr	r6, [r4, #4]
 8008654:	60a6      	str	r6, [r4, #8]
 8008656:	2e00      	cmp	r6, #0
 8008658:	db05      	blt.n	8008666 <_printf_i+0x10e>
 800865a:	6821      	ldr	r1, [r4, #0]
 800865c:	432e      	orrs	r6, r5
 800865e:	f021 0104 	bic.w	r1, r1, #4
 8008662:	6021      	str	r1, [r4, #0]
 8008664:	d04b      	beq.n	80086fe <_printf_i+0x1a6>
 8008666:	4616      	mov	r6, r2
 8008668:	fbb5 f1f3 	udiv	r1, r5, r3
 800866c:	fb03 5711 	mls	r7, r3, r1, r5
 8008670:	5dc7      	ldrb	r7, [r0, r7]
 8008672:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008676:	462f      	mov	r7, r5
 8008678:	42bb      	cmp	r3, r7
 800867a:	460d      	mov	r5, r1
 800867c:	d9f4      	bls.n	8008668 <_printf_i+0x110>
 800867e:	2b08      	cmp	r3, #8
 8008680:	d10b      	bne.n	800869a <_printf_i+0x142>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	07df      	lsls	r7, r3, #31
 8008686:	d508      	bpl.n	800869a <_printf_i+0x142>
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	6861      	ldr	r1, [r4, #4]
 800868c:	4299      	cmp	r1, r3
 800868e:	bfde      	ittt	le
 8008690:	2330      	movle	r3, #48	@ 0x30
 8008692:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008696:	f106 36ff 	addle.w	r6, r6, #4294967295
 800869a:	1b92      	subs	r2, r2, r6
 800869c:	6122      	str	r2, [r4, #16]
 800869e:	f8cd a000 	str.w	sl, [sp]
 80086a2:	464b      	mov	r3, r9
 80086a4:	aa03      	add	r2, sp, #12
 80086a6:	4621      	mov	r1, r4
 80086a8:	4640      	mov	r0, r8
 80086aa:	f7ff fee7 	bl	800847c <_printf_common>
 80086ae:	3001      	adds	r0, #1
 80086b0:	d14a      	bne.n	8008748 <_printf_i+0x1f0>
 80086b2:	f04f 30ff 	mov.w	r0, #4294967295
 80086b6:	b004      	add	sp, #16
 80086b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	f043 0320 	orr.w	r3, r3, #32
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	4832      	ldr	r0, [pc, #200]	@ (8008790 <_printf_i+0x238>)
 80086c6:	2778      	movs	r7, #120	@ 0x78
 80086c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	6831      	ldr	r1, [r6, #0]
 80086d0:	061f      	lsls	r7, r3, #24
 80086d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80086d6:	d402      	bmi.n	80086de <_printf_i+0x186>
 80086d8:	065f      	lsls	r7, r3, #25
 80086da:	bf48      	it	mi
 80086dc:	b2ad      	uxthmi	r5, r5
 80086de:	6031      	str	r1, [r6, #0]
 80086e0:	07d9      	lsls	r1, r3, #31
 80086e2:	bf44      	itt	mi
 80086e4:	f043 0320 	orrmi.w	r3, r3, #32
 80086e8:	6023      	strmi	r3, [r4, #0]
 80086ea:	b11d      	cbz	r5, 80086f4 <_printf_i+0x19c>
 80086ec:	2310      	movs	r3, #16
 80086ee:	e7ad      	b.n	800864c <_printf_i+0xf4>
 80086f0:	4826      	ldr	r0, [pc, #152]	@ (800878c <_printf_i+0x234>)
 80086f2:	e7e9      	b.n	80086c8 <_printf_i+0x170>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	f023 0320 	bic.w	r3, r3, #32
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	e7f6      	b.n	80086ec <_printf_i+0x194>
 80086fe:	4616      	mov	r6, r2
 8008700:	e7bd      	b.n	800867e <_printf_i+0x126>
 8008702:	6833      	ldr	r3, [r6, #0]
 8008704:	6825      	ldr	r5, [r4, #0]
 8008706:	6961      	ldr	r1, [r4, #20]
 8008708:	1d18      	adds	r0, r3, #4
 800870a:	6030      	str	r0, [r6, #0]
 800870c:	062e      	lsls	r6, r5, #24
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	d501      	bpl.n	8008716 <_printf_i+0x1be>
 8008712:	6019      	str	r1, [r3, #0]
 8008714:	e002      	b.n	800871c <_printf_i+0x1c4>
 8008716:	0668      	lsls	r0, r5, #25
 8008718:	d5fb      	bpl.n	8008712 <_printf_i+0x1ba>
 800871a:	8019      	strh	r1, [r3, #0]
 800871c:	2300      	movs	r3, #0
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	4616      	mov	r6, r2
 8008722:	e7bc      	b.n	800869e <_printf_i+0x146>
 8008724:	6833      	ldr	r3, [r6, #0]
 8008726:	1d1a      	adds	r2, r3, #4
 8008728:	6032      	str	r2, [r6, #0]
 800872a:	681e      	ldr	r6, [r3, #0]
 800872c:	6862      	ldr	r2, [r4, #4]
 800872e:	2100      	movs	r1, #0
 8008730:	4630      	mov	r0, r6
 8008732:	f7f7 fda5 	bl	8000280 <memchr>
 8008736:	b108      	cbz	r0, 800873c <_printf_i+0x1e4>
 8008738:	1b80      	subs	r0, r0, r6
 800873a:	6060      	str	r0, [r4, #4]
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	2300      	movs	r3, #0
 8008742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008746:	e7aa      	b.n	800869e <_printf_i+0x146>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	4632      	mov	r2, r6
 800874c:	4649      	mov	r1, r9
 800874e:	4640      	mov	r0, r8
 8008750:	47d0      	blx	sl
 8008752:	3001      	adds	r0, #1
 8008754:	d0ad      	beq.n	80086b2 <_printf_i+0x15a>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	079b      	lsls	r3, r3, #30
 800875a:	d413      	bmi.n	8008784 <_printf_i+0x22c>
 800875c:	68e0      	ldr	r0, [r4, #12]
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	4298      	cmp	r0, r3
 8008762:	bfb8      	it	lt
 8008764:	4618      	movlt	r0, r3
 8008766:	e7a6      	b.n	80086b6 <_printf_i+0x15e>
 8008768:	2301      	movs	r3, #1
 800876a:	4632      	mov	r2, r6
 800876c:	4649      	mov	r1, r9
 800876e:	4640      	mov	r0, r8
 8008770:	47d0      	blx	sl
 8008772:	3001      	adds	r0, #1
 8008774:	d09d      	beq.n	80086b2 <_printf_i+0x15a>
 8008776:	3501      	adds	r5, #1
 8008778:	68e3      	ldr	r3, [r4, #12]
 800877a:	9903      	ldr	r1, [sp, #12]
 800877c:	1a5b      	subs	r3, r3, r1
 800877e:	42ab      	cmp	r3, r5
 8008780:	dcf2      	bgt.n	8008768 <_printf_i+0x210>
 8008782:	e7eb      	b.n	800875c <_printf_i+0x204>
 8008784:	2500      	movs	r5, #0
 8008786:	f104 0619 	add.w	r6, r4, #25
 800878a:	e7f5      	b.n	8008778 <_printf_i+0x220>
 800878c:	0800a96e 	.word	0x0800a96e
 8008790:	0800a97f 	.word	0x0800a97f

08008794 <std>:
 8008794:	2300      	movs	r3, #0
 8008796:	b510      	push	{r4, lr}
 8008798:	4604      	mov	r4, r0
 800879a:	e9c0 3300 	strd	r3, r3, [r0]
 800879e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087a2:	6083      	str	r3, [r0, #8]
 80087a4:	8181      	strh	r1, [r0, #12]
 80087a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80087a8:	81c2      	strh	r2, [r0, #14]
 80087aa:	6183      	str	r3, [r0, #24]
 80087ac:	4619      	mov	r1, r3
 80087ae:	2208      	movs	r2, #8
 80087b0:	305c      	adds	r0, #92	@ 0x5c
 80087b2:	f000 f904 	bl	80089be <memset>
 80087b6:	4b0d      	ldr	r3, [pc, #52]	@ (80087ec <std+0x58>)
 80087b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <std+0x5c>)
 80087bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087be:	4b0d      	ldr	r3, [pc, #52]	@ (80087f4 <std+0x60>)
 80087c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <std+0x64>)
 80087c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <std+0x68>)
 80087c8:	6224      	str	r4, [r4, #32]
 80087ca:	429c      	cmp	r4, r3
 80087cc:	d006      	beq.n	80087dc <std+0x48>
 80087ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087d2:	4294      	cmp	r4, r2
 80087d4:	d002      	beq.n	80087dc <std+0x48>
 80087d6:	33d0      	adds	r3, #208	@ 0xd0
 80087d8:	429c      	cmp	r4, r3
 80087da:	d105      	bne.n	80087e8 <std+0x54>
 80087dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e4:	f000 b956 	b.w	8008a94 <__retarget_lock_init_recursive>
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	bf00      	nop
 80087ec:	08008919 	.word	0x08008919
 80087f0:	0800893b 	.word	0x0800893b
 80087f4:	08008973 	.word	0x08008973
 80087f8:	08008997 	.word	0x08008997
 80087fc:	2000c274 	.word	0x2000c274

08008800 <stdio_exit_handler>:
 8008800:	4a02      	ldr	r2, [pc, #8]	@ (800880c <stdio_exit_handler+0xc>)
 8008802:	4903      	ldr	r1, [pc, #12]	@ (8008810 <stdio_exit_handler+0x10>)
 8008804:	4803      	ldr	r0, [pc, #12]	@ (8008814 <stdio_exit_handler+0x14>)
 8008806:	f000 b869 	b.w	80088dc <_fwalk_sglue>
 800880a:	bf00      	nop
 800880c:	20000018 	.word	0x20000018
 8008810:	0800a165 	.word	0x0800a165
 8008814:	20000028 	.word	0x20000028

08008818 <cleanup_stdio>:
 8008818:	6841      	ldr	r1, [r0, #4]
 800881a:	4b0c      	ldr	r3, [pc, #48]	@ (800884c <cleanup_stdio+0x34>)
 800881c:	4299      	cmp	r1, r3
 800881e:	b510      	push	{r4, lr}
 8008820:	4604      	mov	r4, r0
 8008822:	d001      	beq.n	8008828 <cleanup_stdio+0x10>
 8008824:	f001 fc9e 	bl	800a164 <_fflush_r>
 8008828:	68a1      	ldr	r1, [r4, #8]
 800882a:	4b09      	ldr	r3, [pc, #36]	@ (8008850 <cleanup_stdio+0x38>)
 800882c:	4299      	cmp	r1, r3
 800882e:	d002      	beq.n	8008836 <cleanup_stdio+0x1e>
 8008830:	4620      	mov	r0, r4
 8008832:	f001 fc97 	bl	800a164 <_fflush_r>
 8008836:	68e1      	ldr	r1, [r4, #12]
 8008838:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <cleanup_stdio+0x3c>)
 800883a:	4299      	cmp	r1, r3
 800883c:	d004      	beq.n	8008848 <cleanup_stdio+0x30>
 800883e:	4620      	mov	r0, r4
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	f001 bc8e 	b.w	800a164 <_fflush_r>
 8008848:	bd10      	pop	{r4, pc}
 800884a:	bf00      	nop
 800884c:	2000c274 	.word	0x2000c274
 8008850:	2000c2dc 	.word	0x2000c2dc
 8008854:	2000c344 	.word	0x2000c344

08008858 <global_stdio_init.part.0>:
 8008858:	b510      	push	{r4, lr}
 800885a:	4b0b      	ldr	r3, [pc, #44]	@ (8008888 <global_stdio_init.part.0+0x30>)
 800885c:	4c0b      	ldr	r4, [pc, #44]	@ (800888c <global_stdio_init.part.0+0x34>)
 800885e:	4a0c      	ldr	r2, [pc, #48]	@ (8008890 <global_stdio_init.part.0+0x38>)
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	4620      	mov	r0, r4
 8008864:	2200      	movs	r2, #0
 8008866:	2104      	movs	r1, #4
 8008868:	f7ff ff94 	bl	8008794 <std>
 800886c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008870:	2201      	movs	r2, #1
 8008872:	2109      	movs	r1, #9
 8008874:	f7ff ff8e 	bl	8008794 <std>
 8008878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800887c:	2202      	movs	r2, #2
 800887e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008882:	2112      	movs	r1, #18
 8008884:	f7ff bf86 	b.w	8008794 <std>
 8008888:	2000c3ac 	.word	0x2000c3ac
 800888c:	2000c274 	.word	0x2000c274
 8008890:	08008801 	.word	0x08008801

08008894 <__sfp_lock_acquire>:
 8008894:	4801      	ldr	r0, [pc, #4]	@ (800889c <__sfp_lock_acquire+0x8>)
 8008896:	f000 b8fe 	b.w	8008a96 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	2000c3b5 	.word	0x2000c3b5

080088a0 <__sfp_lock_release>:
 80088a0:	4801      	ldr	r0, [pc, #4]	@ (80088a8 <__sfp_lock_release+0x8>)
 80088a2:	f000 b8f9 	b.w	8008a98 <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	2000c3b5 	.word	0x2000c3b5

080088ac <__sinit>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	4604      	mov	r4, r0
 80088b0:	f7ff fff0 	bl	8008894 <__sfp_lock_acquire>
 80088b4:	6a23      	ldr	r3, [r4, #32]
 80088b6:	b11b      	cbz	r3, 80088c0 <__sinit+0x14>
 80088b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088bc:	f7ff bff0 	b.w	80088a0 <__sfp_lock_release>
 80088c0:	4b04      	ldr	r3, [pc, #16]	@ (80088d4 <__sinit+0x28>)
 80088c2:	6223      	str	r3, [r4, #32]
 80088c4:	4b04      	ldr	r3, [pc, #16]	@ (80088d8 <__sinit+0x2c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1f5      	bne.n	80088b8 <__sinit+0xc>
 80088cc:	f7ff ffc4 	bl	8008858 <global_stdio_init.part.0>
 80088d0:	e7f2      	b.n	80088b8 <__sinit+0xc>
 80088d2:	bf00      	nop
 80088d4:	08008819 	.word	0x08008819
 80088d8:	2000c3ac 	.word	0x2000c3ac

080088dc <_fwalk_sglue>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	4607      	mov	r7, r0
 80088e2:	4688      	mov	r8, r1
 80088e4:	4614      	mov	r4, r2
 80088e6:	2600      	movs	r6, #0
 80088e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088ec:	f1b9 0901 	subs.w	r9, r9, #1
 80088f0:	d505      	bpl.n	80088fe <_fwalk_sglue+0x22>
 80088f2:	6824      	ldr	r4, [r4, #0]
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	d1f7      	bne.n	80088e8 <_fwalk_sglue+0xc>
 80088f8:	4630      	mov	r0, r6
 80088fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d907      	bls.n	8008914 <_fwalk_sglue+0x38>
 8008904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008908:	3301      	adds	r3, #1
 800890a:	d003      	beq.n	8008914 <_fwalk_sglue+0x38>
 800890c:	4629      	mov	r1, r5
 800890e:	4638      	mov	r0, r7
 8008910:	47c0      	blx	r8
 8008912:	4306      	orrs	r6, r0
 8008914:	3568      	adds	r5, #104	@ 0x68
 8008916:	e7e9      	b.n	80088ec <_fwalk_sglue+0x10>

08008918 <__sread>:
 8008918:	b510      	push	{r4, lr}
 800891a:	460c      	mov	r4, r1
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	f000 f87c 	bl	8008a1c <_read_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	bfab      	itete	ge
 8008928:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800892a:	89a3      	ldrhlt	r3, [r4, #12]
 800892c:	181b      	addge	r3, r3, r0
 800892e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008932:	bfac      	ite	ge
 8008934:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008936:	81a3      	strhlt	r3, [r4, #12]
 8008938:	bd10      	pop	{r4, pc}

0800893a <__swrite>:
 800893a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	461f      	mov	r7, r3
 8008940:	898b      	ldrh	r3, [r1, #12]
 8008942:	05db      	lsls	r3, r3, #23
 8008944:	4605      	mov	r5, r0
 8008946:	460c      	mov	r4, r1
 8008948:	4616      	mov	r6, r2
 800894a:	d505      	bpl.n	8008958 <__swrite+0x1e>
 800894c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008950:	2302      	movs	r3, #2
 8008952:	2200      	movs	r2, #0
 8008954:	f000 f850 	bl	80089f8 <_lseek_r>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	4628      	mov	r0, r5
 800896a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800896e:	f7ff ba97 	b.w	8007ea0 <_write_r>

08008972 <__sseek>:
 8008972:	b510      	push	{r4, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897a:	f000 f83d 	bl	80089f8 <_lseek_r>
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	bf15      	itete	ne
 8008984:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008986:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800898a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800898e:	81a3      	strheq	r3, [r4, #12]
 8008990:	bf18      	it	ne
 8008992:	81a3      	strhne	r3, [r4, #12]
 8008994:	bd10      	pop	{r4, pc}

08008996 <__sclose>:
 8008996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899a:	f000 b81d 	b.w	80089d8 <_close_r>

0800899e <memcmp>:
 800899e:	b510      	push	{r4, lr}
 80089a0:	3901      	subs	r1, #1
 80089a2:	4402      	add	r2, r0
 80089a4:	4290      	cmp	r0, r2
 80089a6:	d101      	bne.n	80089ac <memcmp+0xe>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e005      	b.n	80089b8 <memcmp+0x1a>
 80089ac:	7803      	ldrb	r3, [r0, #0]
 80089ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	d001      	beq.n	80089ba <memcmp+0x1c>
 80089b6:	1b18      	subs	r0, r3, r4
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	3001      	adds	r0, #1
 80089bc:	e7f2      	b.n	80089a4 <memcmp+0x6>

080089be <memset>:
 80089be:	4402      	add	r2, r0
 80089c0:	4603      	mov	r3, r0
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d100      	bne.n	80089c8 <memset+0xa>
 80089c6:	4770      	bx	lr
 80089c8:	f803 1b01 	strb.w	r1, [r3], #1
 80089cc:	e7f9      	b.n	80089c2 <memset+0x4>
	...

080089d0 <_localeconv_r>:
 80089d0:	4800      	ldr	r0, [pc, #0]	@ (80089d4 <_localeconv_r+0x4>)
 80089d2:	4770      	bx	lr
 80089d4:	20000164 	.word	0x20000164

080089d8 <_close_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	@ (80089f4 <_close_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f8 fd66 	bl	80014b4 <_close>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_close_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_close_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	2000c3b0 	.word	0x2000c3b0

080089f8 <_lseek_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	@ (8008a18 <_lseek_r+0x20>)
 80089fc:	4604      	mov	r4, r0
 80089fe:	4608      	mov	r0, r1
 8008a00:	4611      	mov	r1, r2
 8008a02:	2200      	movs	r2, #0
 8008a04:	602a      	str	r2, [r5, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f7f8 fd7b 	bl	8001502 <_lseek>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_lseek_r+0x1e>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_lseek_r+0x1e>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	2000c3b0 	.word	0x2000c3b0

08008a1c <_read_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	@ (8008a3c <_read_r+0x20>)
 8008a20:	4604      	mov	r4, r0
 8008a22:	4608      	mov	r0, r1
 8008a24:	4611      	mov	r1, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f8 fd25 	bl	800147a <_read>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_read_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_read_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	2000c3b0 	.word	0x2000c3b0

08008a40 <__errno>:
 8008a40:	4b01      	ldr	r3, [pc, #4]	@ (8008a48 <__errno+0x8>)
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20000024 	.word	0x20000024

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a84 <__libc_init_array+0x38>)
 8008a50:	4c0d      	ldr	r4, [pc, #52]	@ (8008a88 <__libc_init_array+0x3c>)
 8008a52:	1b64      	subs	r4, r4, r5
 8008a54:	10a4      	asrs	r4, r4, #2
 8008a56:	2600      	movs	r6, #0
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a8c <__libc_init_array+0x40>)
 8008a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a90 <__libc_init_array+0x44>)
 8008a60:	f001 fec0 	bl	800a7e4 <_init>
 8008a64:	1b64      	subs	r4, r4, r5
 8008a66:	10a4      	asrs	r4, r4, #2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	0800acdc 	.word	0x0800acdc
 8008a88:	0800acdc 	.word	0x0800acdc
 8008a8c:	0800acdc 	.word	0x0800acdc
 8008a90:	0800ace0 	.word	0x0800ace0

08008a94 <__retarget_lock_init_recursive>:
 8008a94:	4770      	bx	lr

08008a96 <__retarget_lock_acquire_recursive>:
 8008a96:	4770      	bx	lr

08008a98 <__retarget_lock_release_recursive>:
 8008a98:	4770      	bx	lr

08008a9a <memcpy>:
 8008a9a:	440a      	add	r2, r1
 8008a9c:	4291      	cmp	r1, r2
 8008a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa2:	d100      	bne.n	8008aa6 <memcpy+0xc>
 8008aa4:	4770      	bx	lr
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab0:	4291      	cmp	r1, r2
 8008ab2:	d1f9      	bne.n	8008aa8 <memcpy+0xe>
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <quorem>:
 8008ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6903      	ldr	r3, [r0, #16]
 8008abc:	690c      	ldr	r4, [r1, #16]
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	db7e      	blt.n	8008bc2 <quorem+0x10c>
 8008ac4:	3c01      	subs	r4, #1
 8008ac6:	f101 0814 	add.w	r8, r1, #20
 8008aca:	00a3      	lsls	r3, r4, #2
 8008acc:	f100 0514 	add.w	r5, r0, #20
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ae8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008aec:	d32e      	bcc.n	8008b4c <quorem+0x96>
 8008aee:	f04f 0a00 	mov.w	sl, #0
 8008af2:	46c4      	mov	ip, r8
 8008af4:	46ae      	mov	lr, r5
 8008af6:	46d3      	mov	fp, sl
 8008af8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008afc:	b298      	uxth	r0, r3
 8008afe:	fb06 a000 	mla	r0, r6, r0, sl
 8008b02:	0c02      	lsrs	r2, r0, #16
 8008b04:	0c1b      	lsrs	r3, r3, #16
 8008b06:	fb06 2303 	mla	r3, r6, r3, r2
 8008b0a:	f8de 2000 	ldr.w	r2, [lr]
 8008b0e:	b280      	uxth	r0, r0
 8008b10:	b292      	uxth	r2, r2
 8008b12:	1a12      	subs	r2, r2, r0
 8008b14:	445a      	add	r2, fp
 8008b16:	f8de 0000 	ldr.w	r0, [lr]
 8008b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b2e:	45e1      	cmp	r9, ip
 8008b30:	f84e 2b04 	str.w	r2, [lr], #4
 8008b34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b38:	d2de      	bcs.n	8008af8 <quorem+0x42>
 8008b3a:	9b00      	ldr	r3, [sp, #0]
 8008b3c:	58eb      	ldr	r3, [r5, r3]
 8008b3e:	b92b      	cbnz	r3, 8008b4c <quorem+0x96>
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	3b04      	subs	r3, #4
 8008b44:	429d      	cmp	r5, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	d32f      	bcc.n	8008baa <quorem+0xf4>
 8008b4a:	613c      	str	r4, [r7, #16]
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f001 f97d 	bl	8009e4c <__mcmp>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	db25      	blt.n	8008ba2 <quorem+0xec>
 8008b56:	4629      	mov	r1, r5
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b5e:	f8d1 c000 	ldr.w	ip, [r1]
 8008b62:	fa1f fe82 	uxth.w	lr, r2
 8008b66:	fa1f f38c 	uxth.w	r3, ip
 8008b6a:	eba3 030e 	sub.w	r3, r3, lr
 8008b6e:	4403      	add	r3, r0
 8008b70:	0c12      	lsrs	r2, r2, #16
 8008b72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b80:	45c1      	cmp	r9, r8
 8008b82:	f841 3b04 	str.w	r3, [r1], #4
 8008b86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b8a:	d2e6      	bcs.n	8008b5a <quorem+0xa4>
 8008b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b94:	b922      	cbnz	r2, 8008ba0 <quorem+0xea>
 8008b96:	3b04      	subs	r3, #4
 8008b98:	429d      	cmp	r5, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	d30b      	bcc.n	8008bb6 <quorem+0x100>
 8008b9e:	613c      	str	r4, [r7, #16]
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	b003      	add	sp, #12
 8008ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	3b04      	subs	r3, #4
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	d1cb      	bne.n	8008b4a <quorem+0x94>
 8008bb2:	3c01      	subs	r4, #1
 8008bb4:	e7c6      	b.n	8008b44 <quorem+0x8e>
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	d1ef      	bne.n	8008b9e <quorem+0xe8>
 8008bbe:	3c01      	subs	r4, #1
 8008bc0:	e7ea      	b.n	8008b98 <quorem+0xe2>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e7ee      	b.n	8008ba4 <quorem+0xee>
	...

08008bc8 <_dtoa_r>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	69c7      	ldr	r7, [r0, #28]
 8008bce:	b097      	sub	sp, #92	@ 0x5c
 8008bd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008bd4:	ec55 4b10 	vmov	r4, r5, d0
 8008bd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008bda:	9107      	str	r1, [sp, #28]
 8008bdc:	4681      	mov	r9, r0
 8008bde:	920c      	str	r2, [sp, #48]	@ 0x30
 8008be0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008be2:	b97f      	cbnz	r7, 8008c04 <_dtoa_r+0x3c>
 8008be4:	2010      	movs	r0, #16
 8008be6:	f000 fe09 	bl	80097fc <malloc>
 8008bea:	4602      	mov	r2, r0
 8008bec:	f8c9 001c 	str.w	r0, [r9, #28]
 8008bf0:	b920      	cbnz	r0, 8008bfc <_dtoa_r+0x34>
 8008bf2:	4ba9      	ldr	r3, [pc, #676]	@ (8008e98 <_dtoa_r+0x2d0>)
 8008bf4:	21ef      	movs	r1, #239	@ 0xef
 8008bf6:	48a9      	ldr	r0, [pc, #676]	@ (8008e9c <_dtoa_r+0x2d4>)
 8008bf8:	f001 faec 	bl	800a1d4 <__assert_func>
 8008bfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c00:	6007      	str	r7, [r0, #0]
 8008c02:	60c7      	str	r7, [r0, #12]
 8008c04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	b159      	cbz	r1, 8008c24 <_dtoa_r+0x5c>
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	604a      	str	r2, [r1, #4]
 8008c10:	2301      	movs	r3, #1
 8008c12:	4093      	lsls	r3, r2
 8008c14:	608b      	str	r3, [r1, #8]
 8008c16:	4648      	mov	r0, r9
 8008c18:	f000 fee6 	bl	80099e8 <_Bfree>
 8008c1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	1e2b      	subs	r3, r5, #0
 8008c26:	bfb9      	ittee	lt
 8008c28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c2c:	9305      	strlt	r3, [sp, #20]
 8008c2e:	2300      	movge	r3, #0
 8008c30:	6033      	strge	r3, [r6, #0]
 8008c32:	9f05      	ldr	r7, [sp, #20]
 8008c34:	4b9a      	ldr	r3, [pc, #616]	@ (8008ea0 <_dtoa_r+0x2d8>)
 8008c36:	bfbc      	itt	lt
 8008c38:	2201      	movlt	r2, #1
 8008c3a:	6032      	strlt	r2, [r6, #0]
 8008c3c:	43bb      	bics	r3, r7
 8008c3e:	d112      	bne.n	8008c66 <_dtoa_r+0x9e>
 8008c40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c4c:	4323      	orrs	r3, r4
 8008c4e:	f000 855a 	beq.w	8009706 <_dtoa_r+0xb3e>
 8008c52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008eb4 <_dtoa_r+0x2ec>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 855c 	beq.w	8009716 <_dtoa_r+0xb4e>
 8008c5e:	f10a 0303 	add.w	r3, sl, #3
 8008c62:	f000 bd56 	b.w	8009712 <_dtoa_r+0xb4a>
 8008c66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	ec51 0b17 	vmov	r0, r1, d7
 8008c70:	2300      	movs	r3, #0
 8008c72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008c76:	f7f7 ff7f 	bl	8000b78 <__aeabi_dcmpeq>
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	b158      	cbz	r0, 8008c96 <_dtoa_r+0xce>
 8008c7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c80:	2301      	movs	r3, #1
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c86:	b113      	cbz	r3, 8008c8e <_dtoa_r+0xc6>
 8008c88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c8a:	4b86      	ldr	r3, [pc, #536]	@ (8008ea4 <_dtoa_r+0x2dc>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008eb8 <_dtoa_r+0x2f0>
 8008c92:	f000 bd40 	b.w	8009716 <_dtoa_r+0xb4e>
 8008c96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008c9a:	aa14      	add	r2, sp, #80	@ 0x50
 8008c9c:	a915      	add	r1, sp, #84	@ 0x54
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	f001 f984 	bl	8009fac <__d2b>
 8008ca4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ca8:	9002      	str	r0, [sp, #8]
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	d078      	beq.n	8008da0 <_dtoa_r+0x1d8>
 8008cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cb0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008cc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008cc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008cc8:	4619      	mov	r1, r3
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4b76      	ldr	r3, [pc, #472]	@ (8008ea8 <_dtoa_r+0x2e0>)
 8008cce:	f7f7 fb33 	bl	8000338 <__aeabi_dsub>
 8008cd2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008e80 <_dtoa_r+0x2b8>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fce6 	bl	80006a8 <__aeabi_dmul>
 8008cdc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e88 <_dtoa_r+0x2c0>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fb2b 	bl	800033c <__adddf3>
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4630      	mov	r0, r6
 8008cea:	460d      	mov	r5, r1
 8008cec:	f7f7 fc72 	bl	80005d4 <__aeabi_i2d>
 8008cf0:	a367      	add	r3, pc, #412	@ (adr r3, 8008e90 <_dtoa_r+0x2c8>)
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f7f7 fcd7 	bl	80006a8 <__aeabi_dmul>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fb1b 	bl	800033c <__adddf3>
 8008d06:	4604      	mov	r4, r0
 8008d08:	460d      	mov	r5, r1
 8008d0a:	f7f7 ff7d 	bl	8000c08 <__aeabi_d2iz>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4607      	mov	r7, r0
 8008d12:	2300      	movs	r3, #0
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 ff38 	bl	8000b8c <__aeabi_dcmplt>
 8008d1c:	b140      	cbz	r0, 8008d30 <_dtoa_r+0x168>
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f7f7 fc58 	bl	80005d4 <__aeabi_i2d>
 8008d24:	4622      	mov	r2, r4
 8008d26:	462b      	mov	r3, r5
 8008d28:	f7f7 ff26 	bl	8000b78 <__aeabi_dcmpeq>
 8008d2c:	b900      	cbnz	r0, 8008d30 <_dtoa_r+0x168>
 8008d2e:	3f01      	subs	r7, #1
 8008d30:	2f16      	cmp	r7, #22
 8008d32:	d852      	bhi.n	8008dda <_dtoa_r+0x212>
 8008d34:	4b5d      	ldr	r3, [pc, #372]	@ (8008eac <_dtoa_r+0x2e4>)
 8008d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d42:	f7f7 ff23 	bl	8000b8c <__aeabi_dcmplt>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d049      	beq.n	8008dde <_dtoa_r+0x216>
 8008d4a:	3f01      	subs	r7, #1
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d52:	1b9b      	subs	r3, r3, r6
 8008d54:	1e5a      	subs	r2, r3, #1
 8008d56:	bf45      	ittet	mi
 8008d58:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d5c:	9300      	strmi	r3, [sp, #0]
 8008d5e:	2300      	movpl	r3, #0
 8008d60:	2300      	movmi	r3, #0
 8008d62:	9206      	str	r2, [sp, #24]
 8008d64:	bf54      	ite	pl
 8008d66:	9300      	strpl	r3, [sp, #0]
 8008d68:	9306      	strmi	r3, [sp, #24]
 8008d6a:	2f00      	cmp	r7, #0
 8008d6c:	db39      	blt.n	8008de2 <_dtoa_r+0x21a>
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	970d      	str	r7, [sp, #52]	@ 0x34
 8008d72:	443b      	add	r3, r7
 8008d74:	9306      	str	r3, [sp, #24]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9308      	str	r3, [sp, #32]
 8008d7a:	9b07      	ldr	r3, [sp, #28]
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d863      	bhi.n	8008e48 <_dtoa_r+0x280>
 8008d80:	2b05      	cmp	r3, #5
 8008d82:	bfc4      	itt	gt
 8008d84:	3b04      	subgt	r3, #4
 8008d86:	9307      	strgt	r3, [sp, #28]
 8008d88:	9b07      	ldr	r3, [sp, #28]
 8008d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d8e:	bfcc      	ite	gt
 8008d90:	2400      	movgt	r4, #0
 8008d92:	2401      	movle	r4, #1
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d863      	bhi.n	8008e60 <_dtoa_r+0x298>
 8008d98:	e8df f003 	tbb	[pc, r3]
 8008d9c:	2b375452 	.word	0x2b375452
 8008da0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008da4:	441e      	add	r6, r3
 8008da6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	bfc1      	itttt	gt
 8008dae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008db2:	409f      	lslgt	r7, r3
 8008db4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008db8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008dbc:	bfd6      	itet	le
 8008dbe:	f1c3 0320 	rsble	r3, r3, #32
 8008dc2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008dc6:	fa04 f003 	lslle.w	r0, r4, r3
 8008dca:	f7f7 fbf3 	bl	80005b4 <__aeabi_ui2d>
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008dd4:	3e01      	subs	r6, #1
 8008dd6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008dd8:	e776      	b.n	8008cc8 <_dtoa_r+0x100>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e7b7      	b.n	8008d4e <_dtoa_r+0x186>
 8008dde:	9010      	str	r0, [sp, #64]	@ 0x40
 8008de0:	e7b6      	b.n	8008d50 <_dtoa_r+0x188>
 8008de2:	9b00      	ldr	r3, [sp, #0]
 8008de4:	1bdb      	subs	r3, r3, r7
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	427b      	negs	r3, r7
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	2300      	movs	r3, #0
 8008dee:	930d      	str	r3, [sp, #52]	@ 0x34
 8008df0:	e7c3      	b.n	8008d7a <_dtoa_r+0x1b2>
 8008df2:	2301      	movs	r3, #1
 8008df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008df8:	eb07 0b03 	add.w	fp, r7, r3
 8008dfc:	f10b 0301 	add.w	r3, fp, #1
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	bfb8      	it	lt
 8008e06:	2301      	movlt	r3, #1
 8008e08:	e006      	b.n	8008e18 <_dtoa_r+0x250>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dd28      	ble.n	8008e66 <_dtoa_r+0x29e>
 8008e14:	469b      	mov	fp, r3
 8008e16:	9303      	str	r3, [sp, #12]
 8008e18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	2204      	movs	r2, #4
 8008e20:	f102 0514 	add.w	r5, r2, #20
 8008e24:	429d      	cmp	r5, r3
 8008e26:	d926      	bls.n	8008e76 <_dtoa_r+0x2ae>
 8008e28:	6041      	str	r1, [r0, #4]
 8008e2a:	4648      	mov	r0, r9
 8008e2c:	f000 fd9c 	bl	8009968 <_Balloc>
 8008e30:	4682      	mov	sl, r0
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d142      	bne.n	8008ebc <_dtoa_r+0x2f4>
 8008e36:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb0 <_dtoa_r+0x2e8>)
 8008e38:	4602      	mov	r2, r0
 8008e3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008e3e:	e6da      	b.n	8008bf6 <_dtoa_r+0x2e>
 8008e40:	2300      	movs	r3, #0
 8008e42:	e7e3      	b.n	8008e0c <_dtoa_r+0x244>
 8008e44:	2300      	movs	r3, #0
 8008e46:	e7d5      	b.n	8008df4 <_dtoa_r+0x22c>
 8008e48:	2401      	movs	r4, #1
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9307      	str	r3, [sp, #28]
 8008e4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008e50:	f04f 3bff 	mov.w	fp, #4294967295
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e5a:	2312      	movs	r3, #18
 8008e5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e5e:	e7db      	b.n	8008e18 <_dtoa_r+0x250>
 8008e60:	2301      	movs	r3, #1
 8008e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e64:	e7f4      	b.n	8008e50 <_dtoa_r+0x288>
 8008e66:	f04f 0b01 	mov.w	fp, #1
 8008e6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e6e:	465b      	mov	r3, fp
 8008e70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008e74:	e7d0      	b.n	8008e18 <_dtoa_r+0x250>
 8008e76:	3101      	adds	r1, #1
 8008e78:	0052      	lsls	r2, r2, #1
 8008e7a:	e7d1      	b.n	8008e20 <_dtoa_r+0x258>
 8008e7c:	f3af 8000 	nop.w
 8008e80:	636f4361 	.word	0x636f4361
 8008e84:	3fd287a7 	.word	0x3fd287a7
 8008e88:	8b60c8b3 	.word	0x8b60c8b3
 8008e8c:	3fc68a28 	.word	0x3fc68a28
 8008e90:	509f79fb 	.word	0x509f79fb
 8008e94:	3fd34413 	.word	0x3fd34413
 8008e98:	0800a99d 	.word	0x0800a99d
 8008e9c:	0800a9b4 	.word	0x0800a9b4
 8008ea0:	7ff00000 	.word	0x7ff00000
 8008ea4:	0800a96d 	.word	0x0800a96d
 8008ea8:	3ff80000 	.word	0x3ff80000
 8008eac:	0800ab08 	.word	0x0800ab08
 8008eb0:	0800aa0c 	.word	0x0800aa0c
 8008eb4:	0800a999 	.word	0x0800a999
 8008eb8:	0800a96c 	.word	0x0800a96c
 8008ebc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ec0:	6018      	str	r0, [r3, #0]
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	2b0e      	cmp	r3, #14
 8008ec6:	f200 80a1 	bhi.w	800900c <_dtoa_r+0x444>
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	f000 809e 	beq.w	800900c <_dtoa_r+0x444>
 8008ed0:	2f00      	cmp	r7, #0
 8008ed2:	dd33      	ble.n	8008f3c <_dtoa_r+0x374>
 8008ed4:	4b9c      	ldr	r3, [pc, #624]	@ (8009148 <_dtoa_r+0x580>)
 8008ed6:	f007 020f 	and.w	r2, r7, #15
 8008eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ede:	ed93 7b00 	vldr	d7, [r3]
 8008ee2:	05f8      	lsls	r0, r7, #23
 8008ee4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008ee8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008eec:	d516      	bpl.n	8008f1c <_dtoa_r+0x354>
 8008eee:	4b97      	ldr	r3, [pc, #604]	@ (800914c <_dtoa_r+0x584>)
 8008ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ef8:	f7f7 fd00 	bl	80008fc <__aeabi_ddiv>
 8008efc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f00:	f004 040f 	and.w	r4, r4, #15
 8008f04:	2603      	movs	r6, #3
 8008f06:	4d91      	ldr	r5, [pc, #580]	@ (800914c <_dtoa_r+0x584>)
 8008f08:	b954      	cbnz	r4, 8008f20 <_dtoa_r+0x358>
 8008f0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f12:	f7f7 fcf3 	bl	80008fc <__aeabi_ddiv>
 8008f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f1a:	e028      	b.n	8008f6e <_dtoa_r+0x3a6>
 8008f1c:	2602      	movs	r6, #2
 8008f1e:	e7f2      	b.n	8008f06 <_dtoa_r+0x33e>
 8008f20:	07e1      	lsls	r1, r4, #31
 8008f22:	d508      	bpl.n	8008f36 <_dtoa_r+0x36e>
 8008f24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f2c:	f7f7 fbbc 	bl	80006a8 <__aeabi_dmul>
 8008f30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f34:	3601      	adds	r6, #1
 8008f36:	1064      	asrs	r4, r4, #1
 8008f38:	3508      	adds	r5, #8
 8008f3a:	e7e5      	b.n	8008f08 <_dtoa_r+0x340>
 8008f3c:	f000 80af 	beq.w	800909e <_dtoa_r+0x4d6>
 8008f40:	427c      	negs	r4, r7
 8008f42:	4b81      	ldr	r3, [pc, #516]	@ (8009148 <_dtoa_r+0x580>)
 8008f44:	4d81      	ldr	r5, [pc, #516]	@ (800914c <_dtoa_r+0x584>)
 8008f46:	f004 020f 	and.w	r2, r4, #15
 8008f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f56:	f7f7 fba7 	bl	80006a8 <__aeabi_dmul>
 8008f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f5e:	1124      	asrs	r4, r4, #4
 8008f60:	2300      	movs	r3, #0
 8008f62:	2602      	movs	r6, #2
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	f040 808f 	bne.w	8009088 <_dtoa_r+0x4c0>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1d3      	bne.n	8008f16 <_dtoa_r+0x34e>
 8008f6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8094 	beq.w	80090a2 <_dtoa_r+0x4da>
 8008f7a:	4b75      	ldr	r3, [pc, #468]	@ (8009150 <_dtoa_r+0x588>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	f7f7 fe03 	bl	8000b8c <__aeabi_dcmplt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f000 808b 	beq.w	80090a2 <_dtoa_r+0x4da>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 8087 	beq.w	80090a2 <_dtoa_r+0x4da>
 8008f94:	f1bb 0f00 	cmp.w	fp, #0
 8008f98:	dd34      	ble.n	8009004 <_dtoa_r+0x43c>
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4b6d      	ldr	r3, [pc, #436]	@ (8009154 <_dtoa_r+0x58c>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7f7 fb81 	bl	80006a8 <__aeabi_dmul>
 8008fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008faa:	f107 38ff 	add.w	r8, r7, #4294967295
 8008fae:	3601      	adds	r6, #1
 8008fb0:	465c      	mov	r4, fp
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7f7 fb0e 	bl	80005d4 <__aeabi_i2d>
 8008fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fbc:	f7f7 fb74 	bl	80006a8 <__aeabi_dmul>
 8008fc0:	4b65      	ldr	r3, [pc, #404]	@ (8009158 <_dtoa_r+0x590>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f7f7 f9ba 	bl	800033c <__adddf3>
 8008fc8:	4605      	mov	r5, r0
 8008fca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	d16a      	bne.n	80090a8 <_dtoa_r+0x4e0>
 8008fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd6:	4b61      	ldr	r3, [pc, #388]	@ (800915c <_dtoa_r+0x594>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f7f7 f9ad 	bl	8000338 <__aeabi_dsub>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	4633      	mov	r3, r6
 8008fea:	f7f7 fded 	bl	8000bc8 <__aeabi_dcmpgt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f040 8298 	bne.w	8009524 <_dtoa_r+0x95c>
 8008ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ffe:	f7f7 fdc5 	bl	8000b8c <__aeabi_dcmplt>
 8009002:	bb38      	cbnz	r0, 8009054 <_dtoa_r+0x48c>
 8009004:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009008:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800900c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800900e:	2b00      	cmp	r3, #0
 8009010:	f2c0 8157 	blt.w	80092c2 <_dtoa_r+0x6fa>
 8009014:	2f0e      	cmp	r7, #14
 8009016:	f300 8154 	bgt.w	80092c2 <_dtoa_r+0x6fa>
 800901a:	4b4b      	ldr	r3, [pc, #300]	@ (8009148 <_dtoa_r+0x580>)
 800901c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009020:	ed93 7b00 	vldr	d7, [r3]
 8009024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009026:	2b00      	cmp	r3, #0
 8009028:	ed8d 7b00 	vstr	d7, [sp]
 800902c:	f280 80e5 	bge.w	80091fa <_dtoa_r+0x632>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f300 80e1 	bgt.w	80091fa <_dtoa_r+0x632>
 8009038:	d10c      	bne.n	8009054 <_dtoa_r+0x48c>
 800903a:	4b48      	ldr	r3, [pc, #288]	@ (800915c <_dtoa_r+0x594>)
 800903c:	2200      	movs	r2, #0
 800903e:	ec51 0b17 	vmov	r0, r1, d7
 8009042:	f7f7 fb31 	bl	80006a8 <__aeabi_dmul>
 8009046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800904a:	f7f7 fdb3 	bl	8000bb4 <__aeabi_dcmpge>
 800904e:	2800      	cmp	r0, #0
 8009050:	f000 8266 	beq.w	8009520 <_dtoa_r+0x958>
 8009054:	2400      	movs	r4, #0
 8009056:	4625      	mov	r5, r4
 8009058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800905a:	4656      	mov	r6, sl
 800905c:	ea6f 0803 	mvn.w	r8, r3
 8009060:	2700      	movs	r7, #0
 8009062:	4621      	mov	r1, r4
 8009064:	4648      	mov	r0, r9
 8009066:	f000 fcbf 	bl	80099e8 <_Bfree>
 800906a:	2d00      	cmp	r5, #0
 800906c:	f000 80bd 	beq.w	80091ea <_dtoa_r+0x622>
 8009070:	b12f      	cbz	r7, 800907e <_dtoa_r+0x4b6>
 8009072:	42af      	cmp	r7, r5
 8009074:	d003      	beq.n	800907e <_dtoa_r+0x4b6>
 8009076:	4639      	mov	r1, r7
 8009078:	4648      	mov	r0, r9
 800907a:	f000 fcb5 	bl	80099e8 <_Bfree>
 800907e:	4629      	mov	r1, r5
 8009080:	4648      	mov	r0, r9
 8009082:	f000 fcb1 	bl	80099e8 <_Bfree>
 8009086:	e0b0      	b.n	80091ea <_dtoa_r+0x622>
 8009088:	07e2      	lsls	r2, r4, #31
 800908a:	d505      	bpl.n	8009098 <_dtoa_r+0x4d0>
 800908c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009090:	f7f7 fb0a 	bl	80006a8 <__aeabi_dmul>
 8009094:	3601      	adds	r6, #1
 8009096:	2301      	movs	r3, #1
 8009098:	1064      	asrs	r4, r4, #1
 800909a:	3508      	adds	r5, #8
 800909c:	e762      	b.n	8008f64 <_dtoa_r+0x39c>
 800909e:	2602      	movs	r6, #2
 80090a0:	e765      	b.n	8008f6e <_dtoa_r+0x3a6>
 80090a2:	9c03      	ldr	r4, [sp, #12]
 80090a4:	46b8      	mov	r8, r7
 80090a6:	e784      	b.n	8008fb2 <_dtoa_r+0x3ea>
 80090a8:	4b27      	ldr	r3, [pc, #156]	@ (8009148 <_dtoa_r+0x580>)
 80090aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090b4:	4454      	add	r4, sl
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d054      	beq.n	8009164 <_dtoa_r+0x59c>
 80090ba:	4929      	ldr	r1, [pc, #164]	@ (8009160 <_dtoa_r+0x598>)
 80090bc:	2000      	movs	r0, #0
 80090be:	f7f7 fc1d 	bl	80008fc <__aeabi_ddiv>
 80090c2:	4633      	mov	r3, r6
 80090c4:	462a      	mov	r2, r5
 80090c6:	f7f7 f937 	bl	8000338 <__aeabi_dsub>
 80090ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090ce:	4656      	mov	r6, sl
 80090d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090d4:	f7f7 fd98 	bl	8000c08 <__aeabi_d2iz>
 80090d8:	4605      	mov	r5, r0
 80090da:	f7f7 fa7b 	bl	80005d4 <__aeabi_i2d>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090e6:	f7f7 f927 	bl	8000338 <__aeabi_dsub>
 80090ea:	3530      	adds	r5, #48	@ 0x30
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090f4:	f806 5b01 	strb.w	r5, [r6], #1
 80090f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090fc:	f7f7 fd46 	bl	8000b8c <__aeabi_dcmplt>
 8009100:	2800      	cmp	r0, #0
 8009102:	d172      	bne.n	80091ea <_dtoa_r+0x622>
 8009104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009108:	4911      	ldr	r1, [pc, #68]	@ (8009150 <_dtoa_r+0x588>)
 800910a:	2000      	movs	r0, #0
 800910c:	f7f7 f914 	bl	8000338 <__aeabi_dsub>
 8009110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009114:	f7f7 fd3a 	bl	8000b8c <__aeabi_dcmplt>
 8009118:	2800      	cmp	r0, #0
 800911a:	f040 80b4 	bne.w	8009286 <_dtoa_r+0x6be>
 800911e:	42a6      	cmp	r6, r4
 8009120:	f43f af70 	beq.w	8009004 <_dtoa_r+0x43c>
 8009124:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009128:	4b0a      	ldr	r3, [pc, #40]	@ (8009154 <_dtoa_r+0x58c>)
 800912a:	2200      	movs	r2, #0
 800912c:	f7f7 fabc 	bl	80006a8 <__aeabi_dmul>
 8009130:	4b08      	ldr	r3, [pc, #32]	@ (8009154 <_dtoa_r+0x58c>)
 8009132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009136:	2200      	movs	r2, #0
 8009138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800913c:	f7f7 fab4 	bl	80006a8 <__aeabi_dmul>
 8009140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009144:	e7c4      	b.n	80090d0 <_dtoa_r+0x508>
 8009146:	bf00      	nop
 8009148:	0800ab08 	.word	0x0800ab08
 800914c:	0800aae0 	.word	0x0800aae0
 8009150:	3ff00000 	.word	0x3ff00000
 8009154:	40240000 	.word	0x40240000
 8009158:	401c0000 	.word	0x401c0000
 800915c:	40140000 	.word	0x40140000
 8009160:	3fe00000 	.word	0x3fe00000
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	f7f7 fa9e 	bl	80006a8 <__aeabi_dmul>
 800916c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009170:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009172:	4656      	mov	r6, sl
 8009174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009178:	f7f7 fd46 	bl	8000c08 <__aeabi_d2iz>
 800917c:	4605      	mov	r5, r0
 800917e:	f7f7 fa29 	bl	80005d4 <__aeabi_i2d>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800918a:	f7f7 f8d5 	bl	8000338 <__aeabi_dsub>
 800918e:	3530      	adds	r5, #48	@ 0x30
 8009190:	f806 5b01 	strb.w	r5, [r6], #1
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	42a6      	cmp	r6, r4
 800919a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	d124      	bne.n	80091ee <_dtoa_r+0x626>
 80091a4:	4baf      	ldr	r3, [pc, #700]	@ (8009464 <_dtoa_r+0x89c>)
 80091a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80091aa:	f7f7 f8c7 	bl	800033c <__adddf3>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091b6:	f7f7 fd07 	bl	8000bc8 <__aeabi_dcmpgt>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d163      	bne.n	8009286 <_dtoa_r+0x6be>
 80091be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80091c2:	49a8      	ldr	r1, [pc, #672]	@ (8009464 <_dtoa_r+0x89c>)
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7f7 f8b7 	bl	8000338 <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091d2:	f7f7 fcdb 	bl	8000b8c <__aeabi_dcmplt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f af14 	beq.w	8009004 <_dtoa_r+0x43c>
 80091dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80091de:	1e73      	subs	r3, r6, #1
 80091e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091e6:	2b30      	cmp	r3, #48	@ 0x30
 80091e8:	d0f8      	beq.n	80091dc <_dtoa_r+0x614>
 80091ea:	4647      	mov	r7, r8
 80091ec:	e03b      	b.n	8009266 <_dtoa_r+0x69e>
 80091ee:	4b9e      	ldr	r3, [pc, #632]	@ (8009468 <_dtoa_r+0x8a0>)
 80091f0:	f7f7 fa5a 	bl	80006a8 <__aeabi_dmul>
 80091f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091f8:	e7bc      	b.n	8009174 <_dtoa_r+0x5ac>
 80091fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80091fe:	4656      	mov	r6, sl
 8009200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009204:	4620      	mov	r0, r4
 8009206:	4629      	mov	r1, r5
 8009208:	f7f7 fb78 	bl	80008fc <__aeabi_ddiv>
 800920c:	f7f7 fcfc 	bl	8000c08 <__aeabi_d2iz>
 8009210:	4680      	mov	r8, r0
 8009212:	f7f7 f9df 	bl	80005d4 <__aeabi_i2d>
 8009216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800921a:	f7f7 fa45 	bl	80006a8 <__aeabi_dmul>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	4620      	mov	r0, r4
 8009224:	4629      	mov	r1, r5
 8009226:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800922a:	f7f7 f885 	bl	8000338 <__aeabi_dsub>
 800922e:	f806 4b01 	strb.w	r4, [r6], #1
 8009232:	9d03      	ldr	r5, [sp, #12]
 8009234:	eba6 040a 	sub.w	r4, r6, sl
 8009238:	42a5      	cmp	r5, r4
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	d133      	bne.n	80092a8 <_dtoa_r+0x6e0>
 8009240:	f7f7 f87c 	bl	800033c <__adddf3>
 8009244:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	f7f7 fcbc 	bl	8000bc8 <__aeabi_dcmpgt>
 8009250:	b9c0      	cbnz	r0, 8009284 <_dtoa_r+0x6bc>
 8009252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009256:	4620      	mov	r0, r4
 8009258:	4629      	mov	r1, r5
 800925a:	f7f7 fc8d 	bl	8000b78 <__aeabi_dcmpeq>
 800925e:	b110      	cbz	r0, 8009266 <_dtoa_r+0x69e>
 8009260:	f018 0f01 	tst.w	r8, #1
 8009264:	d10e      	bne.n	8009284 <_dtoa_r+0x6bc>
 8009266:	9902      	ldr	r1, [sp, #8]
 8009268:	4648      	mov	r0, r9
 800926a:	f000 fbbd 	bl	80099e8 <_Bfree>
 800926e:	2300      	movs	r3, #0
 8009270:	7033      	strb	r3, [r6, #0]
 8009272:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009274:	3701      	adds	r7, #1
 8009276:	601f      	str	r7, [r3, #0]
 8009278:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 824b 	beq.w	8009716 <_dtoa_r+0xb4e>
 8009280:	601e      	str	r6, [r3, #0]
 8009282:	e248      	b.n	8009716 <_dtoa_r+0xb4e>
 8009284:	46b8      	mov	r8, r7
 8009286:	4633      	mov	r3, r6
 8009288:	461e      	mov	r6, r3
 800928a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800928e:	2a39      	cmp	r2, #57	@ 0x39
 8009290:	d106      	bne.n	80092a0 <_dtoa_r+0x6d8>
 8009292:	459a      	cmp	sl, r3
 8009294:	d1f8      	bne.n	8009288 <_dtoa_r+0x6c0>
 8009296:	2230      	movs	r2, #48	@ 0x30
 8009298:	f108 0801 	add.w	r8, r8, #1
 800929c:	f88a 2000 	strb.w	r2, [sl]
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	3201      	adds	r2, #1
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e7a0      	b.n	80091ea <_dtoa_r+0x622>
 80092a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009468 <_dtoa_r+0x8a0>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7f7 f9fc 	bl	80006a8 <__aeabi_dmul>
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	f7f7 fc5e 	bl	8000b78 <__aeabi_dcmpeq>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d09f      	beq.n	8009200 <_dtoa_r+0x638>
 80092c0:	e7d1      	b.n	8009266 <_dtoa_r+0x69e>
 80092c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	f000 80ea 	beq.w	800949e <_dtoa_r+0x8d6>
 80092ca:	9a07      	ldr	r2, [sp, #28]
 80092cc:	2a01      	cmp	r2, #1
 80092ce:	f300 80cd 	bgt.w	800946c <_dtoa_r+0x8a4>
 80092d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80092d4:	2a00      	cmp	r2, #0
 80092d6:	f000 80c1 	beq.w	800945c <_dtoa_r+0x894>
 80092da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80092de:	9c08      	ldr	r4, [sp, #32]
 80092e0:	9e00      	ldr	r6, [sp, #0]
 80092e2:	9a00      	ldr	r2, [sp, #0]
 80092e4:	441a      	add	r2, r3
 80092e6:	9200      	str	r2, [sp, #0]
 80092e8:	9a06      	ldr	r2, [sp, #24]
 80092ea:	2101      	movs	r1, #1
 80092ec:	441a      	add	r2, r3
 80092ee:	4648      	mov	r0, r9
 80092f0:	9206      	str	r2, [sp, #24]
 80092f2:	f000 fc2d 	bl	8009b50 <__i2b>
 80092f6:	4605      	mov	r5, r0
 80092f8:	b166      	cbz	r6, 8009314 <_dtoa_r+0x74c>
 80092fa:	9b06      	ldr	r3, [sp, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	dd09      	ble.n	8009314 <_dtoa_r+0x74c>
 8009300:	42b3      	cmp	r3, r6
 8009302:	9a00      	ldr	r2, [sp, #0]
 8009304:	bfa8      	it	ge
 8009306:	4633      	movge	r3, r6
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	9200      	str	r2, [sp, #0]
 800930c:	9a06      	ldr	r2, [sp, #24]
 800930e:	1af6      	subs	r6, r6, r3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	9306      	str	r3, [sp, #24]
 8009314:	9b08      	ldr	r3, [sp, #32]
 8009316:	b30b      	cbz	r3, 800935c <_dtoa_r+0x794>
 8009318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 80c6 	beq.w	80094ac <_dtoa_r+0x8e4>
 8009320:	2c00      	cmp	r4, #0
 8009322:	f000 80c0 	beq.w	80094a6 <_dtoa_r+0x8de>
 8009326:	4629      	mov	r1, r5
 8009328:	4622      	mov	r2, r4
 800932a:	4648      	mov	r0, r9
 800932c:	f000 fcc8 	bl	8009cc0 <__pow5mult>
 8009330:	9a02      	ldr	r2, [sp, #8]
 8009332:	4601      	mov	r1, r0
 8009334:	4605      	mov	r5, r0
 8009336:	4648      	mov	r0, r9
 8009338:	f000 fc20 	bl	8009b7c <__multiply>
 800933c:	9902      	ldr	r1, [sp, #8]
 800933e:	4680      	mov	r8, r0
 8009340:	4648      	mov	r0, r9
 8009342:	f000 fb51 	bl	80099e8 <_Bfree>
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	1b1b      	subs	r3, r3, r4
 800934a:	9308      	str	r3, [sp, #32]
 800934c:	f000 80b1 	beq.w	80094b2 <_dtoa_r+0x8ea>
 8009350:	9a08      	ldr	r2, [sp, #32]
 8009352:	4641      	mov	r1, r8
 8009354:	4648      	mov	r0, r9
 8009356:	f000 fcb3 	bl	8009cc0 <__pow5mult>
 800935a:	9002      	str	r0, [sp, #8]
 800935c:	2101      	movs	r1, #1
 800935e:	4648      	mov	r0, r9
 8009360:	f000 fbf6 	bl	8009b50 <__i2b>
 8009364:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009366:	4604      	mov	r4, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 81d8 	beq.w	800971e <_dtoa_r+0xb56>
 800936e:	461a      	mov	r2, r3
 8009370:	4601      	mov	r1, r0
 8009372:	4648      	mov	r0, r9
 8009374:	f000 fca4 	bl	8009cc0 <__pow5mult>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	2b01      	cmp	r3, #1
 800937c:	4604      	mov	r4, r0
 800937e:	f300 809f 	bgt.w	80094c0 <_dtoa_r+0x8f8>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f040 8097 	bne.w	80094b8 <_dtoa_r+0x8f0>
 800938a:	9b05      	ldr	r3, [sp, #20]
 800938c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 8093 	bne.w	80094bc <_dtoa_r+0x8f4>
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800939c:	0d1b      	lsrs	r3, r3, #20
 800939e:	051b      	lsls	r3, r3, #20
 80093a0:	b133      	cbz	r3, 80093b0 <_dtoa_r+0x7e8>
 80093a2:	9b00      	ldr	r3, [sp, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	9b06      	ldr	r3, [sp, #24]
 80093aa:	3301      	adds	r3, #1
 80093ac:	9306      	str	r3, [sp, #24]
 80093ae:	2301      	movs	r3, #1
 80093b0:	9308      	str	r3, [sp, #32]
 80093b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 81b8 	beq.w	800972a <_dtoa_r+0xb62>
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093c0:	6918      	ldr	r0, [r3, #16]
 80093c2:	f000 fb79 	bl	8009ab8 <__hi0bits>
 80093c6:	f1c0 0020 	rsb	r0, r0, #32
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	4418      	add	r0, r3
 80093ce:	f010 001f 	ands.w	r0, r0, #31
 80093d2:	f000 8082 	beq.w	80094da <_dtoa_r+0x912>
 80093d6:	f1c0 0320 	rsb	r3, r0, #32
 80093da:	2b04      	cmp	r3, #4
 80093dc:	dd73      	ble.n	80094c6 <_dtoa_r+0x8fe>
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	f1c0 001c 	rsb	r0, r0, #28
 80093e4:	4403      	add	r3, r0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	9b06      	ldr	r3, [sp, #24]
 80093ea:	4403      	add	r3, r0
 80093ec:	4406      	add	r6, r0
 80093ee:	9306      	str	r3, [sp, #24]
 80093f0:	9b00      	ldr	r3, [sp, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd05      	ble.n	8009402 <_dtoa_r+0x83a>
 80093f6:	9902      	ldr	r1, [sp, #8]
 80093f8:	461a      	mov	r2, r3
 80093fa:	4648      	mov	r0, r9
 80093fc:	f000 fcba 	bl	8009d74 <__lshift>
 8009400:	9002      	str	r0, [sp, #8]
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd05      	ble.n	8009414 <_dtoa_r+0x84c>
 8009408:	4621      	mov	r1, r4
 800940a:	461a      	mov	r2, r3
 800940c:	4648      	mov	r0, r9
 800940e:	f000 fcb1 	bl	8009d74 <__lshift>
 8009412:	4604      	mov	r4, r0
 8009414:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d061      	beq.n	80094de <_dtoa_r+0x916>
 800941a:	9802      	ldr	r0, [sp, #8]
 800941c:	4621      	mov	r1, r4
 800941e:	f000 fd15 	bl	8009e4c <__mcmp>
 8009422:	2800      	cmp	r0, #0
 8009424:	da5b      	bge.n	80094de <_dtoa_r+0x916>
 8009426:	2300      	movs	r3, #0
 8009428:	9902      	ldr	r1, [sp, #8]
 800942a:	220a      	movs	r2, #10
 800942c:	4648      	mov	r0, r9
 800942e:	f000 fafd 	bl	8009a2c <__multadd>
 8009432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009434:	9002      	str	r0, [sp, #8]
 8009436:	f107 38ff 	add.w	r8, r7, #4294967295
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 8177 	beq.w	800972e <_dtoa_r+0xb66>
 8009440:	4629      	mov	r1, r5
 8009442:	2300      	movs	r3, #0
 8009444:	220a      	movs	r2, #10
 8009446:	4648      	mov	r0, r9
 8009448:	f000 faf0 	bl	8009a2c <__multadd>
 800944c:	f1bb 0f00 	cmp.w	fp, #0
 8009450:	4605      	mov	r5, r0
 8009452:	dc6f      	bgt.n	8009534 <_dtoa_r+0x96c>
 8009454:	9b07      	ldr	r3, [sp, #28]
 8009456:	2b02      	cmp	r3, #2
 8009458:	dc49      	bgt.n	80094ee <_dtoa_r+0x926>
 800945a:	e06b      	b.n	8009534 <_dtoa_r+0x96c>
 800945c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800945e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009462:	e73c      	b.n	80092de <_dtoa_r+0x716>
 8009464:	3fe00000 	.word	0x3fe00000
 8009468:	40240000 	.word	0x40240000
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	1e5c      	subs	r4, r3, #1
 8009470:	9b08      	ldr	r3, [sp, #32]
 8009472:	42a3      	cmp	r3, r4
 8009474:	db09      	blt.n	800948a <_dtoa_r+0x8c2>
 8009476:	1b1c      	subs	r4, r3, r4
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f6bf af30 	bge.w	80092e0 <_dtoa_r+0x718>
 8009480:	9b00      	ldr	r3, [sp, #0]
 8009482:	9a03      	ldr	r2, [sp, #12]
 8009484:	1a9e      	subs	r6, r3, r2
 8009486:	2300      	movs	r3, #0
 8009488:	e72b      	b.n	80092e2 <_dtoa_r+0x71a>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800948e:	9408      	str	r4, [sp, #32]
 8009490:	1ae3      	subs	r3, r4, r3
 8009492:	441a      	add	r2, r3
 8009494:	9e00      	ldr	r6, [sp, #0]
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	920d      	str	r2, [sp, #52]	@ 0x34
 800949a:	2400      	movs	r4, #0
 800949c:	e721      	b.n	80092e2 <_dtoa_r+0x71a>
 800949e:	9c08      	ldr	r4, [sp, #32]
 80094a0:	9e00      	ldr	r6, [sp, #0]
 80094a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80094a4:	e728      	b.n	80092f8 <_dtoa_r+0x730>
 80094a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80094aa:	e751      	b.n	8009350 <_dtoa_r+0x788>
 80094ac:	9a08      	ldr	r2, [sp, #32]
 80094ae:	9902      	ldr	r1, [sp, #8]
 80094b0:	e750      	b.n	8009354 <_dtoa_r+0x78c>
 80094b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80094b6:	e751      	b.n	800935c <_dtoa_r+0x794>
 80094b8:	2300      	movs	r3, #0
 80094ba:	e779      	b.n	80093b0 <_dtoa_r+0x7e8>
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	e777      	b.n	80093b0 <_dtoa_r+0x7e8>
 80094c0:	2300      	movs	r3, #0
 80094c2:	9308      	str	r3, [sp, #32]
 80094c4:	e779      	b.n	80093ba <_dtoa_r+0x7f2>
 80094c6:	d093      	beq.n	80093f0 <_dtoa_r+0x828>
 80094c8:	9a00      	ldr	r2, [sp, #0]
 80094ca:	331c      	adds	r3, #28
 80094cc:	441a      	add	r2, r3
 80094ce:	9200      	str	r2, [sp, #0]
 80094d0:	9a06      	ldr	r2, [sp, #24]
 80094d2:	441a      	add	r2, r3
 80094d4:	441e      	add	r6, r3
 80094d6:	9206      	str	r2, [sp, #24]
 80094d8:	e78a      	b.n	80093f0 <_dtoa_r+0x828>
 80094da:	4603      	mov	r3, r0
 80094dc:	e7f4      	b.n	80094c8 <_dtoa_r+0x900>
 80094de:	9b03      	ldr	r3, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	46b8      	mov	r8, r7
 80094e4:	dc20      	bgt.n	8009528 <_dtoa_r+0x960>
 80094e6:	469b      	mov	fp, r3
 80094e8:	9b07      	ldr	r3, [sp, #28]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	dd1e      	ble.n	800952c <_dtoa_r+0x964>
 80094ee:	f1bb 0f00 	cmp.w	fp, #0
 80094f2:	f47f adb1 	bne.w	8009058 <_dtoa_r+0x490>
 80094f6:	4621      	mov	r1, r4
 80094f8:	465b      	mov	r3, fp
 80094fa:	2205      	movs	r2, #5
 80094fc:	4648      	mov	r0, r9
 80094fe:	f000 fa95 	bl	8009a2c <__multadd>
 8009502:	4601      	mov	r1, r0
 8009504:	4604      	mov	r4, r0
 8009506:	9802      	ldr	r0, [sp, #8]
 8009508:	f000 fca0 	bl	8009e4c <__mcmp>
 800950c:	2800      	cmp	r0, #0
 800950e:	f77f ada3 	ble.w	8009058 <_dtoa_r+0x490>
 8009512:	4656      	mov	r6, sl
 8009514:	2331      	movs	r3, #49	@ 0x31
 8009516:	f806 3b01 	strb.w	r3, [r6], #1
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	e59f      	b.n	8009060 <_dtoa_r+0x498>
 8009520:	9c03      	ldr	r4, [sp, #12]
 8009522:	46b8      	mov	r8, r7
 8009524:	4625      	mov	r5, r4
 8009526:	e7f4      	b.n	8009512 <_dtoa_r+0x94a>
 8009528:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800952c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8101 	beq.w	8009736 <_dtoa_r+0xb6e>
 8009534:	2e00      	cmp	r6, #0
 8009536:	dd05      	ble.n	8009544 <_dtoa_r+0x97c>
 8009538:	4629      	mov	r1, r5
 800953a:	4632      	mov	r2, r6
 800953c:	4648      	mov	r0, r9
 800953e:	f000 fc19 	bl	8009d74 <__lshift>
 8009542:	4605      	mov	r5, r0
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d05c      	beq.n	8009604 <_dtoa_r+0xa3c>
 800954a:	6869      	ldr	r1, [r5, #4]
 800954c:	4648      	mov	r0, r9
 800954e:	f000 fa0b 	bl	8009968 <_Balloc>
 8009552:	4606      	mov	r6, r0
 8009554:	b928      	cbnz	r0, 8009562 <_dtoa_r+0x99a>
 8009556:	4b82      	ldr	r3, [pc, #520]	@ (8009760 <_dtoa_r+0xb98>)
 8009558:	4602      	mov	r2, r0
 800955a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800955e:	f7ff bb4a 	b.w	8008bf6 <_dtoa_r+0x2e>
 8009562:	692a      	ldr	r2, [r5, #16]
 8009564:	3202      	adds	r2, #2
 8009566:	0092      	lsls	r2, r2, #2
 8009568:	f105 010c 	add.w	r1, r5, #12
 800956c:	300c      	adds	r0, #12
 800956e:	f7ff fa94 	bl	8008a9a <memcpy>
 8009572:	2201      	movs	r2, #1
 8009574:	4631      	mov	r1, r6
 8009576:	4648      	mov	r0, r9
 8009578:	f000 fbfc 	bl	8009d74 <__lshift>
 800957c:	f10a 0301 	add.w	r3, sl, #1
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	eb0a 030b 	add.w	r3, sl, fp
 8009586:	9308      	str	r3, [sp, #32]
 8009588:	9b04      	ldr	r3, [sp, #16]
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	462f      	mov	r7, r5
 8009590:	9306      	str	r3, [sp, #24]
 8009592:	4605      	mov	r5, r0
 8009594:	9b00      	ldr	r3, [sp, #0]
 8009596:	9802      	ldr	r0, [sp, #8]
 8009598:	4621      	mov	r1, r4
 800959a:	f103 3bff 	add.w	fp, r3, #4294967295
 800959e:	f7ff fa8a 	bl	8008ab6 <quorem>
 80095a2:	4603      	mov	r3, r0
 80095a4:	3330      	adds	r3, #48	@ 0x30
 80095a6:	9003      	str	r0, [sp, #12]
 80095a8:	4639      	mov	r1, r7
 80095aa:	9802      	ldr	r0, [sp, #8]
 80095ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ae:	f000 fc4d 	bl	8009e4c <__mcmp>
 80095b2:	462a      	mov	r2, r5
 80095b4:	9004      	str	r0, [sp, #16]
 80095b6:	4621      	mov	r1, r4
 80095b8:	4648      	mov	r0, r9
 80095ba:	f000 fc63 	bl	8009e84 <__mdiff>
 80095be:	68c2      	ldr	r2, [r0, #12]
 80095c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c2:	4606      	mov	r6, r0
 80095c4:	bb02      	cbnz	r2, 8009608 <_dtoa_r+0xa40>
 80095c6:	4601      	mov	r1, r0
 80095c8:	9802      	ldr	r0, [sp, #8]
 80095ca:	f000 fc3f 	bl	8009e4c <__mcmp>
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	4602      	mov	r2, r0
 80095d2:	4631      	mov	r1, r6
 80095d4:	4648      	mov	r0, r9
 80095d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80095d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095da:	f000 fa05 	bl	80099e8 <_Bfree>
 80095de:	9b07      	ldr	r3, [sp, #28]
 80095e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80095e2:	9e00      	ldr	r6, [sp, #0]
 80095e4:	ea42 0103 	orr.w	r1, r2, r3
 80095e8:	9b06      	ldr	r3, [sp, #24]
 80095ea:	4319      	orrs	r1, r3
 80095ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ee:	d10d      	bne.n	800960c <_dtoa_r+0xa44>
 80095f0:	2b39      	cmp	r3, #57	@ 0x39
 80095f2:	d027      	beq.n	8009644 <_dtoa_r+0xa7c>
 80095f4:	9a04      	ldr	r2, [sp, #16]
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	dd01      	ble.n	80095fe <_dtoa_r+0xa36>
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	3331      	adds	r3, #49	@ 0x31
 80095fe:	f88b 3000 	strb.w	r3, [fp]
 8009602:	e52e      	b.n	8009062 <_dtoa_r+0x49a>
 8009604:	4628      	mov	r0, r5
 8009606:	e7b9      	b.n	800957c <_dtoa_r+0x9b4>
 8009608:	2201      	movs	r2, #1
 800960a:	e7e2      	b.n	80095d2 <_dtoa_r+0xa0a>
 800960c:	9904      	ldr	r1, [sp, #16]
 800960e:	2900      	cmp	r1, #0
 8009610:	db04      	blt.n	800961c <_dtoa_r+0xa54>
 8009612:	9807      	ldr	r0, [sp, #28]
 8009614:	4301      	orrs	r1, r0
 8009616:	9806      	ldr	r0, [sp, #24]
 8009618:	4301      	orrs	r1, r0
 800961a:	d120      	bne.n	800965e <_dtoa_r+0xa96>
 800961c:	2a00      	cmp	r2, #0
 800961e:	ddee      	ble.n	80095fe <_dtoa_r+0xa36>
 8009620:	9902      	ldr	r1, [sp, #8]
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	2201      	movs	r2, #1
 8009626:	4648      	mov	r0, r9
 8009628:	f000 fba4 	bl	8009d74 <__lshift>
 800962c:	4621      	mov	r1, r4
 800962e:	9002      	str	r0, [sp, #8]
 8009630:	f000 fc0c 	bl	8009e4c <__mcmp>
 8009634:	2800      	cmp	r0, #0
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	dc02      	bgt.n	8009640 <_dtoa_r+0xa78>
 800963a:	d1e0      	bne.n	80095fe <_dtoa_r+0xa36>
 800963c:	07da      	lsls	r2, r3, #31
 800963e:	d5de      	bpl.n	80095fe <_dtoa_r+0xa36>
 8009640:	2b39      	cmp	r3, #57	@ 0x39
 8009642:	d1da      	bne.n	80095fa <_dtoa_r+0xa32>
 8009644:	2339      	movs	r3, #57	@ 0x39
 8009646:	f88b 3000 	strb.w	r3, [fp]
 800964a:	4633      	mov	r3, r6
 800964c:	461e      	mov	r6, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009654:	2a39      	cmp	r2, #57	@ 0x39
 8009656:	d04e      	beq.n	80096f6 <_dtoa_r+0xb2e>
 8009658:	3201      	adds	r2, #1
 800965a:	701a      	strb	r2, [r3, #0]
 800965c:	e501      	b.n	8009062 <_dtoa_r+0x49a>
 800965e:	2a00      	cmp	r2, #0
 8009660:	dd03      	ble.n	800966a <_dtoa_r+0xaa2>
 8009662:	2b39      	cmp	r3, #57	@ 0x39
 8009664:	d0ee      	beq.n	8009644 <_dtoa_r+0xa7c>
 8009666:	3301      	adds	r3, #1
 8009668:	e7c9      	b.n	80095fe <_dtoa_r+0xa36>
 800966a:	9a00      	ldr	r2, [sp, #0]
 800966c:	9908      	ldr	r1, [sp, #32]
 800966e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009672:	428a      	cmp	r2, r1
 8009674:	d028      	beq.n	80096c8 <_dtoa_r+0xb00>
 8009676:	9902      	ldr	r1, [sp, #8]
 8009678:	2300      	movs	r3, #0
 800967a:	220a      	movs	r2, #10
 800967c:	4648      	mov	r0, r9
 800967e:	f000 f9d5 	bl	8009a2c <__multadd>
 8009682:	42af      	cmp	r7, r5
 8009684:	9002      	str	r0, [sp, #8]
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	f04f 020a 	mov.w	r2, #10
 800968e:	4639      	mov	r1, r7
 8009690:	4648      	mov	r0, r9
 8009692:	d107      	bne.n	80096a4 <_dtoa_r+0xadc>
 8009694:	f000 f9ca 	bl	8009a2c <__multadd>
 8009698:	4607      	mov	r7, r0
 800969a:	4605      	mov	r5, r0
 800969c:	9b00      	ldr	r3, [sp, #0]
 800969e:	3301      	adds	r3, #1
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	e777      	b.n	8009594 <_dtoa_r+0x9cc>
 80096a4:	f000 f9c2 	bl	8009a2c <__multadd>
 80096a8:	4629      	mov	r1, r5
 80096aa:	4607      	mov	r7, r0
 80096ac:	2300      	movs	r3, #0
 80096ae:	220a      	movs	r2, #10
 80096b0:	4648      	mov	r0, r9
 80096b2:	f000 f9bb 	bl	8009a2c <__multadd>
 80096b6:	4605      	mov	r5, r0
 80096b8:	e7f0      	b.n	800969c <_dtoa_r+0xad4>
 80096ba:	f1bb 0f00 	cmp.w	fp, #0
 80096be:	bfcc      	ite	gt
 80096c0:	465e      	movgt	r6, fp
 80096c2:	2601      	movle	r6, #1
 80096c4:	4456      	add	r6, sl
 80096c6:	2700      	movs	r7, #0
 80096c8:	9902      	ldr	r1, [sp, #8]
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	2201      	movs	r2, #1
 80096ce:	4648      	mov	r0, r9
 80096d0:	f000 fb50 	bl	8009d74 <__lshift>
 80096d4:	4621      	mov	r1, r4
 80096d6:	9002      	str	r0, [sp, #8]
 80096d8:	f000 fbb8 	bl	8009e4c <__mcmp>
 80096dc:	2800      	cmp	r0, #0
 80096de:	dcb4      	bgt.n	800964a <_dtoa_r+0xa82>
 80096e0:	d102      	bne.n	80096e8 <_dtoa_r+0xb20>
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	07db      	lsls	r3, r3, #31
 80096e6:	d4b0      	bmi.n	800964a <_dtoa_r+0xa82>
 80096e8:	4633      	mov	r3, r6
 80096ea:	461e      	mov	r6, r3
 80096ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f0:	2a30      	cmp	r2, #48	@ 0x30
 80096f2:	d0fa      	beq.n	80096ea <_dtoa_r+0xb22>
 80096f4:	e4b5      	b.n	8009062 <_dtoa_r+0x49a>
 80096f6:	459a      	cmp	sl, r3
 80096f8:	d1a8      	bne.n	800964c <_dtoa_r+0xa84>
 80096fa:	2331      	movs	r3, #49	@ 0x31
 80096fc:	f108 0801 	add.w	r8, r8, #1
 8009700:	f88a 3000 	strb.w	r3, [sl]
 8009704:	e4ad      	b.n	8009062 <_dtoa_r+0x49a>
 8009706:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009708:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009764 <_dtoa_r+0xb9c>
 800970c:	b11b      	cbz	r3, 8009716 <_dtoa_r+0xb4e>
 800970e:	f10a 0308 	add.w	r3, sl, #8
 8009712:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	4650      	mov	r0, sl
 8009718:	b017      	add	sp, #92	@ 0x5c
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	9b07      	ldr	r3, [sp, #28]
 8009720:	2b01      	cmp	r3, #1
 8009722:	f77f ae2e 	ble.w	8009382 <_dtoa_r+0x7ba>
 8009726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009728:	9308      	str	r3, [sp, #32]
 800972a:	2001      	movs	r0, #1
 800972c:	e64d      	b.n	80093ca <_dtoa_r+0x802>
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	f77f aed9 	ble.w	80094e8 <_dtoa_r+0x920>
 8009736:	4656      	mov	r6, sl
 8009738:	9802      	ldr	r0, [sp, #8]
 800973a:	4621      	mov	r1, r4
 800973c:	f7ff f9bb 	bl	8008ab6 <quorem>
 8009740:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009744:	f806 3b01 	strb.w	r3, [r6], #1
 8009748:	eba6 020a 	sub.w	r2, r6, sl
 800974c:	4593      	cmp	fp, r2
 800974e:	ddb4      	ble.n	80096ba <_dtoa_r+0xaf2>
 8009750:	9902      	ldr	r1, [sp, #8]
 8009752:	2300      	movs	r3, #0
 8009754:	220a      	movs	r2, #10
 8009756:	4648      	mov	r0, r9
 8009758:	f000 f968 	bl	8009a2c <__multadd>
 800975c:	9002      	str	r0, [sp, #8]
 800975e:	e7eb      	b.n	8009738 <_dtoa_r+0xb70>
 8009760:	0800aa0c 	.word	0x0800aa0c
 8009764:	0800a990 	.word	0x0800a990

08009768 <_free_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4605      	mov	r5, r0
 800976c:	2900      	cmp	r1, #0
 800976e:	d041      	beq.n	80097f4 <_free_r+0x8c>
 8009770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009774:	1f0c      	subs	r4, r1, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfb8      	it	lt
 800977a:	18e4      	addlt	r4, r4, r3
 800977c:	f000 f8e8 	bl	8009950 <__malloc_lock>
 8009780:	4a1d      	ldr	r2, [pc, #116]	@ (80097f8 <_free_r+0x90>)
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	b933      	cbnz	r3, 8009794 <_free_r+0x2c>
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	4628      	mov	r0, r5
 800978c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009790:	f000 b8e4 	b.w	800995c <__malloc_unlock>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d908      	bls.n	80097aa <_free_r+0x42>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	1821      	adds	r1, r4, r0
 800979c:	428b      	cmp	r3, r1
 800979e:	bf01      	itttt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	1809      	addeq	r1, r1, r0
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	e7ed      	b.n	8009786 <_free_r+0x1e>
 80097aa:	461a      	mov	r2, r3
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b10b      	cbz	r3, 80097b4 <_free_r+0x4c>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d9fa      	bls.n	80097aa <_free_r+0x42>
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	1850      	adds	r0, r2, r1
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d10b      	bne.n	80097d4 <_free_r+0x6c>
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	4401      	add	r1, r0
 80097c0:	1850      	adds	r0, r2, r1
 80097c2:	4283      	cmp	r3, r0
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	d1e0      	bne.n	800978a <_free_r+0x22>
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	6053      	str	r3, [r2, #4]
 80097ce:	4408      	add	r0, r1
 80097d0:	6010      	str	r0, [r2, #0]
 80097d2:	e7da      	b.n	800978a <_free_r+0x22>
 80097d4:	d902      	bls.n	80097dc <_free_r+0x74>
 80097d6:	230c      	movs	r3, #12
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	e7d6      	b.n	800978a <_free_r+0x22>
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	1821      	adds	r1, r4, r0
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf04      	itt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	bf04      	itt	eq
 80097ec:	1809      	addeq	r1, r1, r0
 80097ee:	6021      	streq	r1, [r4, #0]
 80097f0:	6054      	str	r4, [r2, #4]
 80097f2:	e7ca      	b.n	800978a <_free_r+0x22>
 80097f4:	bd38      	pop	{r3, r4, r5, pc}
 80097f6:	bf00      	nop
 80097f8:	2000c3bc 	.word	0x2000c3bc

080097fc <malloc>:
 80097fc:	4b02      	ldr	r3, [pc, #8]	@ (8009808 <malloc+0xc>)
 80097fe:	4601      	mov	r1, r0
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	f000 b825 	b.w	8009850 <_malloc_r>
 8009806:	bf00      	nop
 8009808:	20000024 	.word	0x20000024

0800980c <sbrk_aligned>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4e0f      	ldr	r6, [pc, #60]	@ (800984c <sbrk_aligned+0x40>)
 8009810:	460c      	mov	r4, r1
 8009812:	6831      	ldr	r1, [r6, #0]
 8009814:	4605      	mov	r5, r0
 8009816:	b911      	cbnz	r1, 800981e <sbrk_aligned+0x12>
 8009818:	f000 fccc 	bl	800a1b4 <_sbrk_r>
 800981c:	6030      	str	r0, [r6, #0]
 800981e:	4621      	mov	r1, r4
 8009820:	4628      	mov	r0, r5
 8009822:	f000 fcc7 	bl	800a1b4 <_sbrk_r>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d103      	bne.n	8009832 <sbrk_aligned+0x26>
 800982a:	f04f 34ff 	mov.w	r4, #4294967295
 800982e:	4620      	mov	r0, r4
 8009830:	bd70      	pop	{r4, r5, r6, pc}
 8009832:	1cc4      	adds	r4, r0, #3
 8009834:	f024 0403 	bic.w	r4, r4, #3
 8009838:	42a0      	cmp	r0, r4
 800983a:	d0f8      	beq.n	800982e <sbrk_aligned+0x22>
 800983c:	1a21      	subs	r1, r4, r0
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fcb8 	bl	800a1b4 <_sbrk_r>
 8009844:	3001      	adds	r0, #1
 8009846:	d1f2      	bne.n	800982e <sbrk_aligned+0x22>
 8009848:	e7ef      	b.n	800982a <sbrk_aligned+0x1e>
 800984a:	bf00      	nop
 800984c:	2000c3b8 	.word	0x2000c3b8

08009850 <_malloc_r>:
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	1ccd      	adds	r5, r1, #3
 8009856:	f025 0503 	bic.w	r5, r5, #3
 800985a:	3508      	adds	r5, #8
 800985c:	2d0c      	cmp	r5, #12
 800985e:	bf38      	it	cc
 8009860:	250c      	movcc	r5, #12
 8009862:	2d00      	cmp	r5, #0
 8009864:	4606      	mov	r6, r0
 8009866:	db01      	blt.n	800986c <_malloc_r+0x1c>
 8009868:	42a9      	cmp	r1, r5
 800986a:	d904      	bls.n	8009876 <_malloc_r+0x26>
 800986c:	230c      	movs	r3, #12
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	2000      	movs	r0, #0
 8009872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800994c <_malloc_r+0xfc>
 800987a:	f000 f869 	bl	8009950 <__malloc_lock>
 800987e:	f8d8 3000 	ldr.w	r3, [r8]
 8009882:	461c      	mov	r4, r3
 8009884:	bb44      	cbnz	r4, 80098d8 <_malloc_r+0x88>
 8009886:	4629      	mov	r1, r5
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff ffbf 	bl	800980c <sbrk_aligned>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	4604      	mov	r4, r0
 8009892:	d158      	bne.n	8009946 <_malloc_r+0xf6>
 8009894:	f8d8 4000 	ldr.w	r4, [r8]
 8009898:	4627      	mov	r7, r4
 800989a:	2f00      	cmp	r7, #0
 800989c:	d143      	bne.n	8009926 <_malloc_r+0xd6>
 800989e:	2c00      	cmp	r4, #0
 80098a0:	d04b      	beq.n	800993a <_malloc_r+0xea>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	4639      	mov	r1, r7
 80098a6:	4630      	mov	r0, r6
 80098a8:	eb04 0903 	add.w	r9, r4, r3
 80098ac:	f000 fc82 	bl	800a1b4 <_sbrk_r>
 80098b0:	4581      	cmp	r9, r0
 80098b2:	d142      	bne.n	800993a <_malloc_r+0xea>
 80098b4:	6821      	ldr	r1, [r4, #0]
 80098b6:	1a6d      	subs	r5, r5, r1
 80098b8:	4629      	mov	r1, r5
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff ffa6 	bl	800980c <sbrk_aligned>
 80098c0:	3001      	adds	r0, #1
 80098c2:	d03a      	beq.n	800993a <_malloc_r+0xea>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	442b      	add	r3, r5
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	f8d8 3000 	ldr.w	r3, [r8]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	bb62      	cbnz	r2, 800992c <_malloc_r+0xdc>
 80098d2:	f8c8 7000 	str.w	r7, [r8]
 80098d6:	e00f      	b.n	80098f8 <_malloc_r+0xa8>
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	1b52      	subs	r2, r2, r5
 80098dc:	d420      	bmi.n	8009920 <_malloc_r+0xd0>
 80098de:	2a0b      	cmp	r2, #11
 80098e0:	d917      	bls.n	8009912 <_malloc_r+0xc2>
 80098e2:	1961      	adds	r1, r4, r5
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	6025      	str	r5, [r4, #0]
 80098e8:	bf18      	it	ne
 80098ea:	6059      	strne	r1, [r3, #4]
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	bf08      	it	eq
 80098f0:	f8c8 1000 	streq.w	r1, [r8]
 80098f4:	5162      	str	r2, [r4, r5]
 80098f6:	604b      	str	r3, [r1, #4]
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 f82f 	bl	800995c <__malloc_unlock>
 80098fe:	f104 000b 	add.w	r0, r4, #11
 8009902:	1d23      	adds	r3, r4, #4
 8009904:	f020 0007 	bic.w	r0, r0, #7
 8009908:	1ac2      	subs	r2, r0, r3
 800990a:	bf1c      	itt	ne
 800990c:	1a1b      	subne	r3, r3, r0
 800990e:	50a3      	strne	r3, [r4, r2]
 8009910:	e7af      	b.n	8009872 <_malloc_r+0x22>
 8009912:	6862      	ldr	r2, [r4, #4]
 8009914:	42a3      	cmp	r3, r4
 8009916:	bf0c      	ite	eq
 8009918:	f8c8 2000 	streq.w	r2, [r8]
 800991c:	605a      	strne	r2, [r3, #4]
 800991e:	e7eb      	b.n	80098f8 <_malloc_r+0xa8>
 8009920:	4623      	mov	r3, r4
 8009922:	6864      	ldr	r4, [r4, #4]
 8009924:	e7ae      	b.n	8009884 <_malloc_r+0x34>
 8009926:	463c      	mov	r4, r7
 8009928:	687f      	ldr	r7, [r7, #4]
 800992a:	e7b6      	b.n	800989a <_malloc_r+0x4a>
 800992c:	461a      	mov	r2, r3
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	42a3      	cmp	r3, r4
 8009932:	d1fb      	bne.n	800992c <_malloc_r+0xdc>
 8009934:	2300      	movs	r3, #0
 8009936:	6053      	str	r3, [r2, #4]
 8009938:	e7de      	b.n	80098f8 <_malloc_r+0xa8>
 800993a:	230c      	movs	r3, #12
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	4630      	mov	r0, r6
 8009940:	f000 f80c 	bl	800995c <__malloc_unlock>
 8009944:	e794      	b.n	8009870 <_malloc_r+0x20>
 8009946:	6005      	str	r5, [r0, #0]
 8009948:	e7d6      	b.n	80098f8 <_malloc_r+0xa8>
 800994a:	bf00      	nop
 800994c:	2000c3bc 	.word	0x2000c3bc

08009950 <__malloc_lock>:
 8009950:	4801      	ldr	r0, [pc, #4]	@ (8009958 <__malloc_lock+0x8>)
 8009952:	f7ff b8a0 	b.w	8008a96 <__retarget_lock_acquire_recursive>
 8009956:	bf00      	nop
 8009958:	2000c3b4 	.word	0x2000c3b4

0800995c <__malloc_unlock>:
 800995c:	4801      	ldr	r0, [pc, #4]	@ (8009964 <__malloc_unlock+0x8>)
 800995e:	f7ff b89b 	b.w	8008a98 <__retarget_lock_release_recursive>
 8009962:	bf00      	nop
 8009964:	2000c3b4 	.word	0x2000c3b4

08009968 <_Balloc>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	69c6      	ldr	r6, [r0, #28]
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	b976      	cbnz	r6, 8009990 <_Balloc+0x28>
 8009972:	2010      	movs	r0, #16
 8009974:	f7ff ff42 	bl	80097fc <malloc>
 8009978:	4602      	mov	r2, r0
 800997a:	61e0      	str	r0, [r4, #28]
 800997c:	b920      	cbnz	r0, 8009988 <_Balloc+0x20>
 800997e:	4b18      	ldr	r3, [pc, #96]	@ (80099e0 <_Balloc+0x78>)
 8009980:	4818      	ldr	r0, [pc, #96]	@ (80099e4 <_Balloc+0x7c>)
 8009982:	216b      	movs	r1, #107	@ 0x6b
 8009984:	f000 fc26 	bl	800a1d4 <__assert_func>
 8009988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800998c:	6006      	str	r6, [r0, #0]
 800998e:	60c6      	str	r6, [r0, #12]
 8009990:	69e6      	ldr	r6, [r4, #28]
 8009992:	68f3      	ldr	r3, [r6, #12]
 8009994:	b183      	cbz	r3, 80099b8 <_Balloc+0x50>
 8009996:	69e3      	ldr	r3, [r4, #28]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800999e:	b9b8      	cbnz	r0, 80099d0 <_Balloc+0x68>
 80099a0:	2101      	movs	r1, #1
 80099a2:	fa01 f605 	lsl.w	r6, r1, r5
 80099a6:	1d72      	adds	r2, r6, #5
 80099a8:	0092      	lsls	r2, r2, #2
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fc30 	bl	800a210 <_calloc_r>
 80099b0:	b160      	cbz	r0, 80099cc <_Balloc+0x64>
 80099b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099b6:	e00e      	b.n	80099d6 <_Balloc+0x6e>
 80099b8:	2221      	movs	r2, #33	@ 0x21
 80099ba:	2104      	movs	r1, #4
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fc27 	bl	800a210 <_calloc_r>
 80099c2:	69e3      	ldr	r3, [r4, #28]
 80099c4:	60f0      	str	r0, [r6, #12]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e4      	bne.n	8009996 <_Balloc+0x2e>
 80099cc:	2000      	movs	r0, #0
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	6802      	ldr	r2, [r0, #0]
 80099d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099d6:	2300      	movs	r3, #0
 80099d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099dc:	e7f7      	b.n	80099ce <_Balloc+0x66>
 80099de:	bf00      	nop
 80099e0:	0800a99d 	.word	0x0800a99d
 80099e4:	0800aa1d 	.word	0x0800aa1d

080099e8 <_Bfree>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	69c6      	ldr	r6, [r0, #28]
 80099ec:	4605      	mov	r5, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	b976      	cbnz	r6, 8009a10 <_Bfree+0x28>
 80099f2:	2010      	movs	r0, #16
 80099f4:	f7ff ff02 	bl	80097fc <malloc>
 80099f8:	4602      	mov	r2, r0
 80099fa:	61e8      	str	r0, [r5, #28]
 80099fc:	b920      	cbnz	r0, 8009a08 <_Bfree+0x20>
 80099fe:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <_Bfree+0x3c>)
 8009a00:	4809      	ldr	r0, [pc, #36]	@ (8009a28 <_Bfree+0x40>)
 8009a02:	218f      	movs	r1, #143	@ 0x8f
 8009a04:	f000 fbe6 	bl	800a1d4 <__assert_func>
 8009a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a0c:	6006      	str	r6, [r0, #0]
 8009a0e:	60c6      	str	r6, [r0, #12]
 8009a10:	b13c      	cbz	r4, 8009a22 <_Bfree+0x3a>
 8009a12:	69eb      	ldr	r3, [r5, #28]
 8009a14:	6862      	ldr	r2, [r4, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a1c:	6021      	str	r1, [r4, #0]
 8009a1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	0800a99d 	.word	0x0800a99d
 8009a28:	0800aa1d 	.word	0x0800aa1d

08009a2c <__multadd>:
 8009a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a30:	690d      	ldr	r5, [r1, #16]
 8009a32:	4607      	mov	r7, r0
 8009a34:	460c      	mov	r4, r1
 8009a36:	461e      	mov	r6, r3
 8009a38:	f101 0c14 	add.w	ip, r1, #20
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a42:	b299      	uxth	r1, r3
 8009a44:	fb02 6101 	mla	r1, r2, r1, r6
 8009a48:	0c1e      	lsrs	r6, r3, #16
 8009a4a:	0c0b      	lsrs	r3, r1, #16
 8009a4c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a50:	b289      	uxth	r1, r1
 8009a52:	3001      	adds	r0, #1
 8009a54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a58:	4285      	cmp	r5, r0
 8009a5a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a62:	dcec      	bgt.n	8009a3e <__multadd+0x12>
 8009a64:	b30e      	cbz	r6, 8009aaa <__multadd+0x7e>
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	dc19      	bgt.n	8009aa0 <__multadd+0x74>
 8009a6c:	6861      	ldr	r1, [r4, #4]
 8009a6e:	4638      	mov	r0, r7
 8009a70:	3101      	adds	r1, #1
 8009a72:	f7ff ff79 	bl	8009968 <_Balloc>
 8009a76:	4680      	mov	r8, r0
 8009a78:	b928      	cbnz	r0, 8009a86 <__multadd+0x5a>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab0 <__multadd+0x84>)
 8009a7e:	480d      	ldr	r0, [pc, #52]	@ (8009ab4 <__multadd+0x88>)
 8009a80:	21ba      	movs	r1, #186	@ 0xba
 8009a82:	f000 fba7 	bl	800a1d4 <__assert_func>
 8009a86:	6922      	ldr	r2, [r4, #16]
 8009a88:	3202      	adds	r2, #2
 8009a8a:	f104 010c 	add.w	r1, r4, #12
 8009a8e:	0092      	lsls	r2, r2, #2
 8009a90:	300c      	adds	r0, #12
 8009a92:	f7ff f802 	bl	8008a9a <memcpy>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7ff ffa5 	bl	80099e8 <_Bfree>
 8009a9e:	4644      	mov	r4, r8
 8009aa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	615e      	str	r6, [r3, #20]
 8009aa8:	6125      	str	r5, [r4, #16]
 8009aaa:	4620      	mov	r0, r4
 8009aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab0:	0800aa0c 	.word	0x0800aa0c
 8009ab4:	0800aa1d 	.word	0x0800aa1d

08009ab8 <__hi0bits>:
 8009ab8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009abc:	4603      	mov	r3, r0
 8009abe:	bf36      	itet	cc
 8009ac0:	0403      	lslcc	r3, r0, #16
 8009ac2:	2000      	movcs	r0, #0
 8009ac4:	2010      	movcc	r0, #16
 8009ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aca:	bf3c      	itt	cc
 8009acc:	021b      	lslcc	r3, r3, #8
 8009ace:	3008      	addcc	r0, #8
 8009ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ad4:	bf3c      	itt	cc
 8009ad6:	011b      	lslcc	r3, r3, #4
 8009ad8:	3004      	addcc	r0, #4
 8009ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ade:	bf3c      	itt	cc
 8009ae0:	009b      	lslcc	r3, r3, #2
 8009ae2:	3002      	addcc	r0, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	db05      	blt.n	8009af4 <__hi0bits+0x3c>
 8009ae8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009aec:	f100 0001 	add.w	r0, r0, #1
 8009af0:	bf08      	it	eq
 8009af2:	2020      	moveq	r0, #32
 8009af4:	4770      	bx	lr

08009af6 <__lo0bits>:
 8009af6:	6803      	ldr	r3, [r0, #0]
 8009af8:	4602      	mov	r2, r0
 8009afa:	f013 0007 	ands.w	r0, r3, #7
 8009afe:	d00b      	beq.n	8009b18 <__lo0bits+0x22>
 8009b00:	07d9      	lsls	r1, r3, #31
 8009b02:	d421      	bmi.n	8009b48 <__lo0bits+0x52>
 8009b04:	0798      	lsls	r0, r3, #30
 8009b06:	bf49      	itett	mi
 8009b08:	085b      	lsrmi	r3, r3, #1
 8009b0a:	089b      	lsrpl	r3, r3, #2
 8009b0c:	2001      	movmi	r0, #1
 8009b0e:	6013      	strmi	r3, [r2, #0]
 8009b10:	bf5c      	itt	pl
 8009b12:	6013      	strpl	r3, [r2, #0]
 8009b14:	2002      	movpl	r0, #2
 8009b16:	4770      	bx	lr
 8009b18:	b299      	uxth	r1, r3
 8009b1a:	b909      	cbnz	r1, 8009b20 <__lo0bits+0x2a>
 8009b1c:	0c1b      	lsrs	r3, r3, #16
 8009b1e:	2010      	movs	r0, #16
 8009b20:	b2d9      	uxtb	r1, r3
 8009b22:	b909      	cbnz	r1, 8009b28 <__lo0bits+0x32>
 8009b24:	3008      	adds	r0, #8
 8009b26:	0a1b      	lsrs	r3, r3, #8
 8009b28:	0719      	lsls	r1, r3, #28
 8009b2a:	bf04      	itt	eq
 8009b2c:	091b      	lsreq	r3, r3, #4
 8009b2e:	3004      	addeq	r0, #4
 8009b30:	0799      	lsls	r1, r3, #30
 8009b32:	bf04      	itt	eq
 8009b34:	089b      	lsreq	r3, r3, #2
 8009b36:	3002      	addeq	r0, #2
 8009b38:	07d9      	lsls	r1, r3, #31
 8009b3a:	d403      	bmi.n	8009b44 <__lo0bits+0x4e>
 8009b3c:	085b      	lsrs	r3, r3, #1
 8009b3e:	f100 0001 	add.w	r0, r0, #1
 8009b42:	d003      	beq.n	8009b4c <__lo0bits+0x56>
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	4770      	bx	lr
 8009b48:	2000      	movs	r0, #0
 8009b4a:	4770      	bx	lr
 8009b4c:	2020      	movs	r0, #32
 8009b4e:	4770      	bx	lr

08009b50 <__i2b>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	460c      	mov	r4, r1
 8009b54:	2101      	movs	r1, #1
 8009b56:	f7ff ff07 	bl	8009968 <_Balloc>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	b928      	cbnz	r0, 8009b6a <__i2b+0x1a>
 8009b5e:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <__i2b+0x24>)
 8009b60:	4805      	ldr	r0, [pc, #20]	@ (8009b78 <__i2b+0x28>)
 8009b62:	f240 1145 	movw	r1, #325	@ 0x145
 8009b66:	f000 fb35 	bl	800a1d4 <__assert_func>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	6144      	str	r4, [r0, #20]
 8009b6e:	6103      	str	r3, [r0, #16]
 8009b70:	bd10      	pop	{r4, pc}
 8009b72:	bf00      	nop
 8009b74:	0800aa0c 	.word	0x0800aa0c
 8009b78:	0800aa1d 	.word	0x0800aa1d

08009b7c <__multiply>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	4617      	mov	r7, r2
 8009b82:	690a      	ldr	r2, [r1, #16]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	bfa8      	it	ge
 8009b8a:	463b      	movge	r3, r7
 8009b8c:	4689      	mov	r9, r1
 8009b8e:	bfa4      	itt	ge
 8009b90:	460f      	movge	r7, r1
 8009b92:	4699      	movge	r9, r3
 8009b94:	693d      	ldr	r5, [r7, #16]
 8009b96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	eb05 060a 	add.w	r6, r5, sl
 8009ba2:	42b3      	cmp	r3, r6
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	bfb8      	it	lt
 8009ba8:	3101      	addlt	r1, #1
 8009baa:	f7ff fedd 	bl	8009968 <_Balloc>
 8009bae:	b930      	cbnz	r0, 8009bbe <__multiply+0x42>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	4b41      	ldr	r3, [pc, #260]	@ (8009cb8 <__multiply+0x13c>)
 8009bb4:	4841      	ldr	r0, [pc, #260]	@ (8009cbc <__multiply+0x140>)
 8009bb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009bba:	f000 fb0b 	bl	800a1d4 <__assert_func>
 8009bbe:	f100 0414 	add.w	r4, r0, #20
 8009bc2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4573      	cmp	r3, lr
 8009bcc:	d320      	bcc.n	8009c10 <__multiply+0x94>
 8009bce:	f107 0814 	add.w	r8, r7, #20
 8009bd2:	f109 0114 	add.w	r1, r9, #20
 8009bd6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009bda:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	1beb      	subs	r3, r5, r7
 8009be2:	3b15      	subs	r3, #21
 8009be4:	f023 0303 	bic.w	r3, r3, #3
 8009be8:	3304      	adds	r3, #4
 8009bea:	3715      	adds	r7, #21
 8009bec:	42bd      	cmp	r5, r7
 8009bee:	bf38      	it	cc
 8009bf0:	2304      	movcc	r3, #4
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	9b02      	ldr	r3, [sp, #8]
 8009bf6:	9103      	str	r1, [sp, #12]
 8009bf8:	428b      	cmp	r3, r1
 8009bfa:	d80c      	bhi.n	8009c16 <__multiply+0x9a>
 8009bfc:	2e00      	cmp	r6, #0
 8009bfe:	dd03      	ble.n	8009c08 <__multiply+0x8c>
 8009c00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d055      	beq.n	8009cb4 <__multiply+0x138>
 8009c08:	6106      	str	r6, [r0, #16]
 8009c0a:	b005      	add	sp, #20
 8009c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c10:	f843 2b04 	str.w	r2, [r3], #4
 8009c14:	e7d9      	b.n	8009bca <__multiply+0x4e>
 8009c16:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c1a:	f1ba 0f00 	cmp.w	sl, #0
 8009c1e:	d01f      	beq.n	8009c60 <__multiply+0xe4>
 8009c20:	46c4      	mov	ip, r8
 8009c22:	46a1      	mov	r9, r4
 8009c24:	2700      	movs	r7, #0
 8009c26:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c2a:	f8d9 3000 	ldr.w	r3, [r9]
 8009c2e:	fa1f fb82 	uxth.w	fp, r2
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c38:	443b      	add	r3, r7
 8009c3a:	f8d9 7000 	ldr.w	r7, [r9]
 8009c3e:	0c12      	lsrs	r2, r2, #16
 8009c40:	0c3f      	lsrs	r7, r7, #16
 8009c42:	fb0a 7202 	mla	r2, sl, r2, r7
 8009c46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c50:	4565      	cmp	r5, ip
 8009c52:	f849 3b04 	str.w	r3, [r9], #4
 8009c56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009c5a:	d8e4      	bhi.n	8009c26 <__multiply+0xaa>
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	50e7      	str	r7, [r4, r3]
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c66:	3104      	adds	r1, #4
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	d020      	beq.n	8009cb0 <__multiply+0x134>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	4647      	mov	r7, r8
 8009c72:	46a4      	mov	ip, r4
 8009c74:	f04f 0a00 	mov.w	sl, #0
 8009c78:	f8b7 b000 	ldrh.w	fp, [r7]
 8009c7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009c80:	fb09 220b 	mla	r2, r9, fp, r2
 8009c84:	4452      	add	r2, sl
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c8c:	f84c 3b04 	str.w	r3, [ip], #4
 8009c90:	f857 3b04 	ldr.w	r3, [r7], #4
 8009c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c98:	f8bc 3000 	ldrh.w	r3, [ip]
 8009c9c:	fb09 330a 	mla	r3, r9, sl, r3
 8009ca0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009ca4:	42bd      	cmp	r5, r7
 8009ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009caa:	d8e5      	bhi.n	8009c78 <__multiply+0xfc>
 8009cac:	9a01      	ldr	r2, [sp, #4]
 8009cae:	50a3      	str	r3, [r4, r2]
 8009cb0:	3404      	adds	r4, #4
 8009cb2:	e79f      	b.n	8009bf4 <__multiply+0x78>
 8009cb4:	3e01      	subs	r6, #1
 8009cb6:	e7a1      	b.n	8009bfc <__multiply+0x80>
 8009cb8:	0800aa0c 	.word	0x0800aa0c
 8009cbc:	0800aa1d 	.word	0x0800aa1d

08009cc0 <__pow5mult>:
 8009cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	f012 0203 	ands.w	r2, r2, #3
 8009cca:	4607      	mov	r7, r0
 8009ccc:	460e      	mov	r6, r1
 8009cce:	d007      	beq.n	8009ce0 <__pow5mult+0x20>
 8009cd0:	4c25      	ldr	r4, [pc, #148]	@ (8009d68 <__pow5mult+0xa8>)
 8009cd2:	3a01      	subs	r2, #1
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cda:	f7ff fea7 	bl	8009a2c <__multadd>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	10ad      	asrs	r5, r5, #2
 8009ce2:	d03d      	beq.n	8009d60 <__pow5mult+0xa0>
 8009ce4:	69fc      	ldr	r4, [r7, #28]
 8009ce6:	b97c      	cbnz	r4, 8009d08 <__pow5mult+0x48>
 8009ce8:	2010      	movs	r0, #16
 8009cea:	f7ff fd87 	bl	80097fc <malloc>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	61f8      	str	r0, [r7, #28]
 8009cf2:	b928      	cbnz	r0, 8009d00 <__pow5mult+0x40>
 8009cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d6c <__pow5mult+0xac>)
 8009cf6:	481e      	ldr	r0, [pc, #120]	@ (8009d70 <__pow5mult+0xb0>)
 8009cf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009cfc:	f000 fa6a 	bl	800a1d4 <__assert_func>
 8009d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d04:	6004      	str	r4, [r0, #0]
 8009d06:	60c4      	str	r4, [r0, #12]
 8009d08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d10:	b94c      	cbnz	r4, 8009d26 <__pow5mult+0x66>
 8009d12:	f240 2171 	movw	r1, #625	@ 0x271
 8009d16:	4638      	mov	r0, r7
 8009d18:	f7ff ff1a 	bl	8009b50 <__i2b>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d22:	4604      	mov	r4, r0
 8009d24:	6003      	str	r3, [r0, #0]
 8009d26:	f04f 0900 	mov.w	r9, #0
 8009d2a:	07eb      	lsls	r3, r5, #31
 8009d2c:	d50a      	bpl.n	8009d44 <__pow5mult+0x84>
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4622      	mov	r2, r4
 8009d32:	4638      	mov	r0, r7
 8009d34:	f7ff ff22 	bl	8009b7c <__multiply>
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff fe53 	bl	80099e8 <_Bfree>
 8009d42:	4646      	mov	r6, r8
 8009d44:	106d      	asrs	r5, r5, #1
 8009d46:	d00b      	beq.n	8009d60 <__pow5mult+0xa0>
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	b938      	cbnz	r0, 8009d5c <__pow5mult+0x9c>
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ff13 	bl	8009b7c <__multiply>
 8009d56:	6020      	str	r0, [r4, #0]
 8009d58:	f8c0 9000 	str.w	r9, [r0]
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	e7e4      	b.n	8009d2a <__pow5mult+0x6a>
 8009d60:	4630      	mov	r0, r6
 8009d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d66:	bf00      	nop
 8009d68:	0800aad0 	.word	0x0800aad0
 8009d6c:	0800a99d 	.word	0x0800a99d
 8009d70:	0800aa1d 	.word	0x0800aa1d

08009d74 <__lshift>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	6849      	ldr	r1, [r1, #4]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d82:	68a3      	ldr	r3, [r4, #8]
 8009d84:	4607      	mov	r7, r0
 8009d86:	4691      	mov	r9, r2
 8009d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d8c:	f108 0601 	add.w	r6, r8, #1
 8009d90:	42b3      	cmp	r3, r6
 8009d92:	db0b      	blt.n	8009dac <__lshift+0x38>
 8009d94:	4638      	mov	r0, r7
 8009d96:	f7ff fde7 	bl	8009968 <_Balloc>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	b948      	cbnz	r0, 8009db2 <__lshift+0x3e>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	4b28      	ldr	r3, [pc, #160]	@ (8009e44 <__lshift+0xd0>)
 8009da2:	4829      	ldr	r0, [pc, #164]	@ (8009e48 <__lshift+0xd4>)
 8009da4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009da8:	f000 fa14 	bl	800a1d4 <__assert_func>
 8009dac:	3101      	adds	r1, #1
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	e7ee      	b.n	8009d90 <__lshift+0x1c>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f100 0114 	add.w	r1, r0, #20
 8009db8:	f100 0210 	add.w	r2, r0, #16
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	4553      	cmp	r3, sl
 8009dc0:	db33      	blt.n	8009e2a <__lshift+0xb6>
 8009dc2:	6920      	ldr	r0, [r4, #16]
 8009dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dc8:	f104 0314 	add.w	r3, r4, #20
 8009dcc:	f019 091f 	ands.w	r9, r9, #31
 8009dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dd8:	d02b      	beq.n	8009e32 <__lshift+0xbe>
 8009dda:	f1c9 0e20 	rsb	lr, r9, #32
 8009dde:	468a      	mov	sl, r1
 8009de0:	2200      	movs	r2, #0
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	fa00 f009 	lsl.w	r0, r0, r9
 8009de8:	4310      	orrs	r0, r2
 8009dea:	f84a 0b04 	str.w	r0, [sl], #4
 8009dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009df2:	459c      	cmp	ip, r3
 8009df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009df8:	d8f3      	bhi.n	8009de2 <__lshift+0x6e>
 8009dfa:	ebac 0304 	sub.w	r3, ip, r4
 8009dfe:	3b15      	subs	r3, #21
 8009e00:	f023 0303 	bic.w	r3, r3, #3
 8009e04:	3304      	adds	r3, #4
 8009e06:	f104 0015 	add.w	r0, r4, #21
 8009e0a:	4560      	cmp	r0, ip
 8009e0c:	bf88      	it	hi
 8009e0e:	2304      	movhi	r3, #4
 8009e10:	50ca      	str	r2, [r1, r3]
 8009e12:	b10a      	cbz	r2, 8009e18 <__lshift+0xa4>
 8009e14:	f108 0602 	add.w	r6, r8, #2
 8009e18:	3e01      	subs	r6, #1
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	612e      	str	r6, [r5, #16]
 8009e1e:	4621      	mov	r1, r4
 8009e20:	f7ff fde2 	bl	80099e8 <_Bfree>
 8009e24:	4628      	mov	r0, r5
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e2e:	3301      	adds	r3, #1
 8009e30:	e7c5      	b.n	8009dbe <__lshift+0x4a>
 8009e32:	3904      	subs	r1, #4
 8009e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e3c:	459c      	cmp	ip, r3
 8009e3e:	d8f9      	bhi.n	8009e34 <__lshift+0xc0>
 8009e40:	e7ea      	b.n	8009e18 <__lshift+0xa4>
 8009e42:	bf00      	nop
 8009e44:	0800aa0c 	.word	0x0800aa0c
 8009e48:	0800aa1d 	.word	0x0800aa1d

08009e4c <__mcmp>:
 8009e4c:	690a      	ldr	r2, [r1, #16]
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6900      	ldr	r0, [r0, #16]
 8009e52:	1a80      	subs	r0, r0, r2
 8009e54:	b530      	push	{r4, r5, lr}
 8009e56:	d10e      	bne.n	8009e76 <__mcmp+0x2a>
 8009e58:	3314      	adds	r3, #20
 8009e5a:	3114      	adds	r1, #20
 8009e5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e6c:	4295      	cmp	r5, r2
 8009e6e:	d003      	beq.n	8009e78 <__mcmp+0x2c>
 8009e70:	d205      	bcs.n	8009e7e <__mcmp+0x32>
 8009e72:	f04f 30ff 	mov.w	r0, #4294967295
 8009e76:	bd30      	pop	{r4, r5, pc}
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	d3f3      	bcc.n	8009e64 <__mcmp+0x18>
 8009e7c:	e7fb      	b.n	8009e76 <__mcmp+0x2a>
 8009e7e:	2001      	movs	r0, #1
 8009e80:	e7f9      	b.n	8009e76 <__mcmp+0x2a>
	...

08009e84 <__mdiff>:
 8009e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	4689      	mov	r9, r1
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4648      	mov	r0, r9
 8009e90:	4614      	mov	r4, r2
 8009e92:	f7ff ffdb 	bl	8009e4c <__mcmp>
 8009e96:	1e05      	subs	r5, r0, #0
 8009e98:	d112      	bne.n	8009ec0 <__mdiff+0x3c>
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7ff fd63 	bl	8009968 <_Balloc>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	b928      	cbnz	r0, 8009eb2 <__mdiff+0x2e>
 8009ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8009fa4 <__mdiff+0x120>)
 8009ea8:	f240 2137 	movw	r1, #567	@ 0x237
 8009eac:	483e      	ldr	r0, [pc, #248]	@ (8009fa8 <__mdiff+0x124>)
 8009eae:	f000 f991 	bl	800a1d4 <__assert_func>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009eb8:	4610      	mov	r0, r2
 8009eba:	b003      	add	sp, #12
 8009ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec0:	bfbc      	itt	lt
 8009ec2:	464b      	movlt	r3, r9
 8009ec4:	46a1      	movlt	r9, r4
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ecc:	bfba      	itte	lt
 8009ece:	461c      	movlt	r4, r3
 8009ed0:	2501      	movlt	r5, #1
 8009ed2:	2500      	movge	r5, #0
 8009ed4:	f7ff fd48 	bl	8009968 <_Balloc>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	b918      	cbnz	r0, 8009ee4 <__mdiff+0x60>
 8009edc:	4b31      	ldr	r3, [pc, #196]	@ (8009fa4 <__mdiff+0x120>)
 8009ede:	f240 2145 	movw	r1, #581	@ 0x245
 8009ee2:	e7e3      	b.n	8009eac <__mdiff+0x28>
 8009ee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ee8:	6926      	ldr	r6, [r4, #16]
 8009eea:	60c5      	str	r5, [r0, #12]
 8009eec:	f109 0310 	add.w	r3, r9, #16
 8009ef0:	f109 0514 	add.w	r5, r9, #20
 8009ef4:	f104 0e14 	add.w	lr, r4, #20
 8009ef8:	f100 0b14 	add.w	fp, r0, #20
 8009efc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	46d9      	mov	r9, fp
 8009f08:	f04f 0c00 	mov.w	ip, #0
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	fa1f f38a 	uxth.w	r3, sl
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	b283      	uxth	r3, r0
 8009f20:	1acb      	subs	r3, r1, r3
 8009f22:	0c00      	lsrs	r0, r0, #16
 8009f24:	4463      	add	r3, ip
 8009f26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f34:	4576      	cmp	r6, lr
 8009f36:	f849 3b04 	str.w	r3, [r9], #4
 8009f3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f3e:	d8e5      	bhi.n	8009f0c <__mdiff+0x88>
 8009f40:	1b33      	subs	r3, r6, r4
 8009f42:	3b15      	subs	r3, #21
 8009f44:	f023 0303 	bic.w	r3, r3, #3
 8009f48:	3415      	adds	r4, #21
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	42a6      	cmp	r6, r4
 8009f4e:	bf38      	it	cc
 8009f50:	2304      	movcc	r3, #4
 8009f52:	441d      	add	r5, r3
 8009f54:	445b      	add	r3, fp
 8009f56:	461e      	mov	r6, r3
 8009f58:	462c      	mov	r4, r5
 8009f5a:	4544      	cmp	r4, r8
 8009f5c:	d30e      	bcc.n	8009f7c <__mdiff+0xf8>
 8009f5e:	f108 0103 	add.w	r1, r8, #3
 8009f62:	1b49      	subs	r1, r1, r5
 8009f64:	f021 0103 	bic.w	r1, r1, #3
 8009f68:	3d03      	subs	r5, #3
 8009f6a:	45a8      	cmp	r8, r5
 8009f6c:	bf38      	it	cc
 8009f6e:	2100      	movcc	r1, #0
 8009f70:	440b      	add	r3, r1
 8009f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f76:	b191      	cbz	r1, 8009f9e <__mdiff+0x11a>
 8009f78:	6117      	str	r7, [r2, #16]
 8009f7a:	e79d      	b.n	8009eb8 <__mdiff+0x34>
 8009f7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f80:	46e6      	mov	lr, ip
 8009f82:	0c08      	lsrs	r0, r1, #16
 8009f84:	fa1c fc81 	uxtah	ip, ip, r1
 8009f88:	4471      	add	r1, lr
 8009f8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f8e:	b289      	uxth	r1, r1
 8009f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f94:	f846 1b04 	str.w	r1, [r6], #4
 8009f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f9c:	e7dd      	b.n	8009f5a <__mdiff+0xd6>
 8009f9e:	3f01      	subs	r7, #1
 8009fa0:	e7e7      	b.n	8009f72 <__mdiff+0xee>
 8009fa2:	bf00      	nop
 8009fa4:	0800aa0c 	.word	0x0800aa0c
 8009fa8:	0800aa1d 	.word	0x0800aa1d

08009fac <__d2b>:
 8009fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	ec59 8b10 	vmov	r8, r9, d0
 8009fb8:	4616      	mov	r6, r2
 8009fba:	f7ff fcd5 	bl	8009968 <_Balloc>
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	b930      	cbnz	r0, 8009fd0 <__d2b+0x24>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4b23      	ldr	r3, [pc, #140]	@ (800a054 <__d2b+0xa8>)
 8009fc6:	4824      	ldr	r0, [pc, #144]	@ (800a058 <__d2b+0xac>)
 8009fc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009fcc:	f000 f902 	bl	800a1d4 <__assert_func>
 8009fd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fd8:	b10d      	cbz	r5, 8009fde <__d2b+0x32>
 8009fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fe4:	d023      	beq.n	800a02e <__d2b+0x82>
 8009fe6:	4668      	mov	r0, sp
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	f7ff fd84 	bl	8009af6 <__lo0bits>
 8009fee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ff2:	b1d0      	cbz	r0, 800a02a <__d2b+0x7e>
 8009ff4:	f1c0 0320 	rsb	r3, r0, #32
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	40c2      	lsrs	r2, r0
 800a000:	6163      	str	r3, [r4, #20]
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	9b01      	ldr	r3, [sp, #4]
 800a006:	61a3      	str	r3, [r4, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bf0c      	ite	eq
 800a00c:	2201      	moveq	r2, #1
 800a00e:	2202      	movne	r2, #2
 800a010:	6122      	str	r2, [r4, #16]
 800a012:	b1a5      	cbz	r5, 800a03e <__d2b+0x92>
 800a014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a018:	4405      	add	r5, r0
 800a01a:	603d      	str	r5, [r7, #0]
 800a01c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a020:	6030      	str	r0, [r6, #0]
 800a022:	4620      	mov	r0, r4
 800a024:	b003      	add	sp, #12
 800a026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a02a:	6161      	str	r1, [r4, #20]
 800a02c:	e7ea      	b.n	800a004 <__d2b+0x58>
 800a02e:	a801      	add	r0, sp, #4
 800a030:	f7ff fd61 	bl	8009af6 <__lo0bits>
 800a034:	9b01      	ldr	r3, [sp, #4]
 800a036:	6163      	str	r3, [r4, #20]
 800a038:	3020      	adds	r0, #32
 800a03a:	2201      	movs	r2, #1
 800a03c:	e7e8      	b.n	800a010 <__d2b+0x64>
 800a03e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a046:	6038      	str	r0, [r7, #0]
 800a048:	6918      	ldr	r0, [r3, #16]
 800a04a:	f7ff fd35 	bl	8009ab8 <__hi0bits>
 800a04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a052:	e7e5      	b.n	800a020 <__d2b+0x74>
 800a054:	0800aa0c 	.word	0x0800aa0c
 800a058:	0800aa1d 	.word	0x0800aa1d

0800a05c <__sflush_r>:
 800a05c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a064:	0716      	lsls	r6, r2, #28
 800a066:	4605      	mov	r5, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	d454      	bmi.n	800a116 <__sflush_r+0xba>
 800a06c:	684b      	ldr	r3, [r1, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc02      	bgt.n	800a078 <__sflush_r+0x1c>
 800a072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd48      	ble.n	800a10a <__sflush_r+0xae>
 800a078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d045      	beq.n	800a10a <__sflush_r+0xae>
 800a07e:	2300      	movs	r3, #0
 800a080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a084:	682f      	ldr	r7, [r5, #0]
 800a086:	6a21      	ldr	r1, [r4, #32]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	d030      	beq.n	800a0ee <__sflush_r+0x92>
 800a08c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	0759      	lsls	r1, r3, #29
 800a092:	d505      	bpl.n	800a0a0 <__sflush_r+0x44>
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	1ad2      	subs	r2, r2, r3
 800a098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09a:	b10b      	cbz	r3, 800a0a0 <__sflush_r+0x44>
 800a09c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b0      	blx	r6
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	d106      	bne.n	800a0be <__sflush_r+0x62>
 800a0b0:	6829      	ldr	r1, [r5, #0]
 800a0b2:	291d      	cmp	r1, #29
 800a0b4:	d82b      	bhi.n	800a10e <__sflush_r+0xb2>
 800a0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a160 <__sflush_r+0x104>)
 800a0b8:	40ca      	lsrs	r2, r1
 800a0ba:	07d6      	lsls	r6, r2, #31
 800a0bc:	d527      	bpl.n	800a10e <__sflush_r+0xb2>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6062      	str	r2, [r4, #4]
 800a0c2:	04d9      	lsls	r1, r3, #19
 800a0c4:	6922      	ldr	r2, [r4, #16]
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	d504      	bpl.n	800a0d4 <__sflush_r+0x78>
 800a0ca:	1c42      	adds	r2, r0, #1
 800a0cc:	d101      	bne.n	800a0d2 <__sflush_r+0x76>
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	b903      	cbnz	r3, 800a0d4 <__sflush_r+0x78>
 800a0d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0d6:	602f      	str	r7, [r5, #0]
 800a0d8:	b1b9      	cbz	r1, 800a10a <__sflush_r+0xae>
 800a0da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d002      	beq.n	800a0e8 <__sflush_r+0x8c>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7ff fb40 	bl	8009768 <_free_r>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ec:	e00d      	b.n	800a10a <__sflush_r+0xae>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	1c50      	adds	r0, r2, #1
 800a0f8:	d1c9      	bne.n	800a08e <__sflush_r+0x32>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0c6      	beq.n	800a08e <__sflush_r+0x32>
 800a100:	2b1d      	cmp	r3, #29
 800a102:	d001      	beq.n	800a108 <__sflush_r+0xac>
 800a104:	2b16      	cmp	r3, #22
 800a106:	d11e      	bne.n	800a146 <__sflush_r+0xea>
 800a108:	602f      	str	r7, [r5, #0]
 800a10a:	2000      	movs	r0, #0
 800a10c:	e022      	b.n	800a154 <__sflush_r+0xf8>
 800a10e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a112:	b21b      	sxth	r3, r3
 800a114:	e01b      	b.n	800a14e <__sflush_r+0xf2>
 800a116:	690f      	ldr	r7, [r1, #16]
 800a118:	2f00      	cmp	r7, #0
 800a11a:	d0f6      	beq.n	800a10a <__sflush_r+0xae>
 800a11c:	0793      	lsls	r3, r2, #30
 800a11e:	680e      	ldr	r6, [r1, #0]
 800a120:	bf08      	it	eq
 800a122:	694b      	ldreq	r3, [r1, #20]
 800a124:	600f      	str	r7, [r1, #0]
 800a126:	bf18      	it	ne
 800a128:	2300      	movne	r3, #0
 800a12a:	eba6 0807 	sub.w	r8, r6, r7
 800a12e:	608b      	str	r3, [r1, #8]
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	dde9      	ble.n	800a10a <__sflush_r+0xae>
 800a136:	6a21      	ldr	r1, [r4, #32]
 800a138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a13a:	4643      	mov	r3, r8
 800a13c:	463a      	mov	r2, r7
 800a13e:	4628      	mov	r0, r5
 800a140:	47b0      	blx	r6
 800a142:	2800      	cmp	r0, #0
 800a144:	dc08      	bgt.n	800a158 <__sflush_r+0xfc>
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	4407      	add	r7, r0
 800a15a:	eba8 0800 	sub.w	r8, r8, r0
 800a15e:	e7e7      	b.n	800a130 <__sflush_r+0xd4>
 800a160:	20400001 	.word	0x20400001

0800a164 <_fflush_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b913      	cbnz	r3, 800a174 <_fflush_r+0x10>
 800a16e:	2500      	movs	r5, #0
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	b118      	cbz	r0, 800a17e <_fflush_r+0x1a>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <_fflush_r+0x1a>
 800a17a:	f7fe fb97 	bl	80088ac <__sinit>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f3      	beq.n	800a16e <_fflush_r+0xa>
 800a186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a188:	07d0      	lsls	r0, r2, #31
 800a18a:	d404      	bmi.n	800a196 <_fflush_r+0x32>
 800a18c:	0599      	lsls	r1, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_fflush_r+0x32>
 800a190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a192:	f7fe fc80 	bl	8008a96 <__retarget_lock_acquire_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7ff ff5f 	bl	800a05c <__sflush_r>
 800a19e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d4e4      	bmi.n	800a170 <_fflush_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059b      	lsls	r3, r3, #22
 800a1aa:	d4e1      	bmi.n	800a170 <_fflush_r+0xc>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ae:	f7fe fc73 	bl	8008a98 <__retarget_lock_release_recursive>
 800a1b2:	e7dd      	b.n	800a170 <_fflush_r+0xc>

0800a1b4 <_sbrk_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d06      	ldr	r5, [pc, #24]	@ (800a1d0 <_sbrk_r+0x1c>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	f7f7 f9ac 	bl	800151c <_sbrk>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d102      	bne.n	800a1ce <_sbrk_r+0x1a>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	b103      	cbz	r3, 800a1ce <_sbrk_r+0x1a>
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	2000c3b0 	.word	0x2000c3b0

0800a1d4 <__assert_func>:
 800a1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1d6:	4614      	mov	r4, r2
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <__assert_func+0x2c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	68d8      	ldr	r0, [r3, #12]
 800a1e2:	b14c      	cbz	r4, 800a1f8 <__assert_func+0x24>
 800a1e4:	4b07      	ldr	r3, [pc, #28]	@ (800a204 <__assert_func+0x30>)
 800a1e6:	9100      	str	r1, [sp, #0]
 800a1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1ec:	4906      	ldr	r1, [pc, #24]	@ (800a208 <__assert_func+0x34>)
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	f000 f842 	bl	800a278 <fiprintf>
 800a1f4:	f000 f852 	bl	800a29c <abort>
 800a1f8:	4b04      	ldr	r3, [pc, #16]	@ (800a20c <__assert_func+0x38>)
 800a1fa:	461c      	mov	r4, r3
 800a1fc:	e7f3      	b.n	800a1e6 <__assert_func+0x12>
 800a1fe:	bf00      	nop
 800a200:	20000024 	.word	0x20000024
 800a204:	0800aa80 	.word	0x0800aa80
 800a208:	0800aa8d 	.word	0x0800aa8d
 800a20c:	0800aabb 	.word	0x0800aabb

0800a210 <_calloc_r>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	fba1 5402 	umull	r5, r4, r1, r2
 800a216:	b934      	cbnz	r4, 800a226 <_calloc_r+0x16>
 800a218:	4629      	mov	r1, r5
 800a21a:	f7ff fb19 	bl	8009850 <_malloc_r>
 800a21e:	4606      	mov	r6, r0
 800a220:	b928      	cbnz	r0, 800a22e <_calloc_r+0x1e>
 800a222:	4630      	mov	r0, r6
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	220c      	movs	r2, #12
 800a228:	6002      	str	r2, [r0, #0]
 800a22a:	2600      	movs	r6, #0
 800a22c:	e7f9      	b.n	800a222 <_calloc_r+0x12>
 800a22e:	462a      	mov	r2, r5
 800a230:	4621      	mov	r1, r4
 800a232:	f7fe fbc4 	bl	80089be <memset>
 800a236:	e7f4      	b.n	800a222 <_calloc_r+0x12>

0800a238 <__ascii_mbtowc>:
 800a238:	b082      	sub	sp, #8
 800a23a:	b901      	cbnz	r1, 800a23e <__ascii_mbtowc+0x6>
 800a23c:	a901      	add	r1, sp, #4
 800a23e:	b142      	cbz	r2, 800a252 <__ascii_mbtowc+0x1a>
 800a240:	b14b      	cbz	r3, 800a256 <__ascii_mbtowc+0x1e>
 800a242:	7813      	ldrb	r3, [r2, #0]
 800a244:	600b      	str	r3, [r1, #0]
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	1e10      	subs	r0, r2, #0
 800a24a:	bf18      	it	ne
 800a24c:	2001      	movne	r0, #1
 800a24e:	b002      	add	sp, #8
 800a250:	4770      	bx	lr
 800a252:	4610      	mov	r0, r2
 800a254:	e7fb      	b.n	800a24e <__ascii_mbtowc+0x16>
 800a256:	f06f 0001 	mvn.w	r0, #1
 800a25a:	e7f8      	b.n	800a24e <__ascii_mbtowc+0x16>

0800a25c <__ascii_wctomb>:
 800a25c:	4603      	mov	r3, r0
 800a25e:	4608      	mov	r0, r1
 800a260:	b141      	cbz	r1, 800a274 <__ascii_wctomb+0x18>
 800a262:	2aff      	cmp	r2, #255	@ 0xff
 800a264:	d904      	bls.n	800a270 <__ascii_wctomb+0x14>
 800a266:	228a      	movs	r2, #138	@ 0x8a
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295
 800a26e:	4770      	bx	lr
 800a270:	700a      	strb	r2, [r1, #0]
 800a272:	2001      	movs	r0, #1
 800a274:	4770      	bx	lr
	...

0800a278 <fiprintf>:
 800a278:	b40e      	push	{r1, r2, r3}
 800a27a:	b503      	push	{r0, r1, lr}
 800a27c:	4601      	mov	r1, r0
 800a27e:	ab03      	add	r3, sp, #12
 800a280:	4805      	ldr	r0, [pc, #20]	@ (800a298 <fiprintf+0x20>)
 800a282:	f853 2b04 	ldr.w	r2, [r3], #4
 800a286:	6800      	ldr	r0, [r0, #0]
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	f000 f837 	bl	800a2fc <_vfiprintf_r>
 800a28e:	b002      	add	sp, #8
 800a290:	f85d eb04 	ldr.w	lr, [sp], #4
 800a294:	b003      	add	sp, #12
 800a296:	4770      	bx	lr
 800a298:	20000024 	.word	0x20000024

0800a29c <abort>:
 800a29c:	b508      	push	{r3, lr}
 800a29e:	2006      	movs	r0, #6
 800a2a0:	f000 fa00 	bl	800a6a4 <raise>
 800a2a4:	2001      	movs	r0, #1
 800a2a6:	f7f7 f8dd 	bl	8001464 <_exit>

0800a2aa <__sfputc_r>:
 800a2aa:	6893      	ldr	r3, [r2, #8]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	b410      	push	{r4}
 800a2b2:	6093      	str	r3, [r2, #8]
 800a2b4:	da08      	bge.n	800a2c8 <__sfputc_r+0x1e>
 800a2b6:	6994      	ldr	r4, [r2, #24]
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	db01      	blt.n	800a2c0 <__sfputc_r+0x16>
 800a2bc:	290a      	cmp	r1, #10
 800a2be:	d103      	bne.n	800a2c8 <__sfputc_r+0x1e>
 800a2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c4:	f000 b932 	b.w	800a52c <__swbuf_r>
 800a2c8:	6813      	ldr	r3, [r2, #0]
 800a2ca:	1c58      	adds	r0, r3, #1
 800a2cc:	6010      	str	r0, [r2, #0]
 800a2ce:	7019      	strb	r1, [r3, #0]
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <__sfputs_r>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	4614      	mov	r4, r2
 800a2e0:	18d5      	adds	r5, r2, r3
 800a2e2:	42ac      	cmp	r4, r5
 800a2e4:	d101      	bne.n	800a2ea <__sfputs_r+0x12>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e007      	b.n	800a2fa <__sfputs_r+0x22>
 800a2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff ffda 	bl	800a2aa <__sfputc_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d1f3      	bne.n	800a2e2 <__sfputs_r+0xa>
 800a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2fc <_vfiprintf_r>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	460d      	mov	r5, r1
 800a302:	b09d      	sub	sp, #116	@ 0x74
 800a304:	4614      	mov	r4, r2
 800a306:	4698      	mov	r8, r3
 800a308:	4606      	mov	r6, r0
 800a30a:	b118      	cbz	r0, 800a314 <_vfiprintf_r+0x18>
 800a30c:	6a03      	ldr	r3, [r0, #32]
 800a30e:	b90b      	cbnz	r3, 800a314 <_vfiprintf_r+0x18>
 800a310:	f7fe facc 	bl	80088ac <__sinit>
 800a314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a316:	07d9      	lsls	r1, r3, #31
 800a318:	d405      	bmi.n	800a326 <_vfiprintf_r+0x2a>
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	059a      	lsls	r2, r3, #22
 800a31e:	d402      	bmi.n	800a326 <_vfiprintf_r+0x2a>
 800a320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a322:	f7fe fbb8 	bl	8008a96 <__retarget_lock_acquire_recursive>
 800a326:	89ab      	ldrh	r3, [r5, #12]
 800a328:	071b      	lsls	r3, r3, #28
 800a32a:	d501      	bpl.n	800a330 <_vfiprintf_r+0x34>
 800a32c:	692b      	ldr	r3, [r5, #16]
 800a32e:	b99b      	cbnz	r3, 800a358 <_vfiprintf_r+0x5c>
 800a330:	4629      	mov	r1, r5
 800a332:	4630      	mov	r0, r6
 800a334:	f000 f938 	bl	800a5a8 <__swsetup_r>
 800a338:	b170      	cbz	r0, 800a358 <_vfiprintf_r+0x5c>
 800a33a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a33c:	07dc      	lsls	r4, r3, #31
 800a33e:	d504      	bpl.n	800a34a <_vfiprintf_r+0x4e>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	b01d      	add	sp, #116	@ 0x74
 800a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	0598      	lsls	r0, r3, #22
 800a34e:	d4f7      	bmi.n	800a340 <_vfiprintf_r+0x44>
 800a350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a352:	f7fe fba1 	bl	8008a98 <__retarget_lock_release_recursive>
 800a356:	e7f3      	b.n	800a340 <_vfiprintf_r+0x44>
 800a358:	2300      	movs	r3, #0
 800a35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a35c:	2320      	movs	r3, #32
 800a35e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a362:	f8cd 800c 	str.w	r8, [sp, #12]
 800a366:	2330      	movs	r3, #48	@ 0x30
 800a368:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a518 <_vfiprintf_r+0x21c>
 800a36c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a370:	f04f 0901 	mov.w	r9, #1
 800a374:	4623      	mov	r3, r4
 800a376:	469a      	mov	sl, r3
 800a378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37c:	b10a      	cbz	r2, 800a382 <_vfiprintf_r+0x86>
 800a37e:	2a25      	cmp	r2, #37	@ 0x25
 800a380:	d1f9      	bne.n	800a376 <_vfiprintf_r+0x7a>
 800a382:	ebba 0b04 	subs.w	fp, sl, r4
 800a386:	d00b      	beq.n	800a3a0 <_vfiprintf_r+0xa4>
 800a388:	465b      	mov	r3, fp
 800a38a:	4622      	mov	r2, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff ffa2 	bl	800a2d8 <__sfputs_r>
 800a394:	3001      	adds	r0, #1
 800a396:	f000 80a7 	beq.w	800a4e8 <_vfiprintf_r+0x1ec>
 800a39a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a39c:	445a      	add	r2, fp
 800a39e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 809f 	beq.w	800a4e8 <_vfiprintf_r+0x1ec>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3b4:	f10a 0a01 	add.w	sl, sl, #1
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	9307      	str	r3, [sp, #28]
 800a3bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3c2:	4654      	mov	r4, sl
 800a3c4:	2205      	movs	r2, #5
 800a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ca:	4853      	ldr	r0, [pc, #332]	@ (800a518 <_vfiprintf_r+0x21c>)
 800a3cc:	f7f5 ff58 	bl	8000280 <memchr>
 800a3d0:	9a04      	ldr	r2, [sp, #16]
 800a3d2:	b9d8      	cbnz	r0, 800a40c <_vfiprintf_r+0x110>
 800a3d4:	06d1      	lsls	r1, r2, #27
 800a3d6:	bf44      	itt	mi
 800a3d8:	2320      	movmi	r3, #32
 800a3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3de:	0713      	lsls	r3, r2, #28
 800a3e0:	bf44      	itt	mi
 800a3e2:	232b      	movmi	r3, #43	@ 0x2b
 800a3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ee:	d015      	beq.n	800a41c <_vfiprintf_r+0x120>
 800a3f0:	9a07      	ldr	r2, [sp, #28]
 800a3f2:	4654      	mov	r4, sl
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	f04f 0c0a 	mov.w	ip, #10
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a400:	3b30      	subs	r3, #48	@ 0x30
 800a402:	2b09      	cmp	r3, #9
 800a404:	d94b      	bls.n	800a49e <_vfiprintf_r+0x1a2>
 800a406:	b1b0      	cbz	r0, 800a436 <_vfiprintf_r+0x13a>
 800a408:	9207      	str	r2, [sp, #28]
 800a40a:	e014      	b.n	800a436 <_vfiprintf_r+0x13a>
 800a40c:	eba0 0308 	sub.w	r3, r0, r8
 800a410:	fa09 f303 	lsl.w	r3, r9, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	9304      	str	r3, [sp, #16]
 800a418:	46a2      	mov	sl, r4
 800a41a:	e7d2      	b.n	800a3c2 <_vfiprintf_r+0xc6>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d19      	adds	r1, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9103      	str	r1, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfbb      	ittet	lt
 800a428:	425b      	neglt	r3, r3
 800a42a:	f042 0202 	orrlt.w	r2, r2, #2
 800a42e:	9307      	strge	r3, [sp, #28]
 800a430:	9307      	strlt	r3, [sp, #28]
 800a432:	bfb8      	it	lt
 800a434:	9204      	strlt	r2, [sp, #16]
 800a436:	7823      	ldrb	r3, [r4, #0]
 800a438:	2b2e      	cmp	r3, #46	@ 0x2e
 800a43a:	d10a      	bne.n	800a452 <_vfiprintf_r+0x156>
 800a43c:	7863      	ldrb	r3, [r4, #1]
 800a43e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a440:	d132      	bne.n	800a4a8 <_vfiprintf_r+0x1ac>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	1d1a      	adds	r2, r3, #4
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	9203      	str	r2, [sp, #12]
 800a44a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a44e:	3402      	adds	r4, #2
 800a450:	9305      	str	r3, [sp, #20]
 800a452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a528 <_vfiprintf_r+0x22c>
 800a456:	7821      	ldrb	r1, [r4, #0]
 800a458:	2203      	movs	r2, #3
 800a45a:	4650      	mov	r0, sl
 800a45c:	f7f5 ff10 	bl	8000280 <memchr>
 800a460:	b138      	cbz	r0, 800a472 <_vfiprintf_r+0x176>
 800a462:	9b04      	ldr	r3, [sp, #16]
 800a464:	eba0 000a 	sub.w	r0, r0, sl
 800a468:	2240      	movs	r2, #64	@ 0x40
 800a46a:	4082      	lsls	r2, r0
 800a46c:	4313      	orrs	r3, r2
 800a46e:	3401      	adds	r4, #1
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a476:	4829      	ldr	r0, [pc, #164]	@ (800a51c <_vfiprintf_r+0x220>)
 800a478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a47c:	2206      	movs	r2, #6
 800a47e:	f7f5 feff 	bl	8000280 <memchr>
 800a482:	2800      	cmp	r0, #0
 800a484:	d03f      	beq.n	800a506 <_vfiprintf_r+0x20a>
 800a486:	4b26      	ldr	r3, [pc, #152]	@ (800a520 <_vfiprintf_r+0x224>)
 800a488:	bb1b      	cbnz	r3, 800a4d2 <_vfiprintf_r+0x1d6>
 800a48a:	9b03      	ldr	r3, [sp, #12]
 800a48c:	3307      	adds	r3, #7
 800a48e:	f023 0307 	bic.w	r3, r3, #7
 800a492:	3308      	adds	r3, #8
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a498:	443b      	add	r3, r7
 800a49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a49c:	e76a      	b.n	800a374 <_vfiprintf_r+0x78>
 800a49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	e7a8      	b.n	800a3fa <_vfiprintf_r+0xfe>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	9305      	str	r3, [sp, #20]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	f04f 0c0a 	mov.w	ip, #10
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ba:	3a30      	subs	r2, #48	@ 0x30
 800a4bc:	2a09      	cmp	r2, #9
 800a4be:	d903      	bls.n	800a4c8 <_vfiprintf_r+0x1cc>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0c6      	beq.n	800a452 <_vfiprintf_r+0x156>
 800a4c4:	9105      	str	r1, [sp, #20]
 800a4c6:	e7c4      	b.n	800a452 <_vfiprintf_r+0x156>
 800a4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7f0      	b.n	800a4b4 <_vfiprintf_r+0x1b8>
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <_vfiprintf_r+0x228>)
 800a4da:	a904      	add	r1, sp, #16
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7fd fda3 	bl	8008028 <_printf_float>
 800a4e2:	4607      	mov	r7, r0
 800a4e4:	1c78      	adds	r0, r7, #1
 800a4e6:	d1d6      	bne.n	800a496 <_vfiprintf_r+0x19a>
 800a4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4ea:	07d9      	lsls	r1, r3, #31
 800a4ec:	d405      	bmi.n	800a4fa <_vfiprintf_r+0x1fe>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	059a      	lsls	r2, r3, #22
 800a4f2:	d402      	bmi.n	800a4fa <_vfiprintf_r+0x1fe>
 800a4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4f6:	f7fe facf 	bl	8008a98 <__retarget_lock_release_recursive>
 800a4fa:	89ab      	ldrh	r3, [r5, #12]
 800a4fc:	065b      	lsls	r3, r3, #25
 800a4fe:	f53f af1f 	bmi.w	800a340 <_vfiprintf_r+0x44>
 800a502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a504:	e71e      	b.n	800a344 <_vfiprintf_r+0x48>
 800a506:	ab03      	add	r3, sp, #12
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	462a      	mov	r2, r5
 800a50c:	4b05      	ldr	r3, [pc, #20]	@ (800a524 <_vfiprintf_r+0x228>)
 800a50e:	a904      	add	r1, sp, #16
 800a510:	4630      	mov	r0, r6
 800a512:	f7fe f821 	bl	8008558 <_printf_i>
 800a516:	e7e4      	b.n	800a4e2 <_vfiprintf_r+0x1e6>
 800a518:	0800aabc 	.word	0x0800aabc
 800a51c:	0800aac6 	.word	0x0800aac6
 800a520:	08008029 	.word	0x08008029
 800a524:	0800a2d9 	.word	0x0800a2d9
 800a528:	0800aac2 	.word	0x0800aac2

0800a52c <__swbuf_r>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	460e      	mov	r6, r1
 800a530:	4614      	mov	r4, r2
 800a532:	4605      	mov	r5, r0
 800a534:	b118      	cbz	r0, 800a53e <__swbuf_r+0x12>
 800a536:	6a03      	ldr	r3, [r0, #32]
 800a538:	b90b      	cbnz	r3, 800a53e <__swbuf_r+0x12>
 800a53a:	f7fe f9b7 	bl	80088ac <__sinit>
 800a53e:	69a3      	ldr	r3, [r4, #24]
 800a540:	60a3      	str	r3, [r4, #8]
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	071a      	lsls	r2, r3, #28
 800a546:	d501      	bpl.n	800a54c <__swbuf_r+0x20>
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	b943      	cbnz	r3, 800a55e <__swbuf_r+0x32>
 800a54c:	4621      	mov	r1, r4
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 f82a 	bl	800a5a8 <__swsetup_r>
 800a554:	b118      	cbz	r0, 800a55e <__swbuf_r+0x32>
 800a556:	f04f 37ff 	mov.w	r7, #4294967295
 800a55a:	4638      	mov	r0, r7
 800a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	1a98      	subs	r0, r3, r2
 800a564:	6963      	ldr	r3, [r4, #20]
 800a566:	b2f6      	uxtb	r6, r6
 800a568:	4283      	cmp	r3, r0
 800a56a:	4637      	mov	r7, r6
 800a56c:	dc05      	bgt.n	800a57a <__swbuf_r+0x4e>
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	f7ff fdf7 	bl	800a164 <_fflush_r>
 800a576:	2800      	cmp	r0, #0
 800a578:	d1ed      	bne.n	800a556 <__swbuf_r+0x2a>
 800a57a:	68a3      	ldr	r3, [r4, #8]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	6022      	str	r2, [r4, #0]
 800a586:	701e      	strb	r6, [r3, #0]
 800a588:	6962      	ldr	r2, [r4, #20]
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d004      	beq.n	800a59a <__swbuf_r+0x6e>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	07db      	lsls	r3, r3, #31
 800a594:	d5e1      	bpl.n	800a55a <__swbuf_r+0x2e>
 800a596:	2e0a      	cmp	r6, #10
 800a598:	d1df      	bne.n	800a55a <__swbuf_r+0x2e>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4628      	mov	r0, r5
 800a59e:	f7ff fde1 	bl	800a164 <_fflush_r>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d0d9      	beq.n	800a55a <__swbuf_r+0x2e>
 800a5a6:	e7d6      	b.n	800a556 <__swbuf_r+0x2a>

0800a5a8 <__swsetup_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4b29      	ldr	r3, [pc, #164]	@ (800a650 <__swsetup_r+0xa8>)
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	b118      	cbz	r0, 800a5bc <__swsetup_r+0x14>
 800a5b4:	6a03      	ldr	r3, [r0, #32]
 800a5b6:	b90b      	cbnz	r3, 800a5bc <__swsetup_r+0x14>
 800a5b8:	f7fe f978 	bl	80088ac <__sinit>
 800a5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c0:	0719      	lsls	r1, r3, #28
 800a5c2:	d422      	bmi.n	800a60a <__swsetup_r+0x62>
 800a5c4:	06da      	lsls	r2, r3, #27
 800a5c6:	d407      	bmi.n	800a5d8 <__swsetup_r+0x30>
 800a5c8:	2209      	movs	r2, #9
 800a5ca:	602a      	str	r2, [r5, #0]
 800a5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5d0:	81a3      	strh	r3, [r4, #12]
 800a5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d6:	e033      	b.n	800a640 <__swsetup_r+0x98>
 800a5d8:	0758      	lsls	r0, r3, #29
 800a5da:	d512      	bpl.n	800a602 <__swsetup_r+0x5a>
 800a5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5de:	b141      	cbz	r1, 800a5f2 <__swsetup_r+0x4a>
 800a5e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	d002      	beq.n	800a5ee <__swsetup_r+0x46>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff f8bd 	bl	8009768 <_free_r>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5f8:	81a3      	strh	r3, [r4, #12]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	6923      	ldr	r3, [r4, #16]
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f043 0308 	orr.w	r3, r3, #8
 800a608:	81a3      	strh	r3, [r4, #12]
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	b94b      	cbnz	r3, 800a622 <__swsetup_r+0x7a>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a618:	d003      	beq.n	800a622 <__swsetup_r+0x7a>
 800a61a:	4621      	mov	r1, r4
 800a61c:	4628      	mov	r0, r5
 800a61e:	f000 f883 	bl	800a728 <__smakebuf_r>
 800a622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a626:	f013 0201 	ands.w	r2, r3, #1
 800a62a:	d00a      	beq.n	800a642 <__swsetup_r+0x9a>
 800a62c:	2200      	movs	r2, #0
 800a62e:	60a2      	str	r2, [r4, #8]
 800a630:	6962      	ldr	r2, [r4, #20]
 800a632:	4252      	negs	r2, r2
 800a634:	61a2      	str	r2, [r4, #24]
 800a636:	6922      	ldr	r2, [r4, #16]
 800a638:	b942      	cbnz	r2, 800a64c <__swsetup_r+0xa4>
 800a63a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a63e:	d1c5      	bne.n	800a5cc <__swsetup_r+0x24>
 800a640:	bd38      	pop	{r3, r4, r5, pc}
 800a642:	0799      	lsls	r1, r3, #30
 800a644:	bf58      	it	pl
 800a646:	6962      	ldrpl	r2, [r4, #20]
 800a648:	60a2      	str	r2, [r4, #8]
 800a64a:	e7f4      	b.n	800a636 <__swsetup_r+0x8e>
 800a64c:	2000      	movs	r0, #0
 800a64e:	e7f7      	b.n	800a640 <__swsetup_r+0x98>
 800a650:	20000024 	.word	0x20000024

0800a654 <_raise_r>:
 800a654:	291f      	cmp	r1, #31
 800a656:	b538      	push	{r3, r4, r5, lr}
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	d904      	bls.n	800a668 <_raise_r+0x14>
 800a65e:	2316      	movs	r3, #22
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a66a:	b112      	cbz	r2, 800a672 <_raise_r+0x1e>
 800a66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a670:	b94b      	cbnz	r3, 800a686 <_raise_r+0x32>
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f830 	bl	800a6d8 <_getpid_r>
 800a678:	4622      	mov	r2, r4
 800a67a:	4601      	mov	r1, r0
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a682:	f000 b817 	b.w	800a6b4 <_kill_r>
 800a686:	2b01      	cmp	r3, #1
 800a688:	d00a      	beq.n	800a6a0 <_raise_r+0x4c>
 800a68a:	1c59      	adds	r1, r3, #1
 800a68c:	d103      	bne.n	800a696 <_raise_r+0x42>
 800a68e:	2316      	movs	r3, #22
 800a690:	6003      	str	r3, [r0, #0]
 800a692:	2001      	movs	r0, #1
 800a694:	e7e7      	b.n	800a666 <_raise_r+0x12>
 800a696:	2100      	movs	r1, #0
 800a698:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a69c:	4620      	mov	r0, r4
 800a69e:	4798      	blx	r3
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	e7e0      	b.n	800a666 <_raise_r+0x12>

0800a6a4 <raise>:
 800a6a4:	4b02      	ldr	r3, [pc, #8]	@ (800a6b0 <raise+0xc>)
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	f7ff bfd3 	b.w	800a654 <_raise_r>
 800a6ae:	bf00      	nop
 800a6b0:	20000024 	.word	0x20000024

0800a6b4 <_kill_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	@ (800a6d4 <_kill_r+0x20>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	4611      	mov	r1, r2
 800a6c0:	602b      	str	r3, [r5, #0]
 800a6c2:	f7f6 febf 	bl	8001444 <_kill>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	d102      	bne.n	800a6d0 <_kill_r+0x1c>
 800a6ca:	682b      	ldr	r3, [r5, #0]
 800a6cc:	b103      	cbz	r3, 800a6d0 <_kill_r+0x1c>
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	bd38      	pop	{r3, r4, r5, pc}
 800a6d2:	bf00      	nop
 800a6d4:	2000c3b0 	.word	0x2000c3b0

0800a6d8 <_getpid_r>:
 800a6d8:	f7f6 beac 	b.w	8001434 <_getpid>

0800a6dc <__swhatbuf_r>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	460c      	mov	r4, r1
 800a6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e4:	2900      	cmp	r1, #0
 800a6e6:	b096      	sub	sp, #88	@ 0x58
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	461e      	mov	r6, r3
 800a6ec:	da0d      	bge.n	800a70a <__swhatbuf_r+0x2e>
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6f4:	f04f 0100 	mov.w	r1, #0
 800a6f8:	bf14      	ite	ne
 800a6fa:	2340      	movne	r3, #64	@ 0x40
 800a6fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a700:	2000      	movs	r0, #0
 800a702:	6031      	str	r1, [r6, #0]
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	b016      	add	sp, #88	@ 0x58
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	466a      	mov	r2, sp
 800a70c:	f000 f848 	bl	800a7a0 <_fstat_r>
 800a710:	2800      	cmp	r0, #0
 800a712:	dbec      	blt.n	800a6ee <__swhatbuf_r+0x12>
 800a714:	9901      	ldr	r1, [sp, #4]
 800a716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a71a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a71e:	4259      	negs	r1, r3
 800a720:	4159      	adcs	r1, r3
 800a722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a726:	e7eb      	b.n	800a700 <__swhatbuf_r+0x24>

0800a728 <__smakebuf_r>:
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a72c:	079d      	lsls	r5, r3, #30
 800a72e:	4606      	mov	r6, r0
 800a730:	460c      	mov	r4, r1
 800a732:	d507      	bpl.n	800a744 <__smakebuf_r+0x1c>
 800a734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	2301      	movs	r3, #1
 800a73e:	6163      	str	r3, [r4, #20]
 800a740:	b003      	add	sp, #12
 800a742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a744:	ab01      	add	r3, sp, #4
 800a746:	466a      	mov	r2, sp
 800a748:	f7ff ffc8 	bl	800a6dc <__swhatbuf_r>
 800a74c:	9f00      	ldr	r7, [sp, #0]
 800a74e:	4605      	mov	r5, r0
 800a750:	4639      	mov	r1, r7
 800a752:	4630      	mov	r0, r6
 800a754:	f7ff f87c 	bl	8009850 <_malloc_r>
 800a758:	b948      	cbnz	r0, 800a76e <__smakebuf_r+0x46>
 800a75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75e:	059a      	lsls	r2, r3, #22
 800a760:	d4ee      	bmi.n	800a740 <__smakebuf_r+0x18>
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	f043 0302 	orr.w	r3, r3, #2
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	e7e2      	b.n	800a734 <__smakebuf_r+0xc>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	6020      	str	r0, [r4, #0]
 800a772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	9b01      	ldr	r3, [sp, #4]
 800a77a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a77e:	b15b      	cbz	r3, 800a798 <__smakebuf_r+0x70>
 800a780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a784:	4630      	mov	r0, r6
 800a786:	f000 f81d 	bl	800a7c4 <_isatty_r>
 800a78a:	b128      	cbz	r0, 800a798 <__smakebuf_r+0x70>
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	f023 0303 	bic.w	r3, r3, #3
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	431d      	orrs	r5, r3
 800a79c:	81a5      	strh	r5, [r4, #12]
 800a79e:	e7cf      	b.n	800a740 <__smakebuf_r+0x18>

0800a7a0 <_fstat_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	@ (800a7c0 <_fstat_r+0x20>)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	602b      	str	r3, [r5, #0]
 800a7ae:	f7f6 fe8d 	bl	80014cc <_fstat>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	d102      	bne.n	800a7bc <_fstat_r+0x1c>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	b103      	cbz	r3, 800a7bc <_fstat_r+0x1c>
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	bf00      	nop
 800a7c0:	2000c3b0 	.word	0x2000c3b0

0800a7c4 <_isatty_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	@ (800a7e0 <_isatty_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f6 fe8c 	bl	80014ec <_isatty>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_isatty_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_isatty_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	2000c3b0 	.word	0x2000c3b0

0800a7e4 <_init>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	bf00      	nop
 800a7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ea:	bc08      	pop	{r3}
 800a7ec:	469e      	mov	lr, r3
 800a7ee:	4770      	bx	lr

0800a7f0 <_fini>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	bf00      	nop
 800a7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f6:	bc08      	pop	{r3}
 800a7f8:	469e      	mov	lr, r3
 800a7fa:	4770      	bx	lr
